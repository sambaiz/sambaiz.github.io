<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/golang/</link>
    <description>Recent content in golang on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 25 Feb 2023 00:54:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>平衡二分探索木 AVL木 を Go で実装して高さが最小限に保たれることを確認する</title>
      <link>https://www.sambaiz.net/article/439/</link>
      <pubDate>Sat, 25 Feb 2023 00:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/439/</guid>
      <description>AVL木は二分探索木の一種である平衡二分探索木の一つで、高さを最小限に保つことで操作の計算量を抑えることができる。 変更があるたびに左右の部分</description>
    </item>
    
    <item>
      <title>Java から Go でビルドした shared library を JNI と JNA で呼び出した際の速度を比較する</title>
      <link>https://www.sambaiz.net/article/437/</link>
      <pubDate>Sun, 29 Jan 2023 23:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/437/</guid>
      <description>JNI (Java Native Interface) は Java から JVM 外で実行される C/C++ のネイティブコードを呼び出したり、ネイティブコードから Java のコードを呼び出すためのインタフェースで、 これによ</description>
    </item>
    
    <item>
      <title>deanishe/awgo で Alfred の Workflows で動かすスクリプトを実装する</title>
      <link>https://www.sambaiz.net/article/418/</link>
      <pubDate>Mon, 26 Sep 2022 12:34:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/418/</guid>
      <description>deanishe/awgo は Alfred の Workflows で動かすスクリプトを実装するためのライブラリ。 NewItem() で Script Filter JSON を出力して次の要素に値を渡せるほか keychain を読み書きしたり wf.Args() を呼び workflow:log を引数に渡す</description>
    </item>
    
    <item>
      <title>WebAssemblyでGoの関数をブラウザのJavaScriptから呼び出す</title>
      <link>https://www.sambaiz.net/article/412/</link>
      <pubDate>Sat, 30 Jul 2022 00:34:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/412/</guid>
      <description>ボタンを押すとGoで実装された関数が呼ばれその中でテキストの値が更新される。 $ go version go version go1.18 darwin/amd64 syscall/js packageでjs側の変数を参照したり関数を呼</description>
    </item>
    
    <item>
      <title>繰り返しコマンドを実行する際都度プロセスを生成する場合と常駐させておきUNIXドメインソケットで入出力を行う場合の速度比較</title>
      <link>https://www.sambaiz.net/article/404/</link>
      <pubDate>Fri, 06 May 2022 20:51:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/404/</guid>
      <description>一部の処理が異なる言語で書かれているなどしてコマンドを繰り返し実行するとプロセス生成の度にメモリ領域の確保などのオーバーヘッドが発生する。常</description>
    </item>
    
    <item>
      <title>NewRelic CodeStreamでコードの質問やデバッグを効率的に行えるようにする</title>
      <link>https://www.sambaiz.net/article/403/</link>
      <pubDate>Wed, 04 May 2022 22:43:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/403/</guid>
      <description>New Relic CodeStreamはIDE上でコードの質問やIssue/PRの作成、デバッグを行う際に役に立つプラグインで、IntelliJやVSCo</description>
    </item>
    
    <item>
      <title>New RelicのGraphQL API、NerdGraphでリソースを取得する</title>
      <link>https://www.sambaiz.net/article/400/</link>
      <pubDate>Fri, 01 Apr 2022 22:02:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/400/</guid>
      <description>New RelicのNerdGraphはGraphQLのAPIで、リソースを取得したり更新することができる。 curl -X POST https://api.newrelic.com/graphql \ -H &amp;#39;Content-Type: application/json&amp;#39; \ -H &amp;#39;API-Key: *****&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;{ requestContext {</description>
    </item>
    
    <item>
      <title>New Relicでインフラやアプリケーションをモニタリングする</title>
      <link>https://www.sambaiz.net/article/399/</link>
      <pubDate>Wed, 30 Mar 2022 19:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/399/</guid>
      <description>New RelicはインフラやアプリケーションをモニタリングするSaaSで、同種のサービスとしてはDatadogがある。 2020年に製品や課金体系</description>
    </item>
    
    <item>
      <title>GoでAmazon Forecastに時系列データをimportしPredictorを作成して予測結果をS3にexportする</title>
      <link>https://www.sambaiz.net/article/380/</link>
      <pubDate>Mon, 20 Sep 2021 23:26:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/380/</guid>
      <description>以前コンソール上で実行したAmazon Forecastでの時系列データの学習、予測をGoで行う。全体のコードはGitHubにある。 Amazon Fore</description>
    </item>
    
    <item>
      <title>AWS X-rayでアプリケーションのリクエストをトレースし可視化する</title>
      <link>https://www.sambaiz.net/article/376/</link>
      <pubDate>Thu, 05 Aug 2021 02:32:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/376/</guid>
      <description>AWS X-rayはリクエストをトレースして、タイムラインやサービスマップを可視化、分析できるサービス。 サービスの数が増えると見えづらくなる、どこ</description>
    </item>
    
    <item>
      <title>gomockのmockを入力とするmockが意図した出力を返さない理由</title>
      <link>https://www.sambaiz.net/article/375/</link>
      <pubDate>Tue, 27 Jul 2021 12:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/375/</guid>
      <description>interfaceを受け取るinterfaceを定義し、 package main type Foo interface { Shout() string } type Bar interface { Bar(foo Foo) string } gomockでmockgenする。 // Code generated by MockGen. DO NOT EDIT.</description>
    </item>
    
    <item>
      <title>ReviewdogのGitHub ActionsでGoのlintをかけてPRに表示する</title>
      <link>https://www.sambaiz.net/article/363/</link>
      <pubDate>Thu, 03 Jun 2021 19:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/363/</guid>
      <description>Reviewdogはlinterの結果をPRにコメントしてくれるツール。 差分のみに適用することができるので段階的に改善していくこともできる。</description>
    </item>
    
    <item>
      <title>Goのio packageのReader/Writer/Closer/Seeker interfaceとストリーム処理</title>
      <link>https://www.sambaiz.net/article/330/</link>
      <pubDate>Thu, 11 Mar 2021 20:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/330/</guid>
      <description>Goのio packageにはデータの読み書きに関わるインタフェース、Reader/Writer/Closer/Seeker およびこれらを組み</description>
    </item>
    
    <item>
      <title>x/sync/semaphoreでgoroutineの数を制御する</title>
      <link>https://www.sambaiz.net/article/329/</link>
      <pubDate>Tue, 09 Mar 2021 21:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/329/</guid>
      <description>Goの特長の一つにgoroutineによる並列実行の容易さがあるが、 無尽蔵にgoroutineを生成するとパフォーマンスが悪化してしまうため</description>
    </item>
    
    <item>
      <title>Amazon Forecastで時系列データの予測を行う</title>
      <link>https://www.sambaiz.net/article/327/</link>
      <pubDate>Sun, 21 Feb 2021 01:04:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/327/</guid>
      <description>Amazon Forecastは機械学習によって時系列データの予測を行うマネージドサービス。 ドメインやアルゴリズムを選んでデータを投入すればそれらしい出</description>
    </item>
    
    <item>
      <title>偽陽性を許容して空間効率良くキーの存在を確認するBloom filterとCuckoo filter</title>
      <link>https://www.sambaiz.net/article/326/</link>
      <pubDate>Wed, 17 Feb 2021 02:53:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/326/</guid>
      <description>例えばデータストアへのアクセス抑制のためにキーの存在を確認する際、 全てのキーを保持して探索すれば100%正しく判定できるが、キーが長く数が膨</description>
    </item>
    
    <item>
      <title>GoのSheets API v4クライアントでSpreadsheetを読み書きする</title>
      <link>https://www.sambaiz.net/article/312/</link>
      <pubDate>Mon, 23 Nov 2020 22:03:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/312/</guid>
      <description>まずGCPのコンソールでプロジェクトを作成するか選んでGoogle Sheets APIを有効にする。 料金はかからないが、デフォルトのQuotaが、100</description>
    </item>
    
    <item>
      <title>GoでAthenaのクエリを実行する</title>
      <link>https://www.sambaiz.net/article/309/</link>
      <pubDate>Sat, 14 Nov 2020 16:19:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/309/</guid>
      <description>segmentio/go-athenaを使う。database/sqlのドライバーとして提供されていて、 StartQueryExecutio</description>
    </item>
    
    <item>
      <title>Go CompilerのFunction Inlining</title>
      <link>https://www.sambaiz.net/article/304/</link>
      <pubDate>Tue, 06 Oct 2020 22:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/304/</guid>
      <description>Go Compilerが行う、関数の処理をインラインに展開することで呼び出しコストを削減するFunction Inliningの話。 式の数が40未</description>
    </item>
    
    <item>
      <title>Goの実装に手を入れずにHTTPリクエストをmockするライブラリhttpmockとその仕組み</title>
      <link>https://www.sambaiz.net/article/296/</link>
      <pubDate>Tue, 08 Sep 2020 23:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/296/</guid>
      <description>jarcoal/httpmockは次のようなHTTPリクエストが飛ぶ関数に対して、 import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; ) func Req() (string, error) { res, err := http.DefaultClient.Get(&amp;#34;https://google.com&amp;#34;) if err != nil { return &amp;#34;&amp;#34;, err } defer res.Body.Close() body, err := ioutil.ReadAll(res.Body)</description>
    </item>
    
    <item>
      <title>nkfによる文字コードの判定とGoでのShiftJISの扱い</title>
      <link>https://www.sambaiz.net/article/295/</link>
      <pubDate>Mon, 07 Sep 2020 21:38:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/295/</guid>
      <description>file --mime で文字コードを判定しようとしたら charset=unknown-8bit と表示されてしまったので、nkf --guess したところShift_JISであることが分かった。 $ file --mime unknown.txt unknown.txt: text/plain; charset=unknown-8bit $ brew</description>
    </item>
    
    <item>
      <title>Goで参照型の変数に代入し値を変更したとき元の値に影響がある場合とない場合</title>
      <link>https://www.sambaiz.net/article/269/</link>
      <pubDate>Sat, 25 Apr 2020 22:25:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/269/</guid>
      <description>サンプル用struct。 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; ) type Data struct { Value string ValueP *string `json:&amp;#34;,omitempty&amp;#34;` Slice []Data `json:&amp;#34;,omitempty&amp;#34;` SliceP []*Data `json:&amp;#34;,omitempty&amp;#34;` } func NewData() *Data { return &amp;amp;Data{ Value: &amp;#34;no-changed&amp;#34;, ValueP: &amp;amp;[]string{&amp;#34;no-changed&amp;#34;}[0], Slice: []Data{ Data{ Value: &amp;#34;no-changed&amp;#34;, }, Data{ Value: &amp;#34;no-changed&amp;#34;, }, }, SliceP: []*Data{ &amp;amp;Data{ Value: &amp;#34;no-changed&amp;#34;, }, }, } } 参照を取っ</description>
    </item>
    
    <item>
      <title>Goのcipher packageに実装されている暗号利用モードのベンチマーク</title>
      <link>https://www.sambaiz.net/article/268/</link>
      <pubDate>Sun, 12 Apr 2020 23:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/268/</guid>
      <description>暗号利用モードはブロック長より長いメッセージに対してどのようにブロック暗号を適用するかのアルゴリズム。 ブロック暗号 ブロック暗号は固定長のブロ</description>
    </item>
    
    <item>
      <title>Goのツールのバージョンをgo.modで指定する</title>
      <link>https://www.sambaiz.net/article/263/</link>
      <pubDate>Sun, 22 Mar 2020 01:19:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/263/</guid>
      <description>依存moduleと同様にツールもバージョンを指定し、挙動や出力が変わらないようにする。 Tools as dependencies まず次の tools.go のようなファイルを作ってimportし</description>
    </item>
    
    <item>
      <title>Go Modulesのreplaceでforkしたコードのimportを書き換えずにfork後のpackageに向ける</title>
      <link>https://www.sambaiz.net/article/262/</link>
      <pubDate>Sun, 01 Mar 2020 21:19:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/262/</guid>
      <description>Goはimportの際に相対パスやモジュール名ではなくgithub.com/foo/barのようなフルパスで指定するため、forkしたコード</description>
    </item>
    
    <item>
      <title>Go Modulesのproxyとsumdb</title>
      <link>https://www.sambaiz.net/article/261/</link>
      <pubDate>Sat, 29 Feb 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/261/</guid>
      <description>Module Mirror and Checksum Database Launched - The Go Blog Go1.13からデフォルトで使われるようになったGo Modulesのミラーとchecksumを返すサーバー。 Google</description>
    </item>
    
    <item>
      <title>Lambda環境でできない処理をECSで実行する</title>
      <link>https://www.sambaiz.net/article/245/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/245/</guid>
      <description>以前cdkbotというツールを出した。これはGitHubのPRからCDKのデプロイなどを実行できるツールでlambda上で動いていた。 PR上</description>
    </item>
    
    <item>
      <title>goyaccでparserを生成しLispのcons,car,cdrの式を評価する</title>
      <link>https://www.sambaiz.net/article/244/</link>
      <pubDate>Tue, 15 Oct 2019 09:41:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/244/</guid>
      <description>GoでLispのcons,car,cdrの式を評価したい。 流れとしては字句解析器(lexer, tokenizer, scanner)でソースコードを分割しtok</description>
    </item>
    
    <item>
      <title>K8s上でElastic APMを動かして外部のGo製APIサーバーのリクエストをトレースする</title>
      <link>https://www.sambaiz.net/article/241/</link>
      <pubDate>Tue, 01 Oct 2019 23:25:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/241/</guid>
      <description>Elastic Cloud on Kubernetes (ECK)で Kubernetesクラスタ上にElasticsearch, KibanaとAPM Serverを立ち上げ、外部のGo製AP</description>
    </item>
    
    <item>
      <title>Goのnet/http/pprofでCPUやMemoryをprofileする流れと内部実装</title>
      <link>https://www.sambaiz.net/article/238/</link>
      <pubDate>Mon, 16 Sep 2019 13:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/238/</guid>
      <description>Goのnet/http/pprofは pprofで可視化できるprofile.protoを返すAPIを提供するpackage。 profileを</description>
    </item>
    
    <item>
      <title>PR上でCDKのレビューやデプロイを行うツールcdkbotを作った</title>
      <link>https://www.sambaiz.net/article/235/</link>
      <pubDate>Thu, 29 Aug 2019 22:53:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/235/</guid>
      <description>sambaiz/cdkbot PRのコメントで/diffや/deployと打つとcdk diffやcdk deployが走る。 diffを見てレビューし、良ければ/deplo</description>
    </item>
    
    <item>
      <title>Lambda上でnpm installできるLayerを作った</title>
      <link>https://www.sambaiz.net/article/233/</link>
      <pubDate>Tue, 23 Jul 2019 23:44:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/233/</guid>
      <description>Lambda上でnpm installするためにnpmとnode, npmrc入りのLambda Layerを作った。 GitHubにある。 Lambda Lay</description>
    </item>
    
    <item>
      <title>Lambda Layerでバイナリやライブラリを切り出す</title>
      <link>https://www.sambaiz.net/article/232/</link>
      <pubDate>Mon, 22 Jul 2019 21:09:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/232/</guid>
      <description>Lambdaで実行したい外部コマンドがある場合、通常バイナリをパッケージに含めることになりデプロイに時間がかかってしまう。 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/events&amp;#34; &amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34; )</description>
    </item>
    
    <item>
      <title>API GatewayでCognitoの認証をかけて必要ならログイン画面に飛ばす処理をGoで書く</title>
      <link>https://www.sambaiz.net/article/226/</link>
      <pubDate>Wed, 03 Jul 2019 20:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/226/</guid>
      <description>ブラウザから直接API GatewayのエンドポイントにアクセスしたときにCognitoのTokenで認証し、失敗したらログイン画面を表示させ</description>
    </item>
    
    <item>
      <title>AWS SAMでLambdaの関数をデプロイしServerless Application Repositoryに公開する</title>
      <link>https://www.sambaiz.net/article/207/</link>
      <pubDate>Sun, 10 Feb 2019 16:35:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/207/</guid>
      <description>AWS SAM (Serverless Application Model)はAWS公式の サーバーレスアプリケーションのビルドツール。 CloudFormationのテンプレートを設定ファイルに書く</description>
    </item>
    
    <item>
      <title>CloudFormationでVPCを作成してLambdaをデプロイしAurora Serverlessを使う</title>
      <link>https://www.sambaiz.net/article/206/</link>
      <pubDate>Sun, 03 Feb 2019 17:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/206/</guid>
      <description>Aurora ServerlessはオートスケールするAuroraで、 使ったAurora Capacity Unit (ACU)によって料金が発生するため、 使用頻度が少なかったり</description>
    </item>
    
    <item>
      <title>AWS Systems Manager (SSM)のParameter Storeに認証情報を置き参照する</title>
      <link>https://www.sambaiz.net/article/204/</link>
      <pubDate>Mon, 07 Jan 2019 23:50:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/204/</guid>
      <description>DBのパスワードやAPIトークンといった認証情報をバージョン管理するコードや設定ファイル上に書くとOSS化など公開範囲を広げるときにやや困る</description>
    </item>
    
    <item>
      <title>Goで高速にJSONを扱うライブラリeasyjsonとfastjson</title>
      <link>https://www.sambaiz.net/article/193/</link>
      <pubDate>Wed, 24 Oct 2018 01:33:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/193/</guid>
      <description>easyjson easyjsonは次のようなstructごとのコードを自動生成してReflectionなしで高速にJSON Marshal/Unmarsha</description>
    </item>
    
    <item>
      <title>MySQLのtime_zoneとgo-sql-driver/mysqlのlocの関係</title>
      <link>https://www.sambaiz.net/article/189/</link>
      <pubDate>Tue, 02 Oct 2018 22:22:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/189/</guid>
      <description>go-sql-driver/mysql で MySQL に接続するときに適切なパラメータを渡さないと日時が意図しない値になる問題について。 &amp;gt; select version(); +-----------+ | version() | +-----------+ | 5.7.21 | +-----------+ 前提 タイムゾーンがDBにロー</description>
    </item>
    
    <item>
      <title>KubernetesのCustom Resource Definition(CRD)とCustom Controller</title>
      <link>https://www.sambaiz.net/article/182/</link>
      <pubDate>Thu, 09 Aug 2018 23:59:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/182/</guid>
      <description>K8sではDeploymentを作成したときにReplicaSetも作成されるようにしたり、 Load Balancer Serviceを作成したときにGCPなどその</description>
    </item>
    
    <item>
      <title>GCPのCloud Pub/Sub</title>
      <link>https://www.sambaiz.net/article/180/</link>
      <pubDate>Thu, 26 Jul 2018 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/180/</guid>
      <description>スケーラビリティに優れるメッセージングミドルウェア。 データはPullするだけではなくhttpsのエンドポイントにPushすることもでき、Cl</description>
    </item>
    
    <item>
      <title>GAEのTaskQueue</title>
      <link>https://www.sambaiz.net/article/178/</link>
      <pubDate>Sun, 15 Jul 2018 16:03:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/178/</guid>
      <description>GCPのマネージドなQueueサービスとしてGAEのTaskQueueがあることを教えてもらったので動かしてみる。 PushQueueとPul</description>
    </item>
    
    <item>
      <title>WebSocketでの通信内容をWiresharkで見る</title>
      <link>https://www.sambaiz.net/article/177/</link>
      <pubDate>Tue, 10 Jul 2018 23:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/177/</guid>
      <description>Webで双方向通信するためのプロトコル、WebSocketでの通信内容をWiresharkで見る。 アプリケーション サーバー package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;golang.org/x/net/websocket&amp;#34;</description>
    </item>
    
    <item>
      <title>GoのgRPC ServerのInterceptor(recovery/auth/zap/prometheus)</title>
      <link>https://www.sambaiz.net/article/174/</link>
      <pubDate>Tue, 26 Jun 2018 23:50:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/174/</guid>
      <description>grpc-goはInterceptor(Middleware)でhandlerの前後で処理を行うことができる。 UnaryとStreamでシグ</description>
    </item>
    
    <item>
      <title>GKEでのService(ClusterIP/NodePort/LoadBalancer)とIngress</title>
      <link>https://www.sambaiz.net/article/173/</link>
      <pubDate>Sat, 23 Jun 2018 15:02:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/173/</guid>
      <description>疎通確認用アプリケーション GETでは200を返し、POSTではURLにGETリクエストを送ってステータスコードを返す。 package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net/http&amp;#34; ) type PostBody</description>
    </item>
    
    <item>
      <title>Kubernetesの1PodでAppとfluentdコンテナを動かしてBigQueryに送る</title>
      <link>https://www.sambaiz.net/article/159/</link>
      <pubDate>Tue, 13 Mar 2018 01:04:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/159/</guid>
      <description>Logging AgentをNodeレベルのDaemonSetとして動かすのではなく、Podの中にSidecar Containerとして動かす。その分リソ</description>
    </item>
    
    <item>
      <title>xorm reverseでDBスキーマからGoのstructを生成する</title>
      <link>https://www.sambaiz.net/article/153/</link>
      <pubDate>Sat, 10 Feb 2018 15:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/153/</guid>
      <description>GoのORMのxormにはxorm reverseというDBのスキーマから以下のようなテンプレートに沿ったGoのstructなどを生成するツー</description>
    </item>
    
    <item>
      <title>Gooseリポジトリのmerge時にバージョンを上げmigrationボタンをSlackに出す</title>
      <link>https://www.sambaiz.net/article/149/</link>
      <pubDate>Fri, 19 Jan 2018 09:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/149/</guid>
      <description>GooseはGo製のDB Migrationツール。 コード こんなリポジトリを作成し、各自ブランチを切ってGoose形式のup/downのSQL</description>
    </item>
    
    <item>
      <title>Golangの高速なロガーzapとlumberjackでログを出力してrotateさせる</title>
      <link>https://www.sambaiz.net/article/104/</link>
      <pubDate>Sat, 27 May 2017 16:35:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/104/</guid>
      <description>https://github.com/uber-go/zap $ go get -u go.uber.org/zap $ go get -u gopkg.in/natefinch/lumberjack.v2 速さの秘訣 Go言語のLogger「zap」は何故高速に構造化されたログを出力する事が出来るのか｜株式会社CAリワード r</description>
    </item>
    
    <item>
      <title>godocのメモ</title>
      <link>https://www.sambaiz.net/article/91/</link>
      <pubDate>Wed, 05 Apr 2017 22:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/91/</guid>
      <description>https://godoc.org/golang.org/x/tools/cmd/godoc コメントからドキュメントを生成する。 $ godoc cmd/fmt Printf func Printf(format string, a ...interface{}) (n int, err error) Printf formats according to a format specifier and writes to standard output. It returns the number of bytes written and any write error encountered. $ godoc -src cmd/fmt Printf // Printf formats according to a format specifier and</description>
    </item>
    
    <item>
      <title>一定間隔でjsonデータを作って送り続けるCLIツールを作った</title>
      <link>https://www.sambaiz.net/article/76/</link>
      <pubDate>Sat, 04 Mar 2017 23:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/76/</guid>
      <description>Elasticsearchにリアルタイムなテストデータを投入するために、一定間隔でjsonを作って送り続けるCLIツールを作った。Go製。 u</description>
    </item>
    
    <item>
      <title>Goroutineの数をworkerで抑制する</title>
      <link>https://www.sambaiz.net/article/74/</link>
      <pubDate>Mon, 27 Feb 2017 23:10:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/74/</guid>
      <description>Goのnet/httpとKeep-Alive - sambaiz.netでやったように、 あるエンドポイントに連続してGoroutineでリクエス</description>
    </item>
    
    <item>
      <title>fluentdのmonitor_agentのデータをGoでGoogle Stackdriverに送って監視する</title>
      <link>https://www.sambaiz.net/article/66/</link>
      <pubDate>Sun, 19 Feb 2017 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/66/</guid>
      <description>fluentdのmonitor_agent メトリクスをjsonで返すAPIを提供する。 &amp;lt;source&amp;gt; @type monitor_agent bind 0.0.0.0 port 24220 &amp;lt;/source&amp;gt; $ curl localhost:24220/api/plugins.json | jq { &amp;#34;plugins&amp;#34;: [ { &amp;#34;plugin_id&amp;#34;: &amp;#34;object:3f8590d8c250&amp;#34;, &amp;#34;plugin_category&amp;#34;: &amp;#34;input&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;forward&amp;#34;, &amp;#34;config&amp;#34;: { &amp;#34;@type&amp;#34;: &amp;#34;forward&amp;#34;,</description>
    </item>
    
    <item>
      <title>Goのselectの中断処理(close, context)</title>
      <link>https://www.sambaiz.net/article/65/</link>
      <pubDate>Thu, 16 Feb 2017 20:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/65/</guid>
      <description>close(chan) closeしたチャネルを読むとゼロ値になるので、selectで待っているやつにまとめて送れる。 func main() { done := make(chan bool) wg := new(sync.WaitGroup) waitTillDone(wg, done) waitTillDone(wg, done) // こんなことしな</description>
    </item>
    
    <item>
      <title>GoでDynamoDBを使う</title>
      <link>https://www.sambaiz.net/article/63/</link>
      <pubDate>Sun, 12 Feb 2017 23:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/63/</guid>
      <description>テーブルを作成する プライマリキー テーブルの操作のガイドライン - Amazon DynamoDB プライマリキーとしてパーティションキー(ハッシュキー)とオプションのソート</description>
    </item>
    
    <item>
      <title>Goのnet/httpとKeep-Alive</title>
      <link>https://www.sambaiz.net/article/61/</link>
      <pubDate>Tue, 07 Feb 2017 22:42:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/61/</guid>
      <description>Keep-AliveするとTCPコネクションを使い回し、名前解決やコネクション(3 way handshake)を毎回行わなくてよくなる。 Goのne</description>
    </item>
    
    <item>
      <title>Goのnet/http.Client.Doの内部実装をたどったメモ</title>
      <link>https://www.sambaiz.net/article/53/</link>
      <pubDate>Mon, 30 Jan 2017 20:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/53/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;io/ioutil&amp;#34; ) var client = http.Client{} func main() { req, err := http.NewRequest(&amp;#34;GET&amp;#34;, &amp;#34;http://example.com&amp;#34;, nil) if err != nil{ panic(err) } resp, err := client.Do(req) if err != nil{ panic(err) } defer resp.Body.Close() body, err := ioutil.ReadAll(resp.Body) if err != nil{ panic(err) } fmt.Println(string(body)) } Client TransportがTCPコネクショ</description>
    </item>
    
    <item>
      <title>Goのinterface/structのembedding</title>
      <link>https://www.sambaiz.net/article/50/</link>
      <pubDate>Wed, 18 Jan 2017 01:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/50/</guid>
      <description>Goには継承が存在しないが、structを埋めることで透過的に処理を委譲することができる。 https://golang.org/doc/effective_go.html#embedding 挙動 interfaceにinterfaceをem</description>
    </item>
    
    <item>
      <title>Goのpanicとrecover</title>
      <link>https://www.sambaiz.net/article/49/</link>
      <pubDate>Tue, 17 Jan 2017 23:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/49/</guid>
      <description>panic https://golang.org/pkg/builtin/#panic panicは現在のgoroutineの通常の実行を停止する組み込み関数。 index out of rangeや invalid memory address or nil pointer dereference のときなどでも呼ばれる。 defe</description>
    </item>
    
    <item>
      <title>go testでベンチマークを取ってpprofで時間がかかっている箇所を調べる</title>
      <link>https://www.sambaiz.net/article/47/</link>
      <pubDate>Wed, 04 Jan 2017 23:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/47/</guid>
      <description>この関数のベンチマークを取る。 package cal import ( &amp;#34;math/big&amp;#34; ) var cache = map[int]*big.Int{} func resetCache() { cache = map[int]*big.Int{} } func Fibonacci(n int) *big.Int { if c := cache[n]; c != nil { return c } ret := new(big.Int) before := big.NewInt(1) for i := 1; i &amp;lt; n; i++ { tmp := new(big.Int).Add(ret, before) before = ret</description>
    </item>
    
    <item>
      <title>GoogleのkvsライブラリLevelDBを使う</title>
      <link>https://www.sambaiz.net/article/45/</link>
      <pubDate>Sat, 24 Dec 2016 21:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/45/</guid>
      <description>LevelDBとは https://github.com/google/leveldb Googleが作った高速なkey-valueストレージライブラリ。 ChromeのIndexedDBやprometheus</description>
    </item>
    
    <item>
      <title>gvmでGoのバージョン管理</title>
      <link>https://www.sambaiz.net/article/44/</link>
      <pubDate>Tue, 20 Dec 2016 20:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/44/</guid>
      <description>moovweb/gvm 必要なものはREADMEを見て入れる。 $ bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) $ source ${HOME}/.gvm/scripts/gvm $ gvm install go1.7 -B $ gvm use go1.7 $ go version go version go1.7 linux/amd64 $GOPATHと$GOROOTが書き変わる($</description>
    </item>
    
    <item>
      <title>aws-sdk-goでs3にput/get</title>
      <link>https://www.sambaiz.net/article/38/</link>
      <pubDate>Wed, 30 Nov 2016 20:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/38/</guid>
      <description>aws-sdk-goでS3にputしてgetする。 package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34; &amp;#34;github.com/aws/aws-sdk-go/service/s3&amp;#34; ) const REGION = &amp;#34;ap-northeast-1&amp;#34; const BUCKET_NAME = &amp;#34;faweijojio4f3e4&amp;#34; func main() { sess, err := session.NewSession(aws.NewConfig().WithRegion(REGION)) if err != nil { fmt.Println(err.Error()) return } svc := s3.New(sess) // put data := []byte(&amp;#34;BBBBBB&amp;#34;) key := &amp;#34;AAA.txt&amp;#34; params</description>
    </item>
    
    <item>
      <title>Goでstructをリフレクションしてcsvを出力する</title>
      <link>https://www.sambaiz.net/article/37/</link>
      <pubDate>Mon, 28 Nov 2016 21:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/37/</guid>
      <description>こんなstructとデータがあったら、 type Result struct{ Name string `col:&amp;#34;who&amp;#34;` Point int } x := Result{&amp;#34;sam&amp;#34;, 100} フィールド名と、値、タグはrefrectで取れる。 x := Result{&amp;#34;sam&amp;#34;, 100} v := reflect.ValueOf(x) fmt.Println(v.Type().Field(0).Name) // -&amp;gt; Name fmt.Println(v.Type().Field(1).Name) //</description>
    </item>
    
    <item>
      <title>GolangでAPIとテストを書く(echo/dbr/glide/goose/mock)</title>
      <link>https://www.sambaiz.net/article/15/</link>
      <pubDate>Mon, 15 Aug 2016 04:07:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/15/</guid>
      <description>以下の記事を参考にして簡単なAPIとそのテストを書いてみた。コードはここ。 Go言語でTestableなWebアプリケーションを目指して｜サイ</description>
    </item>
    
  </channel>
</rss>
