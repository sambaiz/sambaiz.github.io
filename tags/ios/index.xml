<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ios on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/ios/</link>
    <description>Recent content in Ios on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 28 Mar 2020 23:55:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>作ったライブラリをCocoaPods/Carthageでimportする</title>
      <link>https://www.sambaiz.net/article/266/</link>
      <pubDate>Sat, 28 Mar 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/266/</guid>
      <description>CocoaPods 長らく使われている依存ライブラリ管理ツール。
$ sudo gem install cocoapods $ pod --version 1.9.1  podspec まずはライブラリ側の作業。podspecを埋めていく。
$ ls SampleFramework	SampleFramework.xcodeproj	SampleFrameworkTests $ pod spec create SampleFrameworkSambaiz Specification created at SampleFrameworkSambaiz.podspec $ cat SampleFrameworkSambaiz.podspec Pod::Spec.new do |spec| spec.name = &#39;SampleFrameworkSambaiz&#39; spec.version = &#39;0.0.2&#39; spec.license = { :type =&amp;gt; &#39;MIT&#39;, :file =&amp;gt; &#39;LICENSE&#39; } spec.homepage = &#39;https://github.com/sambaiz/ios-sample-framework&#39; spec.authors = { &#39;Taiki Sakamoto&#39; =&amp;gt; &#39;godgourd@gmail.com&#39; } spec.summary = &#39;Sample Framework&#39; spec.description = &amp;lt;&amp;lt;-DESC This is a sample framework DESC spec.</description>
    </item>
    
    <item>
      <title>iOSのipa(app)のProfileを異なるTeamのものに置き換えて実機で動かす</title>
      <link>https://www.sambaiz.net/article/265/</link>
      <pubDate>Tue, 24 Mar 2020 22:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/265/</guid>
      <description>Profileを置き換えて有効期限やDevice IDを更新する。
iOSアプリのProvisioning profile - sambaiz-net
codesignでの試み .ipa をunzipすると .app が出てくる。
$ unzip my-test-app.ipa $ tree Payload/ Payload/ └── my-test-app.app ├── Base.lproj │ └── LaunchScreen.storyboardc │ ├── 01J-lp-oVM-view-Ze5-6b-2t3.nib │ ├── Info.plist │ └── UIViewController-01J-lp-oVM.nib ├── Info.plist ├── PkgInfo ├── _CodeSignature │ └── CodeResources ├── embedded.mobileprovision └── my-test-app  codesign で entitlements を確認する。
$ codesign -d --entitlements :- my-test-app.app &amp;gt; entitlements.plist $ cat entitlements.plist &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.</description>
    </item>
    
    <item>
      <title>iOSアプリのProvisioning Profile</title>
      <link>https://www.sambaiz.net/article/264/</link>
      <pubDate>Tue, 24 Mar 2020 21:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/264/</guid>
      <description>アプリを実機にデプロイするために必要なもの。 App ID (prefix + Bundle ID)やインストール可能なDevice ID、 コード署名に用いた Apple発行の証明書などを含む。これらが一致しないとインストールできない。
次のTypeのProfileが存在する。
 development profile: 開発用のprofile。TeamのDeviceで動かす。 ad hoc profile: テスト用のprofile。UDIDを登録したDeviceに配布できる。 AccountにDevice family (iPhone, iPad, etc.)ごとに100台まで登録可能。 App Store profile: App Storeに上げるためのprofile。  $ ls ~/Library/MobileDevice/Provisioning\ Profiles ****.mobileprovision ... $ security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/****.mobileprovision &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt; &amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;AppIDName&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;XC net sambaiz test-app&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;ApplicationIdentifierPrefix&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;****&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;CreationDate&amp;lt;/key&amp;gt; &amp;lt;date&amp;gt;2020-03-18T11:05:13Z&amp;lt;/date&amp;gt; &amp;lt;key&amp;gt;Platform&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;iOS&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;IsXcodeManaged&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;DeveloperCertificates&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;data&amp;gt;****&amp;lt;/data&amp;gt; &amp;lt;data&amp;gt;****&amp;lt;/data&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;Entitlements&amp;lt;/key&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;application-identifier&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;****.</description>
    </item>
    
    <item>
      <title>SwiftでGCDのDispatchQueueに処理を投げて並列実行させる</title>
      <link>https://www.sambaiz.net/article/256/</link>
      <pubDate>Sat, 25 Jan 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/256/</guid>
      <description>GCD (Grand Central Dispatch)はmacOSやiOSのマルチコア環境で、 効率的に並列処理を実行するための仕組み。 OperationQueueというのもあるが、これもGCD上で動く。
DispatchQueue 処理をどのスレッドで実行するか管理するキュー。 どこからでも参照できるmainとglobalのキュー以外に新しくキューを作成することもできる。 labelは衝突しないようにreverse-DNS nameにすることが推奨されている。
DispatchQueue.main.async {} DispatchQueue.global(qos: .default).async {} DispatchQueue.global(qos: .background).async {} DispatchQueue(label: &amp;quot;net.sambaiz.serial_dispatch_queue&amp;quot;).async {} DispatchQueue(label: &amp;quot;net.sambaiz.concurrent_dispatch_queue&amp;quot;, attributes: .concurrent).async {}  sync/async ブロッキングするsync()としないasync()。排他制御ではないのに注意。
DispatchQueue.global().async { print(&amp;quot;async&amp;quot;) DispatchQueue.main.sync { print(&amp;quot;sync&amp;quot;) } print(&amp;quot;done&amp;quot;) } print(&amp;quot;run&amp;quot;)  run async sync done  serial/concurrent 処理を単一のスレッドで行う(serial)か、複数のスレッドで行う(concurrent)かはキューによって決まり、 メインスレッドで動かすmainはserial、globalはconcurrentになっている。 自作のキューの場合は作成時に attributes: .concurrent を渡すとconcurrentになり、渡さないとserialになる。
まずはconcurrentの例から。
for i in 1...3 { DispatchQueue.global().async { print(&amp;quot;start concurrent \(i) thread: \(Thread.current)&amp;quot;) print(&amp;quot;return concurrent \(i) thread: \(Thread.</description>
    </item>
    
    <item>
      <title>Objective-CでFrameworkを作りSwiftからimportする</title>
      <link>https://www.sambaiz.net/article/254/</link>
      <pubDate>Sun, 12 Jan 2020 17:41:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/254/</guid>
      <description>Frameworkの作成 New -&amp;gt; ProjectでFrameworkをLanguage Objective-Cで作成。
最低限の実装とHeaderを書いた。このHeaderはBuild PhasesのHeadersにPublicとして登録されている。
 TestObjcFramework.m  #import &amp;lt;Foundation/Foundation.h&amp;gt; void hello() { NSLog(@&amp;quot;hello&amp;quot;); };   TestObjcFramework.h  #import &amp;lt;UIKit/UIKit.h&amp;gt; //! Project version number for TestObjcFramework. FOUNDATION_EXPORT double TestObjcFrameworkVersionNumber; //! Project version string for TestObjcFramework. FOUNDATION_EXPORT const unsigned char TestObjcFrameworkVersionString[]; // In this header, you should import all the public headers of your framework using statements like #import &amp;lt;TestObjcFramework/PublicHeader.h&amp;gt; void hello(void);  arm64(実機)/x86_64(Simulator)両方で使えるUniversal Frameworkをビルドするため、 New -&amp;gt; TargetでAggregateを作成し、Build PhasesのNew Run Script Phaseで、 各環境でxcodebuildしてlipoでUniversal Binaryにする次のスクリプトを追加する。</description>
    </item>
    
    <item>
      <title>SwiftのError enumとtry, if case</title>
      <link>https://www.sambaiz.net/article/249/</link>
      <pubDate>Sun, 24 Nov 2019 23:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/249/</guid>
      <description>Error Handling — The Swift Programming Language (Swift 5.1)
SwiftではErrorをenumで列挙でき、次の例でいうsomeParamのようにAssociated valuesを含めることもできる。 throwすると他の言語ではスタックトレースを作るので重い処理になるが、Swiftは作らないのでreturnするようにエラーを返せる。
import UIKit enum SampleError: Error { case ReasonFoo case ReasonBar(someParam: Int) } func errorFunc() throws -&amp;gt; String { throw SampleError.ReasonBar(someParam: 100) }  throws付きの関数を呼ぶ際はdo-catchするtryか、nilが返るtry?、落ちるtry!のいずれかを付ける。 Associated valuesがある場合、==は使えず、if case .ReasonBar = errorのように比較する。
do { try errorFunc() } catch SampleError.ReasonFoo { print(&amp;quot;foo!&amp;quot;) } catch SampleError.ReasonBar(let someParam) { print(&amp;quot;bar! \(someParam)&amp;quot;) // =&amp;gt; bar! 100 } do { try errorFunc() } catch let error { if case .</description>
    </item>
    
    <item>
      <title>SwiftのXMLParser</title>
      <link>https://www.sambaiz.net/article/248/</link>
      <pubDate>Sun, 24 Nov 2019 23:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/248/</guid>
      <description>SwiftのXMLParserはイベント駆動のparser。
import UIKit class ParserSample: NSObject { private let parser: XMLParser init(data: Data) { parser = XMLParser(data: data) super.init() parser.delegate = self } func parse() { guard parser.parse() else { guard let err = parser.parserError else { print(&amp;quot;parse error but unknown reason&amp;quot;) return } print(&amp;quot;parse error: \(err.localizedDescription)&amp;quot;) return } print(&amp;quot;after parse()&amp;quot;) } }  XMLParserDelegateでイベントを拾ってオブジェクトに詰めるなりする。全て実装する必要はなく、この例ではタグの開始と文字列、CDATA、エラー、パース終了時の関数を実装している。
extension ParserSample: XMLParserDelegate { func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?</description>
    </item>
    
    <item>
      <title>iOS端末をBLEのPeripheralにする</title>
      <link>https://www.sambaiz.net/article/26/</link>
      <pubDate>Sun, 23 Oct 2016 01:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/26/</guid>
      <description>CoreBluetoothプログラミングガイド
流れ まず、CoreBluetooth.frameworkを追加する。
import CoreBluetooth  CBPeripheralManagerを生成。
peripheralManager = CBPeripheralManager(delegate: self, queue: nil)  stateが変化したらdelegateメソッドが呼ばれるので.poweredOnであることを確認できれば Managerの準備は完了。
public func peripheralManagerDidUpdateState(_ peripheral: CBPeripheralManager){ switch (peripheral.state){ case .poweredOn: print(&amp;quot;PeripheralManager state is ok&amp;quot;) ready = true default: print(&amp;quot;PeripheralManager state is ng:&amp;quot;, peripheral.state) ready = false } }  Characteristicを作成。CBCharacteristicProperties.read.union(CBCharacteristicProperties.notify)で、 Centralが読みにくることも、通知を受け取ることもできるようにし、CBAttributePermissions.readableでreadのみ許可する。 このvalueをnilにしておかないと、キャッシュされあとで変更できなくなる。
characteristic = CBMutableCharacteristic( type: CHARACTERISTIC_UUID, properties: CBCharacteristicProperties.read.union(CBCharacteristicProperties.notify), value:nil, permissions:CBAttributePermissions.readable)  このCharacteristicのServiceを作成し、Managerに登録する。
let service = CBMutableService(type: SERVICE_UUID, primary: true) service.characteristics = [characteristic] peripheralManager!.add(service) ready = true  public func peripheralManager(_ peripheral: CBPeripheralManager, didAdd service: CBService, error: Error?</description>
    </item>
    
  </channel>
</rss>