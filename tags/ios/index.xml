<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ios on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/ios/</link>
    <description>Recent content in ios on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 07 Jul 2020 21:01:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOSアプリとLLVMのbitcode</title>
      <link>https://www.sambaiz.net/article/286/</link>
      <pubDate>Tue, 07 Jul 2020 21:01:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/286/</guid>
      <description>Objective-CやSwiftはLLVMを通して機械語にコンパイルされる。 Swiftの場合、フロントエンドのコンパイラによってASTが作られ SIL(Swift Intermediate Language)という中間表現に変換された後、 LLVM IR(intermediate representation)に再度変換され、 これをLLVM Optimizerで最適化したものが バックエンドのLLVMに渡りターゲットアーキテクチャの機械語に変換される流れになっている。
bitcodeはこのLLVM IRのバイナリフォーマットのこと。 ちなみに、bitcodeはターゲットに依存しなさそうなのだが実際は依存してしまう。 SILは一般的にターゲットに依存しない。
Xcode7以降ではデフォルトでBuild OptionsのEnable BitcodeがYesになっているため Archive時にbitcodeが埋め込まれる。これを提出するとAppleがコンパイルして最適化してくれるのでアプリサイズが減る。 アプリにbitcodeを埋め込む場合、依存フレームワークにもbitcodeが埋め込まれている必要があるが、 Xcodeのバージョンがフレームワークのビルドに使われたバージョンより古いと&#39;Invalid bitcode version (Producer: &#39;xxx&#39; Reader: &#39;yyy&#39;)&#39;でArchiveに失敗することがある。
参考 Swiftから透けて見えるAppleのコンパイラ技術 (1/2)：CodeZine（コードジン）
「LLVM bitcode はポータブルでない」ってどういう意味なの？ - Qiita
What is app thinning? (iOS, tvOS, watchOS) - Xcode Help</description>
    </item>
    
    <item>
      <title>SwiftのクラスをObjective-CのClass型に渡してinitしたときに落ちるパターン</title>
      <link>https://www.sambaiz.net/article/284/</link>
      <pubDate>Sun, 28 Jun 2020 23:45:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/284/</guid>
      <description>Objective-Cのクラスは基本的にNSObjectをルートクラスに持ち、そのinit()が継承またはオーバーライドされるが、 SwiftのクラスはNSObjectを継承していなかったり他のdesignated initializerが存在することでinit()が存在しないことや、default initializerのために明示的なinit()が存在しない場合がある。
Swiftのdesignated/convenience/required/default initializerと継承 - sambaiz-net
そんなクラスのMetatypeをObjective-CのClass型に代入してinitするとどうなるか確認する。
SwiftのMetatypeとMetadata - sambaiz-net
#import &amp;lt;Foundation/Foundation.h&amp;gt;  @interface Hoge: NSObject @property (weak, nonatomic) id &amp;lt;HogeDelegate&amp;gt; delegate; @property Class klass; - (void)fuga; @end #import &amp;#34;Hoge.h&amp;#34; #import &amp;lt;UIKit/UIKit.h&amp;gt;  @implementation Hoge - (void)fuga { dispatch_async(dispatch_get_main_queue(), ^{ [[_klass alloc] init]; }); } @end func f() { var hoge = Hoge() hoge.klass = B.self hoge.fuga() }  init()を実装したクラス: 実行時にUnrecognized selector -[***.B init]で落ちる  init()を実装しないでdefault initializerが存在する場合も同様。
class B{ init() {} }  NSObjectを継承したクラス: 落ちない  class B: NSObject{ }  NSObjectを継承し、init()以外のdesignated initializerを実装したクラス: 実行時にUse of unimplemented initializer &#39;init()&#39; for class &#39;***.</description>
    </item>
    
    <item>
      <title>SwiftのARCとweak、delegateが呼ばれなかったりObjective-Cで返り値が0やNOになる原因</title>
      <link>https://www.sambaiz.net/article/283/</link>
      <pubDate>Sat, 27 Jun 2020 23:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/283/</guid>
      <description>SwiftやObjective-CはARC (Automatic Reference Counting)という仕組みでメモリを管理していて、 インスタンスへの参照カウントが0になったときにそのメモリが開放される。昔は参照カウントの増減を手動でやっていたが今はARCが自動でやってくれる。
class X { deinit { print(&amp;#34;deinit X&amp;#34;) } } var x: X? = X() print(&amp;#34;inited X&amp;#34;) x = nil print(&amp;#34;setted nil&amp;#34;) /* inited X deinit X setted nil */ 通常それでうまく働くが、次のように循環参照するといずれの参照カウントも0にならずメモリリークする。
protocol SomeDeleagete: AnyObject { func foo() -&amp;gt; Int } class A { var b: B init() { self.b = B() self.b.delegate = self } deinit { print(&amp;#34;deinit A&amp;#34;) } } extension A: SomeDeleagete { func foo() -&amp;gt; Int { return 100 } } class B { var delegate: SomeDeleagete?</description>
    </item>
    
    <item>
      <title>SwiftのMetatypeとMetadata</title>
      <link>https://www.sambaiz.net/article/282/</link>
      <pubDate>Thu, 25 Jun 2020 20:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/282/</guid>
      <description>ObjcのClass型のように インスタンスではなくクラスそのものを取りたい場合、SwiftではFoo.Typeで表せるMetatypeを用いる。 値はクラスからはFoo.selfで、インスタンスからはtype(of: Foo())で得られる。 初期化の際はサブクラスにも存在することが保証されるrequired initializerを呼ぶか、継承できないfinal classである必要がある。
Swiftのdesignated/convenience/required/default initializerと継承 - sambaiz-net
class Foo { required init() {} func aaa() -&amp;gt; String { return &amp;#34;foo.aaa&amp;#34; } } class Bar: Foo { override func aaa() -&amp;gt; String { return &amp;#34;bar.aaa&amp;#34; } } class Hoge { func aaa() -&amp;gt; String { return &amp;#34;hoge.aaa&amp;#34; } } func initFooAndCallFunc(type: Any.Type) -&amp;gt; String { guard let fooType = type as? Foo.Type else { return &amp;#34;this is not Foo&amp;#34; } return fooType.</description>
    </item>
    
    <item>
      <title>Swiftのassociatedtypeとtype erasure</title>
      <link>https://www.sambaiz.net/article/281/</link>
      <pubDate>Wed, 24 Jun 2020 23:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/281/</guid>
      <description>associatedtypeはprotocolのジェネリクスのようなもので、複数の型に対応した定義を書くことができる。
protocol P1 { associatedtype T func some(x: T) func some2(x: T) } class C1: P1 { func some(x: Int) { print(x) } /* // ambiguous inference of associated type &amp;#39;T&amp;#39;: &amp;#39;String&amp;#39; vs. &amp;#39;Int&amp;#39; func some2(x: String) { print(x) } */ func some2(x: Int) { print(x) } } class C2: P1 { func some(x: Int) { print(x) } // OK func some2&amp;lt;T&amp;gt;(x: T) { print(x) } } 通常、protocolはexistential typeとして変数の型に指定できるが、 associatedtypeが含まれるとその型が不明なので指定できない。</description>
    </item>
    
    <item>
      <title>Swiftのdesignated/convenience/required/default initializerと継承</title>
      <link>https://www.sambaiz.net/article/280/</link>
      <pubDate>Tue, 23 Jun 2020 21:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/280/</guid>
      <description>Initialization — The Swift Programming Language (Swift 5.3)
designated initializerはプライマリなinitializerで、全ての初期化されていないプロパティを初期化し、スーパークラスのinit()を呼んでチェーンを作る。 convenience initializerは利便性のためのinitializerで、他のinitializerを呼んで最終的にdesignated initializerが呼ばれるようにする。 required initializerは継承が必須なinitializerで、サブクラスにも存在することが保証される。
class A: NSObject { var some: String // designated initializer override init() { print(&amp;#34;designated&amp;#34;) some = &amp;#34;foo&amp;#34; } // designated &amp;amp; required initializer required init(_ str: String) { print(&amp;#34;required \(str)&amp;#34;) some = &amp;#34;bar&amp;#34; } convenience init(_ num: Int) { self.init() print(&amp;#34;convenience \(num)&amp;#34;) } convenience init(num2: Int) { self.init(num2) print(&amp;#34;convenience2 \(num2)&amp;#34;) } } designated initializerはクラスに一つ以上存在する必要があるが、次のように全てのプロパティが初期化されている場合default initializerが作られる。</description>
    </item>
    
    <item>
      <title>iOSのnibで作ったViewにCustom Classを対応させて描画する</title>
      <link>https://www.sambaiz.net/article/278/</link>
      <pubDate>Fri, 05 Jun 2020 05:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/278/</guid>
      <description>nibとUIViewを継承したCustomViewクラスを作成し、nibにLabelを配置して@IBOutletと繋げた。
import Foundation import UIKit import viewframework class CustomView: UIView { @IBOutlet weak var labelview: UILabel? } このCustomViewをnibのViewと対応させるのに次の2通りの方法がある。
ルートのViewのCustom Classとして設定する nibのルートのViewのCustom ClassをCustomViewにすると、UINib.instantiate()でCustomViewのrequired init?(coder: NSCoder)が呼ばれインスタンスが作られるので、 それをaddSubViewすることで描画できる。
import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let customView = UINib(nibName: &amp;#34;CustomView&amp;#34;, bundle: Bundle(for: type(of: self))).instantiate(withOwner: nil, options: nil).first as! CustomView customView.labelview?.text = &amp;#34;OK&amp;#34; view.addSubview(customView) } } File&amp;rsquo;s OwnerのCustom Classとして設定する nibのFile&amp;rsquo;s OwnerのCustom ClassをCustomViewにし、 CustomView内でwithOwner: selfでnibをロードすると@IBOutletにインスタンスが詰まるので、ルートのViewも繋げておいてそれをaddSubViewすればCustomView以下にnibのヒエラルキーそのまま描画される。 Custom ClassがUIViewである必要は必ずしもなくロードしたviewを親のviewに直接addSubViewしても良い。
import Foundation import UIKit class CustomView: UIView { @IBOutlet var view: UIView!</description>
    </item>
    
    <item>
      <title>SwiftのURLSession</title>
      <link>https://www.sambaiz.net/article/276/</link>
      <pubDate>Sun, 31 May 2020 02:21:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/276/</guid>
      <description>SwiftのURLSessionは ネットワーク通信を行うURLSessionTaskを生成するオブジェクト。
func request(_ session: URLSession) -&amp;gt; () -&amp;gt; Void { return { guard let url = URL(string: &amp;#34;https://api.publicapis.org/health&amp;#34;) else { return } var request = URLRequest(url: url) request.httpMethod = &amp;#34;GET&amp;#34; request.addValue(&amp;#34;application/json&amp;#34;, forHTTPHeaderField: &amp;#34;content-type&amp;#34;) let task = session.dataTask(with: request) { data, response, error in guard let httpResponse = response as? HTTPURLResponse else { print(&amp;#34;not http response \(error)&amp;#34;) return } guard httpResponse.statusCode / 100 == 2 else { print(&amp;#34;bad status code: \(httpResponse.</description>
    </item>
    
    <item>
      <title>SwiftのJSONEncoder/DecoderとCodable protocol</title>
      <link>https://www.sambaiz.net/article/275/</link>
      <pubDate>Tue, 26 May 2020 01:21:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/275/</guid>
      <description>SwiftのJSONEncoder/Decoderは JSON文字列をCodable(Encodable &amp;amp; Decodable) protocolを実装したClassやStructにエンコード/デコードするオブジェクト。
全ての変数がCodableで、特に何もする必要がない場合はCodableを付ければうまくいく。 String、Int、Doubleといったstandard libraryの型や、DateやDataなどFoundationの型はCodableになっている。
CodingKeyでフィールド名のマッピングができる。デコード時にOptionalでないフィールドが足りなかったり型が異なると例外が飛び、エンコード時にはnilを無視する。
struct Foo: Codable { var nums: [Int] var str: String enum CodingKeys: String, CodingKey { case nums = &amp;#34;numbers&amp;#34; case str } } var data = &amp;#34;&amp;#34;&amp;#34; { &amp;#34;numbers&amp;#34;: [100, 120], &amp;#34;str&amp;#34;: &amp;#34;Aaa&amp;#34; } &amp;#34;&amp;#34;&amp;#34;.data(using: .utf8)! let json = try! JSONDecoder().decode(Foo.self, from: data) print(json.str) // =&amp;gt; Aaa let enc = try! JSONEncoder().encode(json) print(String(data: enc, encoding: .utf8)!) // =&amp;gt; {&amp;#34;numbers&amp;#34;:[100,120],&amp;#34;str&amp;#34;:&amp;#34;Aaa&amp;#34;} var data = &amp;#34;&amp;#34;&amp;#34; { &amp;#34;numbers&amp;#34;: [100, 120], } &amp;#34;&amp;#34;&amp;#34;.</description>
    </item>
    
    <item>
      <title>作ったライブラリをCocoaPods/Carthageでimportする</title>
      <link>https://www.sambaiz.net/article/266/</link>
      <pubDate>Sat, 28 Mar 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/266/</guid>
      <description>CocoaPods 長らく使われている依存ライブラリ管理ツール。
$ sudo gem install cocoapods $ pod --version 1.9.1 podspec まずはライブラリ側の作業。podspecを埋めていく。 Trunkに上げないPodに依存する場合、spec.dependency では :git や :path を指定できないので、アプリ側のPodfileで指定する。
$ ls SampleFramework	SampleFramework.xcodeproj	SampleFrameworkTests $ pod spec create SampleFrameworkSambaiz Specification created at SampleFrameworkSambaiz.podspec $ cat SampleFrameworkSambaiz.podspec Pod::Spec.new do |spec| spec.name = &amp;#39;SampleFrameworkSambaiz&amp;#39; spec.version = &amp;#39;0.0.2&amp;#39; spec.license = { :type =&amp;gt; &amp;#39;MIT&amp;#39;, :file =&amp;gt; &amp;#39;LICENSE&amp;#39; } spec.homepage = &amp;#39;https://github.com/sambaiz/ios-sample-framework&amp;#39; spec.authors = { &amp;#39;Taiki Sakamoto&amp;#39; =&amp;gt; &amp;#39;godgourd@gmail.com&amp;#39; } spec.summary = &amp;#39;Sample Framework&amp;#39; spec.</description>
    </item>
    
    <item>
      <title>iOSのipa(app)のProfileを異なるTeamのものに置き換えて実機で動かす</title>
      <link>https://www.sambaiz.net/article/265/</link>
      <pubDate>Tue, 24 Mar 2020 22:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/265/</guid>
      <description>Profileを置き換えて有効期限やDevice IDを更新する。
iOSアプリのProvisioning profile - sambaiz-net
codesignでの試み .ipa をunzipすると .app が出てくる。
$ unzip my-test-app.ipa $ tree Payload/ Payload/ └── my-test-app.app ├── Base.lproj │ └── LaunchScreen.storyboardc │ ├── 01J-lp-oVM-view-Ze5-6b-2t3.nib │ ├── Info.plist │ └── UIViewController-01J-lp-oVM.nib ├── Info.plist ├── PkgInfo ├── _CodeSignature │ └── CodeResources ├── embedded.mobileprovision └── my-test-app codesign で entitlements を確認する。
$ codesign -d --entitlements :- my-test-app.app &amp;gt; entitlements.plist $ cat entitlements.plist &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.</description>
    </item>
    
    <item>
      <title>iOSアプリのProvisioning Profile</title>
      <link>https://www.sambaiz.net/article/264/</link>
      <pubDate>Tue, 24 Mar 2020 21:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/264/</guid>
      <description>アプリを実機にデプロイするために必要なもの。 App ID (prefix + Bundle ID)やインストール可能なDevice ID、 コード署名に用いた Apple発行の証明書などを含む。これらが一致しないとインストールできない。
次のTypeのProfileが存在する。
 development profile: 開発用のprofile。TeamのDeviceで動かす。 ad hoc profile: テスト用のprofile。UDIDを登録したDeviceに配布できる。 AccountにDevice family (iPhone, iPad, etc.)ごとに100台まで登録可能。 App Store profile: App Storeに上げるためのprofile。  $ ls ~/Library/MobileDevice/Provisioning\ Profiles ****.mobileprovision ... $ security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/****.mobileprovision &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt; &amp;lt;plist version=&amp;#34;1.0&amp;#34;&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;AppIDName&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;XC net sambaiz test-app&amp;lt;/string&amp;gt; &amp;lt;key&amp;gt;ApplicationIdentifierPrefix&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;****&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;CreationDate&amp;lt;/key&amp;gt; &amp;lt;date&amp;gt;2020-03-18T11:05:13Z&amp;lt;/date&amp;gt; &amp;lt;key&amp;gt;Platform&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;string&amp;gt;iOS&amp;lt;/string&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;IsXcodeManaged&amp;lt;/key&amp;gt; &amp;lt;true/&amp;gt; &amp;lt;key&amp;gt;DeveloperCertificates&amp;lt;/key&amp;gt; &amp;lt;array&amp;gt; &amp;lt;data&amp;gt;****&amp;lt;/data&amp;gt; &amp;lt;data&amp;gt;****&amp;lt;/data&amp;gt; &amp;lt;/array&amp;gt; &amp;lt;key&amp;gt;Entitlements&amp;lt;/key&amp;gt; &amp;lt;dict&amp;gt; &amp;lt;key&amp;gt;application-identifier&amp;lt;/key&amp;gt; &amp;lt;string&amp;gt;****.</description>
    </item>
    
    <item>
      <title>SwiftでGCDのDispatchQueueに処理を投げて並列実行させる</title>
      <link>https://www.sambaiz.net/article/256/</link>
      <pubDate>Sat, 25 Jan 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/256/</guid>
      <description>GCD (Grand Central Dispatch)はmacOSやiOSのマルチコア環境で、 効率的に並列処理を実行するための仕組み。 OperationQueueというのもあるが、これもGCD上で動く。
DispatchQueue 処理をどのスレッドで実行するか管理するキュー。 どこからでも参照できるmainとglobalのキュー以外に新しくキューを作成することもできる。 labelは衝突しないようにreverse-DNS nameにすることが推奨されている。
DispatchQueue.main.async {} DispatchQueue.global(qos: .default).async {} DispatchQueue.global(qos: .background).async {} DispatchQueue(label: &amp;#34;net.sambaiz.serial_dispatch_queue&amp;#34;).async {} DispatchQueue(label: &amp;#34;net.sambaiz.concurrent_dispatch_queue&amp;#34;, attributes: .concurrent).async {} sync/async ブロッキングするsync()としないasync()。排他制御ではないのに注意。
DispatchQueue.global().async { print(&amp;#34;async&amp;#34;) DispatchQueue.main.sync { print(&amp;#34;sync&amp;#34;) } print(&amp;#34;done&amp;#34;) } print(&amp;#34;run&amp;#34;) run async sync done serial/concurrent 処理を単一のスレッドで行う(serial)か、複数のスレッドで行う(concurrent)かはキューによって決まり、 メインスレッドで動かすmainはserial、globalはconcurrentになっている。 自作のキューの場合は作成時に attributes: .concurrent を渡すとconcurrentになり、渡さないとserialになる。
まずはconcurrentの例から。
for i in 1...3 { DispatchQueue.global().async { print(&amp;#34;start concurrent \(i)thread: \(Thread.current)&amp;#34;) print(&amp;#34;return concurrent \(i)thread: \(Thread.current)&amp;#34;) } } print(&amp;#34;return thread: \(Thread.</description>
    </item>
    
    <item>
      <title>Objective-CでFrameworkを作りSwiftからimportする</title>
      <link>https://www.sambaiz.net/article/254/</link>
      <pubDate>Sun, 12 Jan 2020 17:41:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/254/</guid>
      <description>Frameworkの作成 New -&amp;gt; ProjectでFrameworkをLanguage Objective-Cで作成。
最低限の実装とHeaderを書いた。このHeaderはBuild PhasesのHeadersにPublicとして登録されている。
 TestObjcFramework.m  #import &amp;lt;Foundation/Foundation.h&amp;gt;  void hello() { NSLog(@&amp;#34;hello&amp;#34;); };  TestObjcFramework.h  #import &amp;lt;UIKit/UIKit.h&amp;gt;  //! Project version number for TestObjcFramework. FOUNDATION_EXPORT double TestObjcFrameworkVersionNumber; //! Project version string for TestObjcFramework. FOUNDATION_EXPORT const unsigned char TestObjcFrameworkVersionString[]; // In this header, you should import all the public headers of your framework using statements like #import &amp;lt;TestObjcFramework/PublicHeader.h&amp;gt;  void hello(void); arm64(実機)/x86_64(Simulator)両方で使えるUniversal Frameworkをビルドするため、 New -&amp;gt; TargetでAggregateを作成し、Build PhasesのNew Run Script Phaseで、 各環境でxcodebuildしてlipoでUniversal Binaryにする次のスクリプトを追加する。</description>
    </item>
    
    <item>
      <title>SwiftのError enumとtry, if case</title>
      <link>https://www.sambaiz.net/article/249/</link>
      <pubDate>Sun, 24 Nov 2019 23:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/249/</guid>
      <description>Error Handling — The Swift Programming Language (Swift 5.1)
SwiftではErrorをenumで列挙でき、次の例でいうsomeParamのようにAssociated valuesを含めることもできる。 throwすると他の言語ではスタックトレースを作るので重い処理になるが、Swiftは作らないのでreturnするようにエラーを返せる。
import UIKit enum SampleError: Error { case ReasonFoo case ReasonBar(someParam: Int) } func errorFunc() throws -&amp;gt; String { throw SampleError.ReasonBar(someParam: 100) } throws付きの関数を呼ぶ際はdo-catchするtryか、nilが返るtry?、落ちるtry!のいずれかを付ける。 Associated valuesがある場合、==は使えず、if case .ReasonBar = errorのように比較する。
do { try errorFunc() } catch SampleError.ReasonFoo { print(&amp;#34;foo!&amp;#34;) } catch SampleError.ReasonBar(let someParam) { print(&amp;#34;bar! \(someParam)&amp;#34;) // =&amp;gt; bar! 100 } do { try errorFunc() } catch let error { if case .</description>
    </item>
    
    <item>
      <title>SwiftのXMLParser</title>
      <link>https://www.sambaiz.net/article/248/</link>
      <pubDate>Sun, 24 Nov 2019 23:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/248/</guid>
      <description>SwiftのXMLParserはイベント駆動のparser。
import UIKit class ParserSample: NSObject { private let parser: XMLParser init(data: Data) { parser = XMLParser(data: data) super.init() parser.delegate = self } func parse() { guard parser.parse() else { guard let err = parser.parserError else { print(&amp;#34;parse error but unknown reason&amp;#34;) return } print(&amp;#34;parse error: \(err.localizedDescription)&amp;#34;) return } print(&amp;#34;after parse()&amp;#34;) } } XMLParserDelegateでイベントを拾ってオブジェクトに詰めるなりする。全て実装する必要はなく、この例ではタグの開始と文字列、CDATA、エラー、パース終了時の関数を実装している。
extension ParserSample: XMLParserDelegate { func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String] = [:]) { print(&amp;#34;parsing &amp;lt;\(elementName)&amp;gt;&amp;#34;) if elementName == &amp;#34;ERROR&amp;#34; { self.</description>
    </item>
    
    <item>
      <title>iOS端末をBLEのPeripheralにする</title>
      <link>https://www.sambaiz.net/article/26/</link>
      <pubDate>Sun, 23 Oct 2016 01:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/26/</guid>
      <description>CoreBluetoothプログラミングガイド
流れ まず、CoreBluetooth.frameworkを追加する。
import CoreBluetooth CBPeripheralManagerを生成。
peripheralManager = CBPeripheralManager(delegate: self, queue: nil) stateが変化したらdelegateメソッドが呼ばれるので.poweredOnであることを確認できれば Managerの準備は完了。
public func peripheralManagerDidUpdateState(_ peripheral: CBPeripheralManager){ switch (peripheral.state){ case .poweredOn: print(&amp;#34;PeripheralManager state is ok&amp;#34;) ready = true default: print(&amp;#34;PeripheralManager state is ng:&amp;#34;, peripheral.state) ready = false } } Characteristicを作成。CBCharacteristicProperties.read.union(CBCharacteristicProperties.notify)で、 Centralが読みにくることも、通知を受け取ることもできるようにし、CBAttributePermissions.readableでreadのみ許可する。 このvalueをnilにしておかないと、キャッシュされあとで変更できなくなる。
characteristic = CBMutableCharacteristic( type: CHARACTERISTIC_UUID, properties: CBCharacteristicProperties.read.union(CBCharacteristicProperties.notify), value:nil, permissions:CBAttributePermissions.readable) このCharacteristicのServiceを作成し、Managerに登録する。
let service = CBMutableService(type: SERVICE_UUID, primary: true) service.characteristics = [characteristic] peripheralManager!.add(service) ready = true public func peripheralManager(_ peripheral: CBPeripheralManager, didAdd service: CBService, error: Error?</description>
    </item>
    
  </channel>
</rss>
