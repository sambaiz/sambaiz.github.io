<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ios on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/ios/</link>
    <description>Recent content in ios on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 05 Dec 2021 23:55:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FlutterでiOS/Android/Webアプリをビルドする</title>
      <link>https://www.sambaiz.net/article/388/</link>
      <pubDate>Sun, 05 Dec 2021 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/388/</guid>
      <description>FlutterはGoogleによるクロスプラットフォームフレームワーク。 iOS/Androidに加え、今年の3月にリリースされた2.0でWe</description>
    </item>
    
    <item>
      <title>iOSアプリとLLVMのbitcode</title>
      <link>https://www.sambaiz.net/article/286/</link>
      <pubDate>Tue, 07 Jul 2020 21:01:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/286/</guid>
      <description>Objective-CやSwiftはLLVMを通して機械語にコンパイルされる。 Swiftの場合、フロントエンドのコンパイラによってASTが作</description>
    </item>
    
    <item>
      <title>SwiftのクラスをObjective-CのClass型に渡してinitしたときに落ちるパターン</title>
      <link>https://www.sambaiz.net/article/284/</link>
      <pubDate>Sun, 28 Jun 2020 23:45:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/284/</guid>
      <description>Objective-Cのクラスは基本的にNSObjectをルートクラスに持ち、そのinit()が継承またはオーバーライドされるが、 Swift</description>
    </item>
    
    <item>
      <title>SwiftのARCとweak、delegateが呼ばれなかったりObjective-Cで返り値が0やNOになる原因</title>
      <link>https://www.sambaiz.net/article/283/</link>
      <pubDate>Sat, 27 Jun 2020 23:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/283/</guid>
      <description>SwiftやObjective-CはARC (Automatic Reference Counting)という仕組みでメモリを管理していて、 インスタンスへの参照カウントが0になった</description>
    </item>
    
    <item>
      <title>SwiftのMetatypeとMetadata</title>
      <link>https://www.sambaiz.net/article/282/</link>
      <pubDate>Thu, 25 Jun 2020 20:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/282/</guid>
      <description>ObjcのClass型のように インスタンスではなくクラスそのものを取りたい場合、SwiftではFoo.Typeで表せるMetatypeを用い</description>
    </item>
    
    <item>
      <title>Swiftのassociatedtypeとtype erasure</title>
      <link>https://www.sambaiz.net/article/281/</link>
      <pubDate>Wed, 24 Jun 2020 23:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/281/</guid>
      <description>associatedtypeはprotocolのジェネリクスのようなもので、複数の型に対応した定義を書くことができる。 protocol P1 { associatedtype T func some(x: T) func some2(x: T)</description>
    </item>
    
    <item>
      <title>Swiftのdesignated/convenience/required/default initializerと継承</title>
      <link>https://www.sambaiz.net/article/280/</link>
      <pubDate>Tue, 23 Jun 2020 21:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/280/</guid>
      <description>Initialization — The Swift Programming Language (Swift 5.3) designated initializerはプライマリなinitializerで、全ての初期化されていないプロパティを初期化し、スーパークラス</description>
    </item>
    
    <item>
      <title>iOSのnibで作ったViewにCustom Classを対応させて描画する</title>
      <link>https://www.sambaiz.net/article/278/</link>
      <pubDate>Fri, 05 Jun 2020 05:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/278/</guid>
      <description>nibとUIViewを継承したCustomViewクラスを作成し、nibにLabelを配置して@IBOutletと繋げた。 import Foundation import UIKit import viewframework class CustomView: UIView</description>
    </item>
    
    <item>
      <title>SwiftのURLSession</title>
      <link>https://www.sambaiz.net/article/276/</link>
      <pubDate>Sun, 31 May 2020 02:21:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/276/</guid>
      <description>SwiftのURLSessionは ネットワーク通信を行うURLSessionTaskを生成するオブジェクト。 func request(_ session: URLSession) -&amp;gt; () -&amp;gt; Void { return { guard let url = URL(string:</description>
    </item>
    
    <item>
      <title>SwiftのJSONEncoder/DecoderとCodable protocol</title>
      <link>https://www.sambaiz.net/article/275/</link>
      <pubDate>Tue, 26 May 2020 01:21:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/275/</guid>
      <description>SwiftのJSONEncoder/Decoderは JSON文字列をCodable(Encodable &amp;amp; Decodable) protocolを実装したClas</description>
    </item>
    
    <item>
      <title>作ったライブラリをCocoaPods/Carthageでimportする</title>
      <link>https://www.sambaiz.net/article/266/</link>
      <pubDate>Sat, 28 Mar 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/266/</guid>
      <description>CocoaPods 長らく使われている依存ライブラリ管理ツール。 $ sudo gem install cocoapods $ pod --version 1.9.1 podspec まずはライブラリ側の作業。podspecを埋めていく。 Trunkに上げない</description>
    </item>
    
    <item>
      <title>iOSのipa(app)のProfileを異なるTeamのものに置き換えて実機で動かす</title>
      <link>https://www.sambaiz.net/article/265/</link>
      <pubDate>Tue, 24 Mar 2020 22:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/265/</guid>
      <description>Profileを置き換えて有効期限やDevice IDを更新する。 iOSアプリのProvisioning profile - sambaiz-net codesignでの試み .ipa をun</description>
    </item>
    
    <item>
      <title>iOSアプリのProvisioning Profile</title>
      <link>https://www.sambaiz.net/article/264/</link>
      <pubDate>Tue, 24 Mar 2020 21:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/264/</guid>
      <description>アプリを実機にデプロイするために必要なもの。 App ID (prefix + Bundle ID)やインストール可能なDevice ID、 コード署名に用いた Apple発行の証明書な</description>
    </item>
    
    <item>
      <title>SwiftでGCDのDispatchQueueに処理を投げて並列実行させる</title>
      <link>https://www.sambaiz.net/article/256/</link>
      <pubDate>Sat, 25 Jan 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/256/</guid>
      <description>GCD (Grand Central Dispatch)はmacOSやiOSのマルチコア環境で、 効率的に並列処理を実行するための仕組み。 OperationQueueというの</description>
    </item>
    
    <item>
      <title>Objective-CでFrameworkを作りSwiftからimportする</title>
      <link>https://www.sambaiz.net/article/254/</link>
      <pubDate>Sun, 12 Jan 2020 17:41:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/254/</guid>
      <description>Frameworkの作成 New -&amp;gt; ProjectでFrameworkをLanguage Objective-Cで作成。 最低限の実装とHeaderを書</description>
    </item>
    
    <item>
      <title>SwiftのError enumとtry, if case</title>
      <link>https://www.sambaiz.net/article/249/</link>
      <pubDate>Sun, 24 Nov 2019 23:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/249/</guid>
      <description>Error Handling — The Swift Programming Language (Swift 5.1) SwiftではErrorをenumで列挙でき、次の例でいうsomeParamのようにAssociated valuesを含め</description>
    </item>
    
    <item>
      <title>SwiftのXMLParser</title>
      <link>https://www.sambaiz.net/article/248/</link>
      <pubDate>Sun, 24 Nov 2019 23:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/248/</guid>
      <description>SwiftのXMLParserはイベント駆動のparser。 import UIKit class ParserSample: NSObject { private let parser: XMLParser init(data: Data) { parser = XMLParser(data: data) super.init() parser.delegate = self } func parse() { guard parser.parse() else { guard let err = parser.parserError else { print(&amp;#34;parse error but unknown</description>
    </item>
    
    <item>
      <title>iOS端末をBLEのPeripheralにする</title>
      <link>https://www.sambaiz.net/article/26/</link>
      <pubDate>Sun, 23 Oct 2016 01:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/26/</guid>
      <description>CoreBluetoothプログラミングガイド 流れ まず、CoreBluetooth.frameworkを追加する。 import CoreBluetooth CBPeriphera</description>
    </item>
    
  </channel>
</rss>
