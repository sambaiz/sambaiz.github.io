<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>css on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/css/</link>
    <description>Recent content in css on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 11 Nov 2017 20:20:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScriptのrequire/importの歴史</title>
      <link>https://www.sambaiz.net/article/143/</link>
      <pubDate>Sat, 11 Nov 2017 20:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/143/</guid>
      <description>scriptタグを並べる &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;a.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;b.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 先に書かれたa.jsで定義された内容はb.jsで読むことができる。
$ cat a.js const a = &amp;#39;a is defined&amp;#39;; const divA = document.createElement(&amp;#39;div&amp;#39;); divA.textContent = (typeof b !== &amp;#39;undefined&amp;#39;) ? b : &amp;#39;b is undefined&amp;#39;; document.body.appendChild(divA); $ cat b.js const b = &amp;#39;b is defined&amp;#39;; const divB = document.createElement(&amp;#39;div&amp;#39;); divB.textContent = (typeof a !== &amp;#39;undefined&amp;#39;) ? a : &amp;#39;a is undefined&amp;#39;; document.body.appendChild(divB); 依存が増えてくると順番を考えるのが大変。さらにグローバルな名前空間を汚染してしまう。
b is undefined a is defined AMDとCommonJS というのも、かつてのJSにはモジュールを読み込む仕組みがなかった。 そこで考えられたのがAMDやCommonJSというフォーマット。 AMD(Asynchronous module definition)はRequireJSによって提供されるrequire()で動的にscriptタグを埋める。CommonJSはNodeでもおなじみのrequire()で、これにWebpackを通して一つのファイルにまとめておく。同じ関数名が使われているが全くの別物。</description>
    </item>
    
    <item>
      <title>CSSのdisplayとposition</title>
      <link>https://www.sambaiz.net/article/98/</link>
      <pubDate>Sat, 06 May 2017 14:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/98/</guid>
      <description>display レンダリングに使うボックスを指定する。
outer display type pのようなブロックレベル要素やspanのようなインラインレベル要素に関わらず、指定したボックスにレンダリングする。
&amp;lt;style&amp;gt; .bg { background-color: #22ee22; width: 150px; height: 50px; } &amp;lt;/style&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;#34;display:none&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;none&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;p style=&amp;#34;display:inline&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;inline&amp;lt;/p&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;#34;display:block&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;block&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;#34;display:inline-block&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;inline-block&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; flexbox displayでflexやinline-flexを指定すると領域に応じてサイズやレイアウトが柔軟に決定されるflexboxになる。 IE11もいくつかのバグのため挙動が異なることがあるがサポートはしている。 レスポンシブなデザインを実現する他の方法としては後述するgridや、@media screen and (min-width: 900px) {}のような メディアクエリによる条件付きスタイルがある。 メディアクエリは&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;のようにしてビューポートのサイズを指定しないと意図通りに動かない。
flex-flowは 表示する方向のflex-directionと 折り返しのflex-wrapのショートハンドプロパティ。
子要素のflexは 伸びるときの倍率のflex-grow(default: 0)と 縮むときの倍率のflex-shrink(default: 1)、 初期サイズのflex-basis(default: auto)の ショートハンドプロパティ。
&amp;lt;style&amp;gt; .bg { background-color: #22ee22; } .</description>
    </item>
    
  </channel>
</rss>
