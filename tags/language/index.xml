<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>language on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/language/</link>
    <description>Recent content in language on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 15 Oct 2019 09:41:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/language/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>goyaccでparserを生成しLispのcons,car,cdrの式を評価する</title>
      <link>https://www.sambaiz.net/article/244/</link>
      <pubDate>Tue, 15 Oct 2019 09:41:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/244/</guid>
      <description>GoでLispのcons,car,cdrの式を評価したい。 流れとしては字句解析器(lexer, tokenizer, scanner)でソースコードを分割しtoken列にして、構文解析器(parser)で構文木を作るなりして評価できるようにする。
$ brew install clisp $ clisp &amp;gt; (cons 1 ()) (1) &amp;gt; (cons () 1) (NIL . 1) &amp;gt; (car (cons 1 (cons 2 3))) 1 &amp;gt; (cdr (cons 1 (cons 2 3))) (2 . 3) Goの字句解析器と構文解析器 Goの字句解析器と構文解析器がGoが実装されているので見てみる。
go/scanner ソースコードを分割してgo/tokenにする。
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;go/token&amp;quot; &amp;quot;go/scanner&amp;quot; ) func main() { var sc scanner.Scanner src := []byte(`(&amp;quot;A&amp;quot; + &amp;quot;B&amp;quot;) + &amp;quot;C&amp;quot;`) errorHandler := func(pos token.Position, msg string) { fmt.</description>
    </item>
    
  </channel>
</rss>