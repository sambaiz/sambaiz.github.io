<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Circleci on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/circleci/</link>
    <description>Recent content in Circleci on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Mon, 20 May 2019 09:23:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/circleci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>AWS CDKでリソースを記述し、PullRequestに対して自動でcdk diffで変更があるものを表示して、mergeしたときにcdk deployする。 全体のコードはGitHubにある。
AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする - sambaiz-net
まずCI用のUserを作成する。AssumeRoleしかできないCIUserからCIAssumeRoleをassumeして使う。
AWSのAssumeRole - sambaiz-net
export class IAMCIStack extends cdk.Stack { constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); const ciGroup = new iam.Group(this, &#39;CIGroup&#39;, { groupName: &#39;CI&#39;, }) const ciAssumeRole = new iam.Role(this, &#39;CIAssumeRole&#39;, { roleName: &#39;CIAssumeRole&#39;, assumedBy: new iam.AccountPrincipal(cdk.Aws.accountId), managedPolicyArns: [&#39;arn:aws:iam::aws:policy/AdministratorAccess&#39;] }) const ciUserRole = new iam.Role(this, &#39;CIUserRole&#39;, { roleName: &#39;CIUserRole&#39;, assumedBy: new iam.AccountPrincipal(cdk.Aws.accountId) }) const ciUserPolicy = new iam.</description>
    </item>
    
    <item>
      <title>CircleCI 2.1からのOrbでdocker buildしてECRにpushし、Slackに通知させる</title>
      <link>https://www.sambaiz.net/article/217/</link>
      <pubDate>Sat, 13 Apr 2019 23:13:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/217/</guid>
      <description>CircleCI 2.1からOrbというjobをパッケージ化したものが使えるようになり、 自分でjobを書かずとも様々な処理を実行させることができるようになった。
CircleCI 2.0でDocker imageをbuildしてタグを付けてContainer Registryに上げる - sambaiz-net
今回は
 aws-ecr slack  を使ってdocker buildしてECRにpushし、バージョンタグが付いている場合はSlackに通知させる。
AWS_ACCESS_KEY_IDとAWS_SECRET_ACCESS_KEYを環境変数に入れて、ECRのリポジトリを作成し、 SlackのwebhookのURLを発行しておく。
version: 2.1 orbs: aws-ecr: circleci/aws-ecr@3.1.0 slack: circleci/slack@2.3.0 executors: default: machine: true environment: ECR_REPO: &#39;test-ecr-push&#39; AWS_ECR_ACCOUNT_URL: &#39;&amp;lt;account_id&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com&#39; AWS_REGION: &#39;&amp;lt;region&amp;gt;&#39; CLUSTER_NAME: &#39;test&#39; jobs: notify_slack: executor: default steps: - slack/status: success_message: &#39;${ECR_REPO}:${CIRCLE_TAG} was released&#39; webhook: &#39;https://hooks.slack.com/services/******&#39; workflows: build-push: jobs: - aws-ecr/build_and_push_image: name: &amp;amp;build_version &#39;build-version&#39; executor: default repo: &#39;${ECR_REPO}&#39; tag: &#39;${CIRCLE_TAG}&#39; filters: branches: ignore: /.*/ tags: only: /^v.</description>
    </item>
    
    <item>
      <title>CircleCI 2.0でDocker imageをbuildしてタグを付けてContainer Registryに上げる</title>
      <link>https://www.sambaiz.net/article/183/</link>
      <pubDate>Wed, 22 Aug 2018 23:22:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/183/</guid>
      <description>(追記: 2019-04-13) 2.1からのOrbを使うと自分でjobを書かなくてもよくなる CircleCI 2.1からのOrbでdocker buildしてECRにpushし、Slackに通知させる - sambaiz-net
 masterにpushしたときと、リリースタグを切ったときにビルドされるようにする。
version: 2 jobs: build: docker: - image: google/cloud-sdk environment: GCP_PROJECT: &amp;lt;project_name&amp;gt; IMAGE_NAME: &amp;lt;image_name&amp;gt; steps: - checkout - setup_remote_docker: version: 18.05.0-ce - run: name: gcloud auth command: | echo $GCLOUD_SERVICE_KEY | base64 --decode &amp;gt; ${HOME}/gcloud-service-key.json gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json gcloud --quiet auth configure-docker - run: name: docker build &amp;amp; push command: | docker build -t asia.gcr.io/${GCP_PROJECT}/${IMAGE_NAME}:${CIRCLE_BUILD_NUM} . docker tag asia.</description>
    </item>
    
    <item>
      <title>Gooseリポジトリのmerge時にバージョンを上げmigrationボタンをSlackに出す</title>
      <link>https://www.sambaiz.net/article/149/</link>
      <pubDate>Fri, 19 Jan 2018 09:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/149/</guid>
      <description>GooseはGo製のDB Migrationツール。
コード
こんなリポジトリを作成し、各自ブランチを切ってGoose形式のup/downのSQLを書き、終わったらPullRequestを出す。
goose/ .keep .circleci/config.yml create_test_table.sql  $ cat create_test_table.sql -- +goose Up -- SQL in this section is executed when the migration is applied. CREATE TABLE testtable ( id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, n INT NOT NULL, c VARCHAR (20) NOT NULL UNIQUE ); -- +goose Down -- SQL in this section is executed when the migration is rolled back. DROP TABLE testtable;  無事Approveされ、mergeされるとCircleCIが走り、 SQLをgooseディレクトリの中にバージョンを付けて移し、 SlackにpostMessageするエンドポイントにリクエストを飛ばす。</description>
    </item>
    
  </channel>
</rss>