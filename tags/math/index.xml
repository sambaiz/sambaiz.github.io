<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/math/</link>
    <description>Recent content in math on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Mon, 02 Nov 2020 15:31:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>個数制限がある場合の重複組合せの総数を動的計画法で求める</title>
      <link>https://www.sambaiz.net/article/306/</link>
      <pubDate>Mon, 02 Nov 2020 15:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/306/</guid>
      <description>個数制限がない場合 n種から制限なく重複を許してr個選ぶ組合せの総数nHrはn+r-1個の枠に入れるn-1個の種類を分ける区切りの場所の組合わせの総数と等しいので、 (n+r-1)C(n-1) = (n+r-1)Crで求められる。
int factorial(int n) { int x = 1; for (int i = n; i &amp;gt; 0; i--) { x *= i; } return x; } int H(int n, int r) { // (n+r-1)Cr  return factorial(n + r - 1) / (factorial(r) * factorial(n - 1)); } 個数制限がある場合 nHrは
 n種類目が少なくとも1つ選ばれる場合： nH(r-1) (それぞれの組み合わせにn種類目が1つ加わる) n種類目が1つも選ばれない場合: (n-1)Hr (残りのn-1種類からr個選ぶ)  の和として表すこともでき、 漸化式　H(n, r) = H(n, r-1) + H(n-1, r) が成り立つ。</description>
    </item>
    
    <item>
      <title>Lpノルムと正則化</title>
      <link>https://www.sambaiz.net/article/137/</link>
      <pubDate>Thu, 12 Oct 2017 23:48:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/137/</guid>
      <description>ノルムとは ノルムはベクトル空間の距離を表す、以下の条件を満たす関数p。
 p(av) = |a| p(v): スケーラブル p(u + v) ≦ p(u) + p(v): 三角不等式を満たす p(v) ≧ 0: 負の値を取らない p(v) = 0 &amp;lt;=&amp;gt; v=0: 距離が0 &amp;lt;=&amp;gt; 零ベクトル  以下の式で表されるノルムをLpノルムと呼ぶ。
L1ノルム(マンハッタン距離) 絶対値の和。座標軸方向にしか移動できない縛りでの距離。 StreetとAvenueが格子状になっているマンハッタンではタクシーが移動する距離はL1ノルムのようになる。
L2ノルム(ユークリッド距離) 2乗の和の平方根。普通の距離。
正則化(regularization) 機械学習で過学習を防ぐためのもの。 Lp正則化は重みのLpノルムをp乗してハイパーパラメータΛを掛けたものを正則化項として 素の損失関数に加える。これを最小化するのだから重みがペナルティとしてはたらく。 L1正則化ではΛが大きければいくつかの重みが0になって次元削減できるが、 L2正則化では重みに比例して小さくなるだけ。それぞれLasso回帰、Ridge回帰ともいう。 また、これらを割合で足して使うElasticNetというものもある。
参考 Norm (mathematics) - Wikipedia
RでL1 / L2正則化を実践する - 六本木で働くデータサイエンティストのブログ</description>
    </item>
    
  </channel>
</rss>
