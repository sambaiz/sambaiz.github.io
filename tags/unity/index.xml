<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unity on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/unity/</link>
    <description>Recent content in unity on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 16 Jul 2017 23:32:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HoloLensでのUnityアプリケーションのフレームレート</title>
      <link>https://www.sambaiz.net/article/120/</link>
      <pubDate>Sun, 16 Jul 2017 23:32:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/120/</guid>
      <description>HoloLensディスプレイのフレームレート HoloLensのディスプレイは60fpsでリフレッシュされるので、アプリケーションもこれに合わせて60fps、 つまり16msごとにOSにイメージを渡せるのがベスト。 ただし、安定して60fpsが実現できないような重いアプリケーションの場合、 変動してしまうよりは下げて安定させる方が良い。
フレームレートはDevice Portalから確認することができ、キャプチャする際は30fpsに制限される。
Unityアプリケーションのフレームレート Unityでのフレームレートは Application.targetFrameRate で設定できる。デフォルト値は-1で、その場合プラットフォームごとのデフォルト設定が使われる。 何も設定しない状態でHoloLensで動かしたところ60fpsになった。
Debugビルドでのフレームレートの低下 DebugビルドだとSpace Robot Kyle だけ描画するだけでもフレームレートが20まで下がってしまった。
HoloLensで剣振ってみた - sambaiz-net
DebugビルドだったのをRelasseビルドに変えたら60fpsになった。 Relaseビルドではコードの最適化にチェックが入っていたりするんだが、 その辺りを外してみても特に変わらなかったのでそれではないらしい。</description>
    </item>
    
    <item>
      <title>HoloLensで剣振ってみた</title>
      <link>https://www.sambaiz.net/article/119/</link>
      <pubDate>Sun, 09 Jul 2017 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/119/</guid>
      <description>かつてCardboardでやったようにHoloLensでも剣を振ってみた。
剣を振るVRゲームを作った - sambaiz-net
剣を振ってロボットに当てると爆発する。
動画
剣の方は前回と同じくiOSアプリから傾きをBLEで送信している。今回は傘がなかったのでペットボトルにくくりつけた。
HoloLensのアプリの方はUWPのネイティブプラグインを作った。 Creater&amp;rsquo;s UpdateのAPIがまだ使えなかったので一つ前のAPIを使ってビルドしている。 なお、ペアリングはアプリ内ではなくOSの設定画面から行なっている。 エラーについては原因が分からずハンドリングできていないものもあるが、つなぎ直すと大抵どうにかなった。 つなぎ直す際はHoloLens側だけではなくiOS側の方の設定も削除する。
Unity/UWPでBLEを扱うプラグインを作る - sambaiz-net
ロボットを小さくしているのは近づいても視野角に収まるようにするため。 小さいとどこにいるか分からないので目印を出したほうが良い。 近接武器じゃなきゃ敵に近づかなくてよくなるのでましになるかも。
上の動画を見れば分かるように、全体的に動きが重くて素でframerateが20ぐらいしか出ていない。 これはReleaseビルドにすると改善された。
HoloLensでのUnityアプリケーションのフレームレート - sambaiz-net</description>
    </item>
    
    <item>
      <title>HoloLensのSpartial MappingでNavMeshを生成してランダムにAgentを出現・移動させる</title>
      <link>https://www.sambaiz.net/article/118/</link>
      <pubDate>Sun, 02 Jul 2017 23:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/118/</guid>
      <description>Unity 5.6.2f1 HoloToolkit v1.5.7.0 Unity 5.6から動的にNavMeshを生成できるようになったので HoloLensのSpartial MappingしたものをNavMeshにしてAgentを動かしてみる。
Unityで動的にNavMeshを生成する - sambaiz-net
Spartial MappingしたものをNavMeshにするのは以下の記事のスクリプトを使った。
HoloLens の空間マップで NavMesh を使ってみる - たるこすの日記
Unity-Technologies/NavMeshComponentsから LocalNavMeshBuilderとNavMeshSourceTagを持ってきてLocalNavMeshBuilderのObjectを置いておき、 Spartial MappingしたものにNavMeshSourceTagを付けられればExampleと同様にNavMeshにできる。 そこで、このスクリプトではSpatialMappingSourceを取得し、イベントハンドラでNavMeshSourceTagが追加されるようにしている。
using HoloToolkit.Unity.SpatialMapping; using UnityEngine; using HoloToolkit.Unity; public class SpatialMappingNavMesh : MonoBehaviour { public GameObject SpatialMapping; private void Awake() { var spatialMappingSources = SpatialMapping.GetComponents&amp;lt;SpatialMappingSource&amp;gt;(); foreach (var source in spatialMappingSources) { source.SurfaceAdded += SpatialMappingSource_SurfaceAdded; source.SurfaceUpdated += SpatialMappingSource_SurfaceUpdated; } } private void SpatialMappingSource_SurfaceAdded(object sender, DataEventArgs&amp;lt;SpatialMappingSource.SurfaceObject&amp;gt; e) { e.Data.Object.AddComponent&amp;lt;NavMeshSourceTag&amp;gt;(); } private void SpatialMappingSource_SurfaceUpdated(object sender, DataEventArgs&amp;lt;SpatialMappingSource.</description>
    </item>
    
    <item>
      <title>Unityで動的にNavMeshを生成する</title>
      <link>https://www.sambaiz.net/article/117/</link>
      <pubDate>Sat, 01 Jul 2017 23:50:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/117/</guid>
      <description>Unity5.6から動的にNavMeshを生成できるようになった。
Unity-Technologies/NavMeshComponentsの Exampleの2_drop_blankのsceneを開く。
分断されたCubeの床と、その上に黄色いCylindarと赤いCubeがあって、 クリックしたところに黄色いCylindarが動くんだが、床がつながっていないのでそのままでは赤いCubeまではたどり着けない。 スペースを押すと目の前に板が出てくるのでこの上を渡って移動することができる。
板の上がNavMeshとして認識されている。
床のCubeと追加される板にはNavMeshSourceTag.csが付いていて、staticなm_Meshesとm_Terrainsにそれぞれ追加している。
public static List&amp;lt;MeshFilter&amp;gt; m_Meshes = new List&amp;lt;MeshFilter&amp;gt;(); public static List&amp;lt;Terrain&amp;gt; m_Terrains = new List&amp;lt;Terrain&amp;gt;(); void OnEnable() { var m = GetComponent&amp;lt;MeshFilter&amp;gt;(); if (m != null) { m_Meshes.Add(m); } var t = GetComponent&amp;lt;Terrain&amp;gt;(); if (t != null) { m_Terrains.Add(t); } } void OnDisable() { var m = GetComponent&amp;lt;MeshFilter&amp;gt;(); if (m != null) { m_Meshes.Remove(m); } var t = GetComponent&amp;lt;Terrain&amp;gt;(); if (t != null) { m_Terrains.</description>
    </item>
    
    <item>
      <title>Unityの経路探索: NavMeshとAgentとObstacle</title>
      <link>https://www.sambaiz.net/article/115/</link>
      <pubDate>Thu, 29 Jun 2017 00:17:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/115/</guid>
      <description>NavMeshと経路探索 NavMeshというのはエージェントが移動できる面についてのデータ構造で、凸ポリゴンの面と位置関係を含んでいる。 経路探索は2点間を一番近いポリゴンにマッピングし、A*アルゴリズムを用いて行われる。あとからオブジェクトが追加されるなどして道を塞いでしまってもCarvingしてNavMeshに穴をあければ別の経路で移動することができるが、このようなグローバルの経路探索に影響を及ぼす操作は計算にコストがかかるので、各エージェントローカルの衝突回避で済むならそのほうがよい。
NavMeshをbakeする こんな感じで床に適当なオブジェクトを置いてみた。
Window -&amp;gt; NavigationでBakeするのを選択してNavigation Staticし(StaticになってBakeの対象になる)、 Bakeボタンを押すとこんな感じでBakeされる。
オブジェクトの上がNavMeshに含まれていないのはAgent sizeのStep Heightよりも高いため。 段差を移動するときに浮いてしまうのを避けるためにはAdvancedのHeight Meshをオンにする。 また、端が含まれていないのはこのAgentの中心が入れる位置を表しているためで、 Agent Radiusを変更すると広がったり狭まったりするのを確認できる。
NavMesh Agent Radius0.5, Height2のCylindarを作成し、Nav Mesh Agentを追加する。
で、ゴールにオブジェクトを置いてそこまで移動させてみる。
using UnityEngine.AI; public GameObject goal; void Start () { var agent = GetComponent&amp;lt;NavMeshAgent&amp;gt;(); agent.destination = goal.transform.position; } NavMesh Obstacle 障害物。上で通った経路上にNavMesh Obstacleを追加したCubeを置いたところうまく避けてゴールまでたどり着いた。
ただ、完全に道をふさいでしまうと立ち往生してしまうので Carveにチェックを入れるとCarvingされ、他の経路でゴールまで進むようになる。
Unityで動的にNavMeshを生成する - sambaiz-net</description>
    </item>
    
    <item>
      <title>Unityの物理エンジン・衝突: RigidbodyとCollidarとJoint</title>
      <link>https://www.sambaiz.net/article/114/</link>
      <pubDate>Sun, 25 Jun 2017 23:26:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/114/</guid>
      <description>Rigidbody GameObjectを物理特性によって制御し、力の影響を受けるようにする。 Mass(質量)やDrag(空気抵抗)、Use Gravityなどのプロパティがある。
移動させるのに自分でTransformは変更せず力をかけて物理演算に任せる。 Is Kinematicにチェックを入れると物理エンジンによって移動しないようになるので、 Transformを直接変更する場合は有効にする。 ただし、スクリプトで動的にIs Kinematicを切り替えるのはパフォーマンスが良くない。
Collidar RigidBodyの物理特性の境界を定義する。衝突させるには両方にCollidarが設定されている必要がある。 RigidBodyなしのCollidarを静的Collidarといって、無効にしたり移動しないことを前提に最適化される。 移動したりするものについてはRigidBodyを付けて、必要ならIs Kinematicを有効にする。
衝突時にはOnCollisionEnter() が呼ばれる。ほかに離れたときのOnCollisionExit()、 触れている間、毎フレーム呼ばれるOnCollisionStay()がある。
void OnCollisionEnter(Collision collision) { foreach (ContactPoint contact in collision.contacts) { if (contact.otherCollider.tag == &amp;#34;Player&amp;#34;) { Debug.Log(collision.relativeVelocity.magnitude); } } } Is Triggerにチェックを入れると物理エンジンには無視されてすり抜け、侵入に対してトリガーイベントが呼ばれる。 OnCollistionと同様に OnTriggerEnter()、 OnTriggerExit()、 OnTriggerStay() がある。
void OnTriggerEnter(Collider other) { Debug.Log(other.tag); } Joint Rigitbodyを他のRigitbodyとつなげるもの。 例えばSprint Jointだとオブジェクト間がばねのように伸縮する。
 </description>
    </item>
    
    <item>
      <title>UnityのMecanimでヒューマノイドアニメーションさせる</title>
      <link>https://www.sambaiz.net/article/112/</link>
      <pubDate>Tue, 20 Jun 2017 23:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/112/</guid>
      <description>Space Robot Kyleを動かす。
アバターの作成 AssetsのModel/Robot Kyleを選択し、RigのAnimation TypeをHumanoidにすると、 自動的にボーン構造を解析して人型にマッピングしたアバターが設定される。 Configure Avatarで確認すると正しく設定されているようだ。
 モーションの設定 KyleのAnimatorのAnimationに設定するAnimation Controllerを作成する。 まずは2つCreate Stateし、それぞれMotionに適当なモーション(今回はFighter Pack Bundle FREEを使った)を設定し、 Make Transitionで相互に結ぶと、オレンジになっているデフォルトステートから交互にモーションする。 ステートにはStateMachineBehaviourのScriptを設定することもできる。
 次にParametersでモーションを変化させる。
 Animatorの左上、parametersタブからBoolのWalkを追加する。 そして片方のTransitionのConditionにWalkがfalse、もう片方にはWalkがtrueを追加すると、 状態によって違うモーションをするようになる。 ちなみに、AnyStateからConditionを設定したTransitionを設定すると、どこのStateからでもそれで遷移させることができる。
 このParameterはこんな感じに値を設定できる。
void Update () { GetComponent&amp;lt;Animator&amp;gt; ().SetBool (&amp;#34;Walk&amp;#34;, Random.value &amp;lt; 0.5); } 一部だけモーションさせる 人体の一部だけをモーションさせるにはAvatar Maskを使う。
  Animationで複数のレイヤーを作成すれば、異なるMaskでそれぞれステートを持たせることができる。
Animation Override Controller 作ったAnimationを違うモーションで再利用することができる。
 </description>
    </item>
    
    <item>
      <title>VSでのネイティブプラグインのビルドからUnityでのWSAのビルドまでをバッチでする</title>
      <link>https://www.sambaiz.net/article/110/</link>
      <pubDate>Tue, 13 Jun 2017 00:32:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/110/</guid>
      <description>VSでのネイティブプラグインのビルド VSが使っているビルドツール MSBuildを使う。 VSのプロジェクトファイルにはMSBuildのXMLが含まれている。 これ自体はVSに依存していないため、単体で動かすこともできる。
パスが通ってなかったらパスを通す。管理者権限が必要。
&amp;gt; MSBuild &amp;#39;MSBuild&amp;#39; は、内部コマンドまたは外部コマンド、 操作可能なプログラムまたはバッチ ファイルとして認識されていません。 &amp;gt;　SETX /M PATH &amp;#34;%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin&amp;#34; 成功: 指定した値は保存されました。 別プロセスから適用されるので立ち上げ直すとパスが通っていることを確認できる。
&amp;gt; MSBuild /version Microsoft (R) Build Engine バージョン 15.1.1012.6693 Copyright (C) Microsoft Corporation.All rights reserved. 15.1.1012.6693 ビルドしてAssets\Pluginsに配置する。これは前作ったBLEのネイティブプラグインのもの。
Unity/UWPでBLEを扱うプラグインを作る - sambaiz-net
&amp;gt; git clone git@github.com:sambaiz/UnityBLE_UWP.git &amp;gt; cd UnityBLE_UWP &amp;gt; MSBuild UnityBLE_UWP\UnityBLE_UWP.csproj /t:restore;build /p:Configuration=Release;Platform=&amp;#34;x86&amp;#34; &amp;gt; MSBuild UnityBLE_Editor\UnityBLE_Editor.csproj /t:restore;build /p:Configuration=Release &amp;gt; copy /Y UnityBLE_UWP\bin\x86\Release\UnityBLE_UWP.dll ..\Assets\Plugins\WSA &amp;gt; copy /Y UnityBLE_Editor\bin\Release\UnityBLE_Editor.dll .</description>
    </item>
    
    <item>
      <title>Unity/UWPでBLEを扱うプラグインを作る</title>
      <link>https://www.sambaiz.net/article/105/</link>
      <pubDate>Sun, 04 Jun 2017 11:57:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/105/</guid>
      <description>コードはここ
この動画の 50:00あたりから説明があるように、 ビルドされたWSAが読むUWPのdllのほかに、 Unityエディタ上から読むための.NET Framework3.5のdllを用意する。 こうすることで実行環境ごとの違いをUnityコード上で気にしなくてもよくなる。
新しいプロジェクトで
  Visual C# から.NET Framework 3.5にしてクラスライブラリ(.NET Framework)
  Visual C# -&amp;gt; Windows -&amp;gt; ユニバーサルからクラスライブラリ(ユニバーサルWindows)
  の2つのプロジェクトを同じソリューションに作成する。 VS2017で.NET Frameworkのクラスライブラリプロジェクトを作成するためには Visual Studio Installerで.NET Coreのワークロードをインストールする必要がある。 また、これとは別に動作確認用のUWPアプリケーションプロジェクトを作成した。
UWPの方のプロジェクトにあるClass1.csを削除し、追加 -&amp;gt; 既存の項目から、 もう片方のClass1.csをリンクとして追加して、この共通のcsにUWPのコードを書いていくんだが、 そのまま書くと当然.NET Frameworkの方でビルドできないので 実装部分を#if WINDOWS_UWP ~ #endif で囲む。UWPの方のプロジェクトにはプロパティ -&amp;gt; ビルドの条件付きコンパイルにWINDOWS_UWPが含まれているので有効になる。
public void Start() { #if WINDOWS_UWP  ... #endif } UWPでBLEを扱うのは前書いた通り。 ただし、なぜかXAMLに依存しているようでD3Dビルドすると失敗する。
UWPでBLEデバイスとペアリングして値を取得する - sambaiz-net
ビルドするとdllができるので.NET Frameworkの方をAssets/Pluginsに置いてInspectorからEditorにだけチェックを入れる。 UWPの方はAssets/Plugins/WSAに置くとWSA Playerにだけチェックが入る。
あとは普通にusingして使うだけ。Edit-&amp;gt;Project Settings-&amp;gt;PlayerからBluetoothのcapabilityを有効にするのを忘れずに。 Package.appxmanifestは上書きされないようなので前にビルドしたやつがあったら一旦消す。
using UnityBLE; public class BLE : MonoBehaviour { string value = &amp;#34;no connection&amp;#34;; public GameObject text; private string serviceUUID = &amp;#34;***&amp;#34;; private string characteristicUUID = &amp;#34;***&amp;#34;; void Start() { var ble = new UnityBLE.</description>
    </item>
    
    <item>
      <title>Unityのパーティクル設定(Shuriken)</title>
      <link>https://www.sambaiz.net/article/92/</link>
      <pubDate>Thu, 13 Apr 2017 17:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/92/</guid>
      <description>UnityにはShurikenというパーティクルシステムがある。
Sphereを置いてParticle Systemを追加すると、Particleが出始める。
モジュール 設定項目が多いためモジュールに分かれている。ひとまずデフォルトで有効になっている
 (メインモジュール) Emission Shape Renderer  について見ていく。
メインモジュール  Duration: 5 Looping: true  デフォルトだとLoopingにチェックが入っているのでずっと出ているが、チェックを外すとDurationで止まる。
 Start Delay: 0 Play On Awake: true  PlayOnAwakeがtrueでStartDelayが0なので実行してからすぐにParticleが出始める。
 Start Lifetime: 5 Max Particles: 1000  StartLifetimeはParticleが消えるまでの時間。ただしMaxParticlesに達したら消される。
 Start Speed: 5 Simulation Speed: 1  StartSpeedはParticleの初速で、上げると勢い良く飛んでいく。 SimulationSpeedを上げるとParticleが出るのも含めて全体のスピードが上がる。
 Start Size: 1  Particleの初期サイズ。小さくすると塵みたいになる。
 Start Rotation: 0  Particleの初期角度。
 Gravity Modifier: 0  重力値。0だと無重力。
 Simulation Space: Local  Particleをlocal座標かworld座標で動かすか。 Localだとオブジェクトが移動したときに一緒に移動する。Worldだと置いてかれる。</description>
    </item>
    
    <item>
      <title>C#のdelegateとevent</title>
      <link>https://www.sambaiz.net/article/83/</link>
      <pubDate>Sun, 12 Mar 2017 21:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/83/</guid>
      <description>delegate カプセル化するためのdelegate(移譲)メソッドに使う型。
public class Converter{ private static double defaultConvert(double num){ return num; } public delegate double Convert(double num); public Convert convert = defaultConvert; public double run(double num){ return convert (num); } } 匿名メソッドやラムダ式を渡すこともできる。
var conv = new Converter (); print (conv.run (2)); // 2  // 匿名メソッドの例 conv.convert = delegate(double input) { return input + 1; }; print (conv.run (2)); // 2 + 1 = 3  // ラムダ式の例 conv.convert = s =&amp;gt; s * s; print (conv.</description>
    </item>
    
    <item>
      <title>UnityのMaterial</title>
      <link>https://www.sambaiz.net/article/82/</link>
      <pubDate>Sat, 11 Mar 2017 20:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/82/</guid>
      <description>MaterialとShaderとTexture Materialは表面がどのようにレダリングされるかを定義するもの。 Shaderを指定し、Textureなどのパラメーターを設定する。
Shaderは光と、Materialの設定から、ピクセルの色を計算するスクリプト。 大体Standard Shader で事足りるらしい。
Textureはビットマップイメージ。色(Albedo)だけではなく、反射率や粗さなど、いろんな要素に使える。
Standard Shader Rendering Mode Albedoは(255, 255, 255, 255)で、テクスチャにはDefault Particleを指定している。 透明度はテクスチャのアルファチャンネルとAlbedoのアルファ値に基づく。
 Opaque: デフォルト。すべて不透明。   CutOut: 閾値を境に、完全に透明か、不透明になる。  Alpha Cutoffを0.1にした。
 Transparent: 透明度が適用される。現実世界の透明なマテリアルのように、反射のハイライトは完全に表示される。   Fade: ハイライトにも透明度を適用する。フェードイン/アウトしたいときに使う。  Metallic マテリアルチャートをもとにAlbedoとMetallicとSmoothnessを設定する。
これは
 Albedo: (255, 255, 255, 255) Metallic: 1 Smoothness: 0.68  を設定している。</description>
    </item>
    
    <item>
      <title>UnityのUI</title>
      <link>https://www.sambaiz.net/article/81/</link>
      <pubDate>Wed, 08 Mar 2017 16:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/81/</guid>
      <description>Canvas UI要素を配置するための領域。
renderMode   Overlay: スクリーンに対してオーバーレイするように表示
  Camera: Cameraから指定した距離(planeDistance)離れた前方に表示
  World Space 他のオブジェクトと同じように表示
  Canvas Scaler   UI Scale Mode (World Space以外)
  Constant Pixel Size: 画面サイズに関わらず同じピクセル数にする
  Scale With Screen Size: 画面サイズでスケールさせる
  Constant Physical Size 解像度や画面サイズによらず物理的に同じサイズにする
    Dynami Pixels Per Unit (World Spaceのみ): Textなどの動的に生成されたビットマップの解像度
  1と3でそれぞれこんな感じになる。
AutoLayout Vertical Layout Groupや Grid Layout Group など。これらのComponentを追加すると子要素のTransform(の一部)が自動で設定される。
Content Size Fitter Layout Component要素に合うように自動で調整される。</description>
    </item>
    
    <item>
      <title>UnityのTransform</title>
      <link>https://www.sambaiz.net/article/80/</link>
      <pubDate>Tue, 07 Mar 2017 02:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/80/</guid>
      <description>https://docs.unity3d.com/jp/current/ScriptReference/Transform.html
オブジェクトの位置、スケール、回転を保持する。親子関係を持つ。
Position positionがワールド空間の、 localPosition が親から見た相対的なローカル空間の位置。localPositionの1unitはscaleに依存する。
transform.position = new Vector3(0, 0, 0); transform.localPosition = new Vector3(0, 0, 0); 徐々に移動するにはTranslate()を使う。 最後の引数はデフォルトでSpace.Selfになっていて、Space.Worldを指定するとワールド座標を基準にする。
Time.deltaTimeは最後のフレームを完了するのにかかった秒数。 なのでフレームレートにかかわらず同じ速度で移動させることができる。
transform.Translate(0, Time.deltaTime, 0, Space.World); transform.Translate(Vector3.up * Time.deltaTime, Space.World); // 軸に沿って移動 transform.Translate(Time.deltaTime, 0, 0, Camera.main.transform); // 最後の引数のローカル座標を基準にする transform.Translate(Time.deltaTime, 0, 0, Camera.main.transform); Scale localScale はローカル空間のスケール。ワールド空間のScaleはない。
transform.localScale = new Vector3(0.1f, 1f, 1f); Rotation ワールド空間の rotationと ローカル空間の localRoation。
UnityはQuarternion(四元数)で回転を持っている。 実際はQuarternionそのものを自分で計算することはなく、 Quaternion.LookRotation()や Quaternion.Euler()などを使う。
Vector3 relativePos; transform.rotation = Quaternion.LookRotation(relativePos); // そのPointを向くように回転 transform.localRotation = Quaternion.Euler(0, 30, 0); Transformを向くように回転する場合は LookAt()を使う。</description>
    </item>
    
    <item>
      <title>Unityと.NETとMono</title>
      <link>https://www.sambaiz.net/article/78/</link>
      <pubDate>Sun, 05 Mar 2017 18:50:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/78/</guid>
      <description>.NETとかよくわからなかったのでまとめてみた。
.NET Framework .NET Framework - Wikipedia
Microsoftが開発したアプリケーション開発、実行環境。
各言語のコンパイラによって言語、環境によらない共通の中間言語(CIL, Common Intermediate Language)バイナリ(exeやdll)に変換し、 実行時に共通言語基盤(CLI, Common Language Infrastructure)の仮想実行システム(VES)が環境依存の機械語を動的に生成(JIT, Just in time)する。 CLIの仕様はECMAで標準化されていて、Microsoftが実装したCLIが共通言語ランタイム(CLR)。Windowsでしか動かない。
.NET Core .NET Core - .NET Core による .NET のクロスプラットフォームへの移行
Microsoft/dotnet
オープンソースで、クロスプラットフォームに対応した.NET。CoreCLRはWindowsだけではなくMacやLinuxでも動く。 .NET Frameworkと共通のAPIもあるが、GUIまわりでどちらかにしかないAPIが存在する。
Mono オープンソースで、クロスプラットフォームな.NET Framework互換ソフトウェア。C#のコンパイラとCLIが実装されている。 Unityはこれを使っているが、バージョンが古くて使えないライブラリがある。
.NET CoreでHello World インストール手順に沿って dotnetコマンドを使えるようにする。
Hello Worldまで。
$ dotnet console -o hwapp $ cd hwapp $ ls Program.cs	hwapp.csproj $ dotnet restore $ ls Program.cs	hwapp.csproj	obj $ ls obj hwapp.csproj.nuget.g.props	project.assets.json hwapp.</description>
    </item>
    
    <item>
      <title>剣を振るVRゲームを作った</title>
      <link>https://www.sambaiz.net/article/29/</link>
      <pubDate>Sun, 30 Oct 2016 19:05:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/29/</guid>
      <description>プレイ動画
CardboardにAndroidを入れて、
 iPhoneをくくりつけた傘を動かすと、画面の剣も動くのでこれで敵を倒すゲーム。
 実装 剣(iOS) 剣にくくりつけたiPhoneの傾きの値をUnity(Android)に送信している。 iOSはClassic Bluetoothを自由に使えないので、Androidと通信する場合はBLEを使う。 BLEは通常だと20byteしか一度に送れないので、これを超えないよう注意する必要がある。
BLEで通信するところは
iOS端末をBLEのPeripheralにする
で作ったので、端末の傾きを取得して送るだけ。
import UIKit import CoreMotion class Motion{ let peripheral: BLEPeripheral let accelHandler:CMDeviceMotionHandler let manager = CMMotionManager() public init(peripheral :BLEPeripheral, label :UILabel){ self.peripheral = peripheral accelHandler = { (data: CMDeviceMotion?, error: Error?) -&amp;gt; Void in let str = String(format: &amp;#34;%.1f %.1f %.1f&amp;#34;, arguments: [data!.attitude.pitch * 180 / M_PI, data!.attitude.roll * 180 / M_PI, data!.attitude.yaw * 180 / M_PI] ) let res = peripheral.</description>
    </item>
    
    <item>
      <title>UnityでAndroidのBLEを使うネイティブプラグインを作る</title>
      <link>https://www.sambaiz.net/article/27/</link>
      <pubDate>Sun, 23 Oct 2016 20:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/27/</guid>
      <description>UnityからBLEを使うためのネイティブプラグインを作る。
Android側 まず、Activityなしのプロジェクトを作って、New ModuleからAndroid Libraryを選択。 これらのパッケージ名がUnityで使うものと被らないようにする。
/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes/classes.jar をModuleの方のlibsに置く。
import com.unity3d.player.UnityPlayer; このjarは元々のやつとかぶってしまうので除外(build.gradleに追加)
android.libraryVariants.all { variant -&amp;gt; variant.outputs.each { output -&amp;gt; output.packageLibrary.exclude(&amp;#39;libs/classes.jar&amp;#39;) } } ActiviyはUnityPlayer.currentActivityで取得でき、 Unity側のメソッドを呼ぶのも UnityPlayer.UnitySendMessage(mGameObjName, mCallBackName, new String(characteristic.getValue())); のようにできる。
public class BLE { private final static String TAG = BLE.class.getSimpleName(); private static final int REQUEST_ENABLE_BT = 1; private static final int MY_PERMISSION_RESPONSE = 2; private static final String PERIPHERAL_LOCAL_NAME = &amp;#34;my-ble&amp;#34;; private static final UUID PERIPHERAL_SERIVCE_UUID = UUID.fromString(&amp;#34;BF9CB85F-620C-4A67-BDD2-1A64213F74CA&amp;#34;); private static final UUID PERIPHERAL_CHARACTERISTIC_UUID = UUID.</description>
    </item>
    
  </channel>
</rss>
