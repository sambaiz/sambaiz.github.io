<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>crypto on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/crypto/</link>
    <description>Recent content in crypto on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 12 Apr 2020 23:29:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goのcipher packageに実装されている暗号利用モードのベンチマーク</title>
      <link>https://www.sambaiz.net/article/268/</link>
      <pubDate>Sun, 12 Apr 2020 23:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/268/</guid>
      <description>暗号利用モードはブロック長より長いメッセージに対してどのようにブロック暗号を適用するかのアルゴリズム。
ブロック暗号 ブロック暗号は固定長のブロックを暗号化/復号する共通鍵暗号で、入力と同じ長さの出力を返す暗号化/復号関数からなる。 アメリカ国立標準技術研究所（NIST) が標準暗号として採用したAES (Rijndael) が有名。 最も単純な暗号利用モードとして、メッセージをブロックに分割してそれぞれ独立に適用する Electronic Codebook (ECB) というのがあるが、 鍵とブロックが同じなら毎回同じ出力になってしまうため、メッセージのパターンが残ってしまうのとリプレイ攻撃に弱い問題があり使われない。 また、メッセージがブロック長の整数倍になるようにパディングが必要。
Goのcrypto/cipher packageに実装されている暗号化利用モード Goのcrypto/cipher packageには次の暗号化利用モードが実装されている。
$ go version go version go1.14 darwin/amd64 Cipher Block Chaining (CBC) メッセージをブロックに分割し、前段の暗号文(最初はランダムなIV)と入力ブロックのXORを取ったものが暗号文で、 これを復号関数にかけて前段の暗号文とのXORを取って復号する。IVは平文のまま暗号文の前に付けるなどする。 IVがないと最初のブロックが復号できず、暗号文の一部が破損すると次のブロックまで復号できない。 ECBと同様パディングが必要。最も広く使われているらしい。
最後のブロックの暗号文をMAC(Message Authentication Code)とするCBC-MACでは最初のブロックの改変を防ぐためIVが0固定で、 任意のメッセージの最初のブロックを他のメッセージのMACとXORを取って後ろに結合することで、それまでの影響を打ち消し任意のメッセージ単体のMACと同じ値にする Length extension attackが成立する。そのためメッセージを固定長にするかメッセージ長を先頭に入れるなどの対策が必要。
Goではパディングは自分でやる必要がある。
func (x *cbcEncrypter) CryptBlocks(dst, src []byte) { if len(src)%x.blockSize != 0 { panic(&amp;#34;crypto/cipher: input not full blocks&amp;#34;) } if len(dst) &amp;lt; len(src) { panic(&amp;#34;crypto/cipher: output smaller than input&amp;#34;) } if subtle.</description>
    </item>
    
    <item>
      <title>RSA暗号とPEM/DERの構造</title>
      <link>https://www.sambaiz.net/article/135/</link>
      <pubDate>Sun, 01 Oct 2017 21:02:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/135/</guid>
      <description>RSA暗号とは  暗号化: c ≡ m^e (mod n) 複合: m ≡ c^d (mod n)  公開鍵がe,nで秘密鍵がd。nはとても大きく近くない素数p,qの積で、 これを公開しても素因数分解できないのがこの暗号の前提になっている。 768bit(10進数で232桁)では既に解読されているので、少なくとも1024bit以上にする。
eはEuler totient function(1~nまでの整数でnと互いに素なものの個数。今回の場合はφ(n)=(p-1)(q-1))未満で互いに素な正の整数で、小さすぎても大きすぎても良くない。2^16 + 1 = 65537がよく使われる。
dはed ≡ 1 (mod φ(n))を満たすd。
例 例として(p,q)=(193,709)とすると各変数は次のようになる。
 n = p * q = 136837 φ(n) = (p-1)(q-1) = 135936 e = 65537 &amp;lt; φ(n)  秘密鍵dは65537*d ≡ 1 (mod 135936)の式を変形した 65537*d - 135936*x = gcd(65537,135936) = 1を、次のように135936と65537を残しながら展開していく、拡張されたユークリッドの互除法で求める。
 これをコードに表したのがこれ。
const d = (phi,e) =&amp;gt; { let history = {[phi]: [1,0], [e]:[0,1]} // [x,y] =&amp;gt; φ * x + e * y  let x = phi let y = e while(y &amp;gt; 1){ const nextY = x % y history[x % y] = history[x].</description>
    </item>
    
  </channel>
</rss>
