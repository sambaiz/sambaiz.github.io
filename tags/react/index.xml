<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/react/</link>
    <description>Recent content in react on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 19 Jun 2021 12:56:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Next.jsのpre-rendering</title>
      <link>https://www.sambaiz.net/article/367/</link>
      <pubDate>Sat, 19 Jun 2021 12:56:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/367/</guid>
      <description>Next.jsはwebpackやbabel,ESLintを内包し、 SSG/SSRやリソースの最適化といった機能を提供するReactのフレームワーク。
create-next-appを実行し、npm run dev すると development modeでサーバーが起動するので localhost:3000/abcd にアクセスすると pages/abcd.tsx の export default されたコンポーネントが描画される。 Fast Refleshが効いているのでファイルを更新するとすぐに反映される。
$ npx create-next-app --ts $ cd my-app $ tree -I node_modules . . ├── README.md ├── next-env.d.ts ├── next.config.js ├── package-lock.json ├── package.json ├── pages │ ├── _app.tsx │ ├── api │ │ └── hello.ts │ └── index.tsx ├── public │ ├── favicon.ico │ └── vercel.svg ├── styles │ ├── Home.module.css │ └── globals.</description>
    </item>
    
    <item>
      <title>ReactのFunction ComponentとHooks</title>
      <link>https://www.sambaiz.net/article/225/</link>
      <pubDate>Thu, 20 Jun 2019 19:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/225/</guid>
      <description>久々にcreate-react-appを実行したら コンポーネントがReact.ComponentのクラスではなくFunction Componentになっていた。
Function Component Function Componentは関数で書かれるStateを持たないコンポーネントで、 簡潔に書けるだけではなくReact.createElement()と比べて45%くらい速いらしい。
45% Faster React Functional Components, Now – Missive App – Medium
const App: React.FC = () =&amp;gt; { return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; {FunctionalComponent({title: &amp;#34;HELLO FC&amp;#34;})} &amp;lt;/div&amp;gt; ); } interface Props { title: string } const FunctionalComponent: React.FC&amp;lt;Props&amp;gt; = (props) =&amp;gt; { return ( &amp;lt;div&amp;gt; {props.title} &amp;lt;/div&amp;gt; ); } v16.6でリリースされた React.memo()を使うと PureComponent のようにpropsが変わらない場合は再レンダリングさせなくすることができる。
const App: React.FC = () =&amp;gt; { return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;FunctionalComponent title=&amp;#34;HELLO FC&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; ); } interface Props { title: string } const FunctionalComponent = React.</description>
    </item>
    
    <item>
      <title>React, Material-UI, Unstated, RechartsでTODOを作った</title>
      <link>https://www.sambaiz.net/article/215/</link>
      <pubDate>Thu, 28 Mar 2019 17:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/215/</guid>
      <description>コード
create-react-app create-react-appでアプリを作成した。 TypeScriptを有効にしている。
$ npx create-react-app react-todo-unstated --typescript $ cd react-todo-unstated $ tree src/ src/ ├── App.css ├── App.test.tsx ├── App.tsx ├── index.css ├── index.tsx ├── logo.svg ├── react-app-env.d.ts └── serviceWorker.ts $ npm start Material-UI UIはMaterial-UIでUIで作った。
$ npm install --save @material-ui/core @material-ui/icons public/index.htmlにRobotoフォントを入れた。
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;#34;&amp;gt; Unstated UnstatedはReact v16からのContext APIを使ったStateを管理するための薄いライブラリ。
$ npm install --save unstated Stateを持つContainerを作る。
class TodoContainer extends Container&amp;lt;TodoState&amp;gt; { state: TodoState = { newTodo: &amp;#34;&amp;#34;, todos: [], isCreating: false }; changeNewTodo(newTodo: string) { this.</description>
    </item>
    
    <item>
      <title>ブラウザのwindow間の値渡し</title>
      <link>https://www.sambaiz.net/article/156/</link>
      <pubDate>Fri, 23 Feb 2018 02:01:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/156/</guid>
      <description>直接Windowを参照する オリジン(プロトコル+ポート+ホスト)が同じ場合は、親はopen()した返り値で、子はwindow.openerで相手のwindowが取れて、直接参照したりDOMを操作したりすることもできる。
同じ/異なるオリジンのiframeの中からできること - sambaiz-net
$ cat index.html &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;Open window&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;#34;btn2&amp;#34;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;view&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; let win2; const button = document.getElementById(&amp;#34;btn&amp;#34;); button.addEventListener(&amp;#34;click&amp;#34;, () =&amp;gt; { window.foo = &amp;#34;bar from window1&amp;#34;; win2 = window.open(&amp;#34;index2.html&amp;#34;); }, false); const button2 = document.getElementById(&amp;#34;btn2&amp;#34;); button2.addEventListener(&amp;#34;click&amp;#34;, () =&amp;gt; { if (win2) { win2.close(); } }, false); &amp;lt;/script&amp;gt; $ cat index2.html &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;view&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; console.log(window.aaa); const parentWindow = window.opener; const view = document.</description>
    </item>
    
    <item>
      <title>webpack環境でredux&amp;react-routerのページをサーバーサイドレンダリングする</title>
      <link>https://www.sambaiz.net/article/5/</link>
      <pubDate>Sun, 10 Jul 2016 03:08:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/5/</guid>
      <description>このページをGoogleのSearch Consoleからクローラーがちゃんと見ているか確認してみたところ真っ白のページになってしまったので、 サーバーサイドレンダリングすることにした。 コードはgithubに上げてある。
サーバーサイドとはいえ、css-loaderでcss moduleを使っているのでwebpackを使う必要があった。 まず、そのままのwebpackの設定で作ったものをserver.jsから呼ぶと次のエラーが出た。
***/sambaiz-net/web/public/bundle.js:20933 module.exports = self.fetch.bind(self); ReferenceError: self is not defined そこで、targetをnodeにしたサーバーサイド用にwebpackの設定を作成し、実行してみたところ
module.exports = { entry: &amp;#39;./js/server.js&amp;#39;, target: &amp;#39;node&amp;#39;, output: { path: path.join(__dirname, &amp;#39;dist&amp;#39;), filename: &amp;#39;server.js&amp;#39;, publicPath: &amp;#39;/&amp;#39; }, 今度はこんなエラーが出たので
ERROR in ./~/iconv-lite/encodings/tables/gb18030-ranges.json Module parse failed: ***/sambaiz-net/web/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json Unexpected token (1:9) You may need an appropriate loader to handle this file type. loadersに下の設定を追加した。
{ test: /\.json$/, loader: &amp;#34;json-loader&amp;#34;} webpackには成功したが、serverを起動すると今度は次のようなエラーが出た。
return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase()); ReferenceError: window is not defined style-loaderのコードだったので、 まず、フロント側のwebpackで extract-text-webpack-pluginを使ってcssを別に出力することにした。</description>
    </item>
    
    <item>
      <title>Reactで作ったページにTwitterCardsとOGPのメタデータを埋める</title>
      <link>https://www.sambaiz.net/article/2/</link>
      <pubDate>Sat, 02 Jul 2016 13:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/2/</guid>
      <description>せっかくページを作ったので、SNSにシェアするときに見栄えをよくしたい。
 Twitter CardsやOGPのmetaタグを埋めるとTwitterやFacebookにURLを貼ったときに上のように表示されるようになる(上はFacebookの例)。そこで、react-helmetでこんな感じで動的に埋め込んだんだけど読んでくれない。
&amp;lt;Helmet title={&amp;#39;sambaiz.net&amp;#39;} meta={[ {&amp;#34;name&amp;#34;: &amp;#34;twitter:card&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;summary&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;twitter:site&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;@sambaiz&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;twitter:title&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;sambaiz.net&amp;#34;}, {&amp;#34;name&amp;#34;: &amp;#34;twitter:description&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;僕のホームページ&amp;#34;}, {&amp;#34;property&amp;#34;: &amp;#34;og:title&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;sambaiz.net&amp;#34;}, {&amp;#34;property&amp;#34;: &amp;#34;og:type&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;blog&amp;#34;}, {&amp;#34;property&amp;#34;: &amp;#34;og:image&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;http://d2wgaf7ubdj1mv.cloudfront.net/my.jpg&amp;#34;}, {&amp;#34;property&amp;#34;: &amp;#34;og:url&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;https://www.sambaiz.net&amp;#34;} ]} /&amp;gt; GoogleのクローラーのようにJavascriptを解釈してくれる と思っていた。
しょうがないのでここだけサーバーサイドレンダリングすることにした。
&amp;#39;use strict&amp;#39; import express from &amp;#39;express&amp;#39; import path from &amp;#39;path&amp;#39; import compression from &amp;#39;compression&amp;#39; require(&amp;#39;isomorphic-fetch&amp;#39;); var app = express() app.use(compression()) // serve our static stuff app.use(express.static(path.join(__dirname, &amp;#39;.</description>
    </item>
    
  </channel>
</rss>
