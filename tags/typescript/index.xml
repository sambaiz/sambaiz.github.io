<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/typescript/</link>
    <description>Recent content in typescript on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 25 Jul 2021 06:49:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue 3でTODOを作る</title>
      <link>https://www.sambaiz.net/article/374/</link>
      <pubDate>Sun, 25 Jul 2021 06:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/374/</guid>
      <description>Vue CLIをインストールしプロジェクトを作成する。
$ npm install -g @vue/cli $ vue --version @vue/cli 4.5.13 $ vue create todo $ tree -I node_modules todo . ├── README.md ├── babel.config.js ├── package-lock.json ├── package.json ├── public │ ├── favicon.ico │ └── index.html └── src ├── App.vue ├── assets │ └── logo.png ├── components │ └── HelloWorld.vue └── main.js エントリーポイント main.js を見るとVue 3からのGlobal API、createApp()が使われている。
$ cat src/main.js import { createApp } from &amp;#39;vue&amp;#39; import App from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Next.jsのpre-rendering</title>
      <link>https://www.sambaiz.net/article/367/</link>
      <pubDate>Sat, 19 Jun 2021 12:56:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/367/</guid>
      <description>Next.jsはwebpackやbabel,ESLintを内包し、 SSG/SSRやリソースの最適化といった機能を提供するReactのフレームワーク。
create-next-appを実行し、npm run dev すると development modeでサーバーが起動するので localhost:3000/abcd にアクセスすると pages/abcd.tsx の export default されたコンポーネントが描画される。 Fast Refleshが効いているのでファイルを更新するとすぐに反映される。
$ npx create-next-app --ts $ cd my-app $ tree -I node_modules . . ├── README.md ├── next-env.d.ts ├── next.config.js ├── package-lock.json ├── package.json ├── pages │ ├── _app.tsx │ ├── api │ │ └── hello.ts │ └── index.tsx ├── public │ ├── favicon.ico │ └── vercel.svg ├── styles │ ├── Home.module.css │ └── globals.</description>
    </item>
    
    <item>
      <title>ReactのFunction ComponentとHooks</title>
      <link>https://www.sambaiz.net/article/225/</link>
      <pubDate>Thu, 20 Jun 2019 19:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/225/</guid>
      <description>久々にcreate-react-appを実行したら コンポーネントがReact.ComponentのクラスではなくFunction Componentになっていた。
Function Component Function Componentは関数で書かれるStateを持たないコンポーネントで、 簡潔に書けるだけではなくReact.createElement()と比べて45%くらい速いらしい。
45% Faster React Functional Components, Now – Missive App – Medium
const App: React.FC = () =&amp;gt; { return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; {FunctionalComponent({title: &amp;#34;HELLO FC&amp;#34;})} &amp;lt;/div&amp;gt; ); } interface Props { title: string } const FunctionalComponent: React.FC&amp;lt;Props&amp;gt; = (props) =&amp;gt; { return ( &amp;lt;div&amp;gt; {props.title} &amp;lt;/div&amp;gt; ); } v16.6でリリースされた React.memo()を使うと PureComponent のようにpropsが変わらない場合は再レンダリングさせなくすることができる。
const App: React.FC = () =&amp;gt; { return ( &amp;lt;div className=&amp;#34;App&amp;#34;&amp;gt; &amp;lt;FunctionalComponent title=&amp;#34;HELLO FC&amp;#34; /&amp;gt; &amp;lt;/div&amp;gt; ); } interface Props { title: string } const FunctionalComponent = React.</description>
    </item>
    
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>AWS CDKでリソースを記述し、PullRequestに対して自動でcdk diffで変更があるものを表示して、mergeしたときにcdk deployする。 全体のコードはGitHubにある。
AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする - sambaiz-net
 追記 (2019-08-29): このフローで起こったいくつかの問題を解決するため新しいツールを作った。 PR上でCDKのレビューやデプロイを行うツールcdkbotを作った - sambaiz-net
 CI Userの作成 まずcdkコマンドを実行するためのCI Userを作成する。これはCDK管理外のスタックで、AWSコンソール上から手動で上げる。
AWSのAssumeRole - sambaiz-net
AssumeRoleしかできないCIUserからCIAssumeRoleをassumeすることにした。
AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Resources: CIAssumeRole: Type: &amp;#39;AWS::IAM::Role&amp;#39; Properties: RoleName: &amp;#39;CIAssumeRole&amp;#39; ManagedPolicyArns: - &amp;#39;arn:aws:iam::aws:policy/AdministratorAccess&amp;#39; AssumeRolePolicyDocument: Version: &amp;#39;2012-10-17&amp;#39; Statement: - Effect: &amp;#39;Allow&amp;#39; Principal: AWS: - !Ref AWS::AccountId Action: - &amp;#39;sts:AssumeRole&amp;#39; CIGroup: Type: &amp;#39;AWS::IAM::Group&amp;#39; Properties: GroupName: &amp;#39;CI&amp;#39; CIPolicies: Type: &amp;#39;AWS::IAM::Policy&amp;#39; Properties: PolicyName: &amp;#39;CI&amp;#39; PolicyDocument: Statement: - Effect: Allow Action: &amp;#39;sts:AssumeRole&amp;#39; Resource: !</description>
    </item>
    
    <item>
      <title>AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする</title>
      <link>https://www.sambaiz.net/article/222/</link>
      <pubDate>Sun, 19 May 2019 01:43:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/222/</guid>
      <description>AWS CDK(Cloud Development Kit)はTypeScriptやJavaなどのコードから CloudFormationのテンプレートを生成して差分を確認しデプロイできる公式のツール。まだdeveloper preview。
$ npm i -g aws-cdk $ cdk --version 0.33.0 (build 50d71bf) $ mkdir cdk-vpc $ cd cdk-vpc $ cdk init app --language=typescript CloudFormationのリソースと対応するCfnFooや、それを内部で作成する高レベル(L2)のResource ClassFooが実装されている。 ただし、現状CfnFooに対応するResource Classが存在しないものや、複数のリソースを内部で作成するResource Classが存在する。 例えば、ec2.VpcはCfnVPCだけではなく、Public/Private Subnet、NATGatewayまでまとめて一般的な構成で作る。Resource Classはまだ変更が多い。
CloudFormationでVPCを作成してLambdaをデプロイしAurora Serverlessを使う - sambaiz-net
型があり補完が効くので通常のテンプレートと比べて書きやすいし、ループしたりすることもできる。
import * as cdk from &amp;#39;@aws-cdk/cdk&amp;#39; import * as ec2 from &amp;#39;@aws-cdk/aws-ec2&amp;#39; interface Export { vpc: ec2.Vpc } export class VPCStack extends cdk.Stack { protected deployEnv: string export: Export constructor(scope: cdk.</description>
    </item>
    
    <item>
      <title>React, Material-UI, Unstated, RechartsでTODOを作った</title>
      <link>https://www.sambaiz.net/article/215/</link>
      <pubDate>Thu, 28 Mar 2019 17:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/215/</guid>
      <description>コード
create-react-app create-react-appでアプリを作成した。 TypeScriptを有効にしている。
$ npx create-react-app react-todo-unstated --typescript $ cd react-todo-unstated $ tree src/ src/ ├── App.css ├── App.test.tsx ├── App.tsx ├── index.css ├── index.tsx ├── logo.svg ├── react-app-env.d.ts └── serviceWorker.ts $ npm start Material-UI UIはMaterial-UIでUIで作った。
$ npm install --save @material-ui/core @material-ui/icons public/index.htmlにRobotoフォントを入れた。
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;#34;&amp;gt; Unstated UnstatedはReact v16からのContext APIを使ったStateを管理するための薄いライブラリ。
$ npm install --save unstated Stateを持つContainerを作る。
class TodoContainer extends Container&amp;lt;TodoState&amp;gt; { state: TodoState = { newTodo: &amp;#34;&amp;#34;, todos: [], isCreating: false }; changeNewTodo(newTodo: string) { this.</description>
    </item>
    
    <item>
      <title>Node.jsをTypeScriptで書く</title>
      <link>https://www.sambaiz.net/article/123/</link>
      <pubDate>Sat, 29 Jul 2017 19:34:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/123/</guid>
      <description>公式のTypeScript-Node-Starterから始めてもいいが、依存が少し余分なので一から作ることにした。
コードはここ。
$ yarn add --dev typescript tslint tslint-microsoft-contrib jest ts-jest @types/jest package.json scriptsとテストフレームワークJestの設定を追加。
{ &amp;#34;devDependencies&amp;#34;: { ... &amp;#34;typescript&amp;#34;: &amp;#34;^2.4.2&amp;#34; }, &amp;#34;scripts&amp;#34;: { &amp;#34;start&amp;#34;: &amp;#34;npm run build &amp;amp;&amp;amp; node dist/app.js&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;npm run lint &amp;amp;&amp;amp; tsc&amp;#34;, &amp;#34;test&amp;#34;: &amp;#34;jest --forceExit&amp;#34;, &amp;#34;lint&amp;#34;: &amp;#34;tslint -c tslint.json -p tsconfig.json --type-check&amp;#34; }, &amp;#34;jest&amp;#34;: { &amp;#34;transform&amp;#34;: { &amp;#34;^.+\\.ts$&amp;#34;: &amp;#34;./node_modules/ts-jest/preprocessor.js&amp;#34; }, &amp;#34;testRegex&amp;#34;: &amp;#34;/test/.*\\.test\\.(ts|js)$&amp;#34;, &amp;#34;moduleFileExtensions&amp;#34;: [ &amp;#34;ts&amp;#34;, &amp;#34;js&amp;#34; ], &amp;#34;testEnvironment&amp;#34;: &amp;#34;node&amp;#34; } } tsconfig.json 公式のそのまま。
{ &amp;#34;compilerOptions&amp;#34;: { &amp;#34;module&amp;#34;: &amp;#34;commonjs&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;es6&amp;#34;, &amp;#34;noImplicitAny&amp;#34;: true, &amp;#34;moduleResolution&amp;#34;: &amp;#34;node&amp;#34;, &amp;#34;sourceMap&amp;#34;: true, &amp;#34;outDir&amp;#34;: &amp;#34;dist&amp;#34;, &amp;#34;baseUrl&amp;#34;: &amp;#34;.</description>
    </item>
    
  </channel>
</rss>
