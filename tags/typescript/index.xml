<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/typescript/</link>
    <description>Recent content in Typescript on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Mon, 20 May 2019 09:23:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>AWS CDKでリソースを記述し、PullRequestに対して自動でcdk diffで変更があるものを表示して、mergeしたときにcdk deployする。 全体のコードはGitHubにある。
AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする - sambaiz-net
まずCI用のUserを作成する。AssumeRoleしかできないCIUserからCIAssumeRoleをassumeして使う。
AWSのAssumeRole - sambaiz-net
export class IAMCIStack extends cdk.Stack { constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); const ciGroup = new iam.Group(this, &#39;CIGroup&#39;, { groupName: &#39;CI&#39;, }) const ciAssumeRole = new iam.Role(this, &#39;CIAssumeRole&#39;, { roleName: &#39;CIAssumeRole&#39;, assumedBy: new iam.AccountPrincipal(cdk.Aws.accountId), managedPolicyArns: [&#39;arn:aws:iam::aws:policy/AdministratorAccess&#39;] }) const ciUserRole = new iam.Role(this, &#39;CIUserRole&#39;, { roleName: &#39;CIUserRole&#39;, assumedBy: new iam.AccountPrincipal(cdk.Aws.accountId) }) const ciUserPolicy = new iam.</description>
    </item>
    
    <item>
      <title>AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする</title>
      <link>https://www.sambaiz.net/article/222/</link>
      <pubDate>Sun, 19 May 2019 01:43:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/222/</guid>
      <description>AWS CDK(Cloud Development Kit)はTypeScriptやJavaなどのコードから CloudFormationのテンプレートを生成して差分を確認しデプロイできるツール。 まだdeveloper previewなので今後も破壊的な変更はありそう。
$ npm i -g aws-cdk $ cdk --version 0.31.0 (build 7a70c08) $ mkdir cdk-vpc $ cd cdk-vpc $ cdk init app --language=typescript  CloudFormationのリソースタイプと対応しているCfn*系のAPIだけではなく、 VPCからPublic/Private Subnet、NATGatewayまでまとめて作ってくれる ec2.VpcNetworkといった高レベルなものも用意されている。
CloudFormationでVPCを作成してLambdaをデプロイしAurora Serverlessを使う - sambaiz-net
型があり補完が効くので通常のyamlと比べて書きやすいし、ループしたりすることもできる。Refする際も変数のプロパティを渡せばよい。
$ cat lib/cdk-vpc-stack.ts import cdk = require(&#39;@aws-cdk/cdk&#39;); import ec2 = require(&#39;@aws-cdk/aws-ec2&#39;) export class CdkVpcStack extends cdk.Stack { constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) { super(scope, id, props); new ec2.VpcNetwork(this, &#39;test-vpc&#39;, { cidr: &#39;172.</description>
    </item>
    
    <item>
      <title>React, Material-UI, Unstated, RechartsでTODOを作った</title>
      <link>https://www.sambaiz.net/article/215/</link>
      <pubDate>Thu, 28 Mar 2019 17:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/215/</guid>
      <description>コード
create-react-app create-react-appでアプリを作成した。 TypeScriptを有効にしている。
$ npx create-react-app react-todo-unstated --typescript $ cd react-todo-unstated $ tree src/ src/ ├── App.css ├── App.test.tsx ├── App.tsx ├── index.css ├── index.tsx ├── logo.svg ├── react-app-env.d.ts └── serviceWorker.ts $ npm start  Material-UI UIはMaterial-UIでUIで作った。
$ npm install --save @material-ui/core @material-ui/icons  public/index.htmlにRobotoフォントを入れた。
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;quot;&amp;gt;  Unstated UnstatedはReact v16からのContext APIを使ったStateを管理するための薄いライブラリ。
$ npm install --save unstated  Stateを持つContainerを作る。
class TodoContainer extends Container&amp;lt;TodoState&amp;gt; { state: TodoState = { newTodo: &amp;quot;&amp;quot;, todos: [], isCreating: false }; changeNewTodo(newTodo: string) { this.</description>
    </item>
    
    <item>
      <title>Node.jsをTypeScriptで書く</title>
      <link>https://www.sambaiz.net/article/123/</link>
      <pubDate>Sat, 29 Jul 2017 19:34:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/123/</guid>
      <description>公式のTypeScript-Node-Starterから始めてもいいけど、依存が少し余分なので一から作ることにした。
コードはここ。
$ yarn add --dev typescript tslint tslint-microsoft-contrib jest ts-jest @types/jest  package.json scriptsとテストフレームワークJestの設定を追加。
{ &amp;quot;devDependencies&amp;quot;: { ... &amp;quot;typescript&amp;quot;: &amp;quot;^2.4.2&amp;quot; }, &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;npm run build &amp;amp;&amp;amp; node dist/app.js&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;npm run lint &amp;amp;&amp;amp; tsc&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;jest --forceExit&amp;quot;, &amp;quot;lint&amp;quot;: &amp;quot;tslint -c tslint.json -p tsconfig.json --type-check&amp;quot; }, &amp;quot;jest&amp;quot;: { &amp;quot;transform&amp;quot;: { &amp;quot;^.+\\.ts$&amp;quot;: &amp;quot;./node_modules/ts-jest/preprocessor.js&amp;quot; }, &amp;quot;testRegex&amp;quot;: &amp;quot;/test/.*\\.test\\.(ts|js)$&amp;quot;, &amp;quot;moduleFileExtensions&amp;quot;: [ &amp;quot;ts&amp;quot;, &amp;quot;js&amp;quot; ], &amp;quot;testEnvironment&amp;quot;: &amp;quot;node&amp;quot; } }  tsconfig.json 公式のそのまま。</description>
    </item>
    
  </channel>
</rss>