<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/typescript/</link>
    <description>Recent content in Typescript on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Thu, 20 Jun 2019 19:23:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ReactのFunction ComponentとHooks</title>
      <link>https://www.sambaiz.net/article/225/</link>
      <pubDate>Thu, 20 Jun 2019 19:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/225/</guid>
      <description>久々にcreate-react-appを実行したら コンポーネントがReact.ComponentのクラスではなくFunction Componentになっていた。
Function Component Function Componentは関数で書かれるStateを持たないコンポーネントで、 簡潔に書けるだけではなくReact.createElement()と比べて45%くらい速いらしい。
45% Faster React Functional Components, Now – Missive App – Medium
const App: React.FC = () =&amp;gt; { return ( &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt; {FunctionalComponent({title: &amp;quot;HELLO FC&amp;quot;})} &amp;lt;/div&amp;gt; ); } interface Props { title: string } const FunctionalComponent: React.FC&amp;lt;Props&amp;gt; = (props) =&amp;gt; { return ( &amp;lt;div&amp;gt; {props.title} &amp;lt;/div&amp;gt; ); }  v16.6でリリースされた React.memo()を使うと PureComponent のようにpropsが変わらない場合は再レンダリングさせなくすることができる。
const App: React.FC = () =&amp;gt; { return ( &amp;lt;div className=&amp;quot;App&amp;quot;&amp;gt; &amp;lt;FunctionalComponent title=&amp;quot;HELLO FC&amp;quot; /&amp;gt; &amp;lt;/div&amp;gt; ); } interface Props { title: string } const FunctionalComponent = React.</description>
    </item>
    
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>AWS CDKでリソースを記述し、PullRequestに対して自動でcdk diffで変更があるものを表示して、mergeしたときにcdk deployする。 全体のコードはGitHubにある。
AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする - sambaiz-net
 追記 (2019-08-29): このフローで起こったいくつかの問題を解決するため新しいツールを作った。 PR上でCDKのレビューやデプロイを行うツールcdkbotを作った - sambaiz-net
 CI Userの作成 まずcdkコマンドを実行するためのCI Userを作成する。これはCDK管理外のスタックで、AWSコンソール上から手動で上げる。
AWSのAssumeRole - sambaiz-net
AssumeRoleしかできないCIUserからCIAssumeRoleをassumeすることにした。
AWSTemplateFormatVersion: &#39;2010-09-09&#39; Resources: CIAssumeRole: Type: &#39;AWS::IAM::Role&#39; Properties: RoleName: &#39;CIAssumeRole&#39; ManagedPolicyArns: - &#39;arn:aws:iam::aws:policy/AdministratorAccess&#39; AssumeRolePolicyDocument: Version: &#39;2012-10-17&#39; Statement: - Effect: &#39;Allow&#39; Principal: AWS: - !Ref AWS::AccountId Action: - &#39;sts:AssumeRole&#39; CIGroup: Type: &#39;AWS::IAM::Group&#39; Properties: GroupName: &#39;CI&#39; CIPolicies: Type: &#39;AWS::IAM::Policy&#39; Properties: PolicyName: &#39;CI&#39; PolicyDocument: Statement: - Effect: Allow Action: &#39;sts:AssumeRole&#39; Resource: !</description>
    </item>
    
    <item>
      <title>AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする</title>
      <link>https://www.sambaiz.net/article/222/</link>
      <pubDate>Sun, 19 May 2019 01:43:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/222/</guid>
      <description>AWS CDK(Cloud Development Kit)はTypeScriptやJavaなどのコードから CloudFormationのテンプレートを生成して差分を確認しデプロイできる公式のツール。まだdeveloper preview。
$ npm i -g aws-cdk $ cdk --version 0.33.0 (build 50d71bf) $ mkdir cdk-vpc $ cd cdk-vpc $ cdk init app --language=typescript  CloudFormationのリソースと対応するCfnFooや、それを内部で作成する高レベル(L2)のResource ClassFooが実装されている。 ただし、現状CfnFooに対応するResource Classが存在しないものや、複数のリソースを内部で作成するResource Classが存在する。 例えば、ec2.VpcはCfnVPCだけではなく、Public/Private Subnet、NATGatewayまでまとめて一般的な構成で作る。Resource Classはまだ変更が多い。
CloudFormationでVPCを作成してLambdaをデプロイしAurora Serverlessを使う - sambaiz-net
型があり補完が効くので通常のテンプレートと比べて書きやすいし、ループしたりすることもできる。
import * as cdk from &#39;@aws-cdk/cdk&#39; import * as ec2 from &#39;@aws-cdk/aws-ec2&#39; interface Export { vpc: ec2.Vpc } export class VPCStack extends cdk.Stack { protected deployEnv: string export: Export constructor(scope: cdk.</description>
    </item>
    
    <item>
      <title>React, Material-UI, Unstated, RechartsでTODOを作った</title>
      <link>https://www.sambaiz.net/article/215/</link>
      <pubDate>Thu, 28 Mar 2019 17:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/215/</guid>
      <description>コード
create-react-app create-react-appでアプリを作成した。 TypeScriptを有効にしている。
$ npx create-react-app react-todo-unstated --typescript $ cd react-todo-unstated $ tree src/ src/ ├── App.css ├── App.test.tsx ├── App.tsx ├── index.css ├── index.tsx ├── logo.svg ├── react-app-env.d.ts └── serviceWorker.ts $ npm start  Material-UI UIはMaterial-UIでUIで作った。
$ npm install --save @material-ui/core @material-ui/icons  public/index.htmlにRobotoフォントを入れた。
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;quot;&amp;gt;  Unstated UnstatedはReact v16からのContext APIを使ったStateを管理するための薄いライブラリ。
$ npm install --save unstated  Stateを持つContainerを作る。
class TodoContainer extends Container&amp;lt;TodoState&amp;gt; { state: TodoState = { newTodo: &amp;quot;&amp;quot;, todos: [], isCreating: false }; changeNewTodo(newTodo: string) { this.</description>
    </item>
    
    <item>
      <title>Node.jsをTypeScriptで書く</title>
      <link>https://www.sambaiz.net/article/123/</link>
      <pubDate>Sat, 29 Jul 2017 19:34:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/123/</guid>
      <description>公式のTypeScript-Node-Starterから始めてもいいけど、依存が少し余分なので一から作ることにした。
コードはここ。
$ yarn add --dev typescript tslint tslint-microsoft-contrib jest ts-jest @types/jest  package.json scriptsとテストフレームワークJestの設定を追加。
{ &amp;quot;devDependencies&amp;quot;: { ... &amp;quot;typescript&amp;quot;: &amp;quot;^2.4.2&amp;quot; }, &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;npm run build &amp;amp;&amp;amp; node dist/app.js&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;npm run lint &amp;amp;&amp;amp; tsc&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;jest --forceExit&amp;quot;, &amp;quot;lint&amp;quot;: &amp;quot;tslint -c tslint.json -p tsconfig.json --type-check&amp;quot; }, &amp;quot;jest&amp;quot;: { &amp;quot;transform&amp;quot;: { &amp;quot;^.+\\.ts$&amp;quot;: &amp;quot;./node_modules/ts-jest/preprocessor.js&amp;quot; }, &amp;quot;testRegex&amp;quot;: &amp;quot;/test/.*\\.test\\.(ts|js)$&amp;quot;, &amp;quot;moduleFileExtensions&amp;quot;: [ &amp;quot;ts&amp;quot;, &amp;quot;js&amp;quot; ], &amp;quot;testEnvironment&amp;quot;: &amp;quot;node&amp;quot; } }  tsconfig.json 公式のそのまま。</description>
    </item>
    
  </channel>
</rss>