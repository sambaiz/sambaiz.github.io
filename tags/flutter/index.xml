<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flutter on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/flutter/</link>
    <description>Recent content in flutter on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 11 Dec 2021 16:39:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FlutterのNavigatorとAuroRoute</title>
      <link>https://www.sambaiz.net/article/389/</link>
      <pubDate>Sat, 11 Dec 2021 16:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/389/</guid>
      <description>Navigator FlutterのNavigatorは Routeをスタックし画面遷移させるクラスで、push()やpop()といったAPIを提供する。
 import &amp;#39;package:flutter/material.dart&amp;#39;; void main() { runApp(const MyApp()); } class MyApp extends StatelessWidget { const MyApp({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return MaterialApp( title: &amp;#39;Navigation Test&amp;#39;, theme: ThemeData( primarySwatch: Colors.blue, ), home: const Page1(), ); } } class Page1 extends StatelessWidget { const Page1({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text(&amp;#34;page1&amp;#34;), ), body: ListView.builder( itemCount: 10, itemBuilder: (context, index) { return ListTile( title: Text(index.</description>
    </item>
    
    <item>
      <title>FlutterでiOS/Android/Webアプリをビルドする</title>
      <link>https://www.sambaiz.net/article/388/</link>
      <pubDate>Sun, 05 Dec 2021 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/388/</guid>
      <description>FlutterはGoogleによるクロスプラットフォームフレームワーク。 iOS/Androidに加え、今年の3月にリリースされた2.0でWebがstableになり、 Windows/Mac/Linuxはbetaとなっている。ネイティブのUIを用いるReact Nativeと異なり独自のUIで、 MaterialのほかにiOSスタイルのCupertinoも提供されているが、 分岐等しない限りはプラットフォームによらず同じ見た目になる。
環境構築 公式のGet startedに従って環境を構築していく。
まずFlutter SDKをインストールしてパスを通す。
$ mv ~/Downloads/flutter ~/ $ echo &amp;#39;export PATH=&amp;#34;$PATH:~/flutter/bin&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile $ source ~/.bash_profile $ flutter doctor Android Android Studioをインストールし起動して依存コンポーネントをダウンロードする。 cmdline-tools component is missing が出ている場合はSDK Managerからインストールする。
 ライセンスを承認する。
$ flutter doctor --android-licenses AVD Managerからエミュレーターの設定を行う。Emulated PerformanceはHardware - GLES 2.0を選択する。
 iOS Xcodeをインストールして command-line toolsの設定を行い、CocoaPodsもインストールする。
$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer $ sudo xcodebuild -runFirstLaunch $ sudo gem install cocoapods VSCode Flutter extensionをインストールし、Command PaletteからFlutter: New ProjectでApplicationを選ぶと次の構成のプロジェクトが作られる。</description>
    </item>
    
  </channel>
</rss>
