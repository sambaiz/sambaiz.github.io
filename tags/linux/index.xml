<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/linux/</link>
    <description>Recent content in linux on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Mon, 24 May 2021 23:15:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>127.0.0.1(localhost)と0.0.0.0</title>
      <link>https://www.sambaiz.net/article/359/</link>
      <pubDate>Mon, 24 May 2021 23:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/359/</guid>
      <description>ホストで動かしていたコンポーネント群をdocker-composeに乗せたところ、コンポーネント間の通信が通らなくなってしまった。 いずれもdocker-composeが作ったデフォルトのネットワークで動いているのでpingは通る。 コードを見てみたところサーバーがlocalhostでlistenしていたので 0.0.0.0 に修正した。
localhostは /etc/hosts で 127.0.0.1 に解決されるわけだが、これはloopback interface lo で通信するループバックアドレスで、自分自身を指す。
$ cat /etc/hosts 127.0.0.1 localhost ::1 localhost ip6-localhost ip6-loopback ... $ ip addr 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 2: sit0@NONE: &amp;lt;NOARP&amp;gt; mtu 1480 qdisc noop state DOWN qlen 1000 link/sit 0.0.0.0 brd 0.0.0.0 34: eth0@if35: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&amp;gt; mtu 1500 qdisc noqueue state UP link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff inet 172.</description>
    </item>
    
    <item>
      <title>FluentdがどのようにMulti Process Workersで処理を実行しているのか実装を追う</title>
      <link>https://www.sambaiz.net/article/335/</link>
      <pubDate>Sun, 25 Apr 2021 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/335/</guid>
      <description>Fluentdはv1.0から標準でマルチプロセス対応され、 指定した数のWorkerで処理が行われるようになった。
&amp;lt;system&amp;gt; workers 4 &amp;lt;/system&amp;gt; どのように実行しているのかv1.12.3の実装を見ていく。
Supervisor Multi Process Workersのドキュメントにもあるように、 Workerと通信するSupervisorというのが存在する。 具体的に何をしているかというとWorkerプロセスを作成するWorkerModuleを渡してサーバーを立てたり、SIGNALを送ったりしている。
# https://github.com/fluent/fluentd/blob/master/lib/fluent/supervisor.rb#L365-L377 module WorkerModule def spawn(process_manager) main_cmd = config[:main_cmd] env = { &amp;#39;SERVERENGINE_WORKER_ID&amp;#39; =&amp;gt; @worker_id.to_i.to_s, } @pm = process_manager.spawn(env, *main_cmd) end def after_start (config[:worker_pid] ||= {})[@worker_id] = @pm.pid end end # https://github.com/fluent/fluentd/blob/v1.12.3/lib/fluent/supervisor.rb#L808-L811 se = ServerEngine.create(ServerModule, WorkerModule){ Fluent::Supervisor.load_config(@config_path, params) } se.run # https://github.com/fluent/fluentd/blob/master/lib/fluent/supervisor.rb#L305-L317 def kill_worker if config[:worker_pid] pids = config[:worker_pid].clone config[:worker_pid].clear pids.each_value do |pid| if Fluent.windows? Process.kill :KILL, pid else Process.</description>
    </item>
    
    <item>
      <title>makeで環境変数とMakefileの変数、引数の値の内どの値が参照されるか</title>
      <link>https://www.sambaiz.net/article/314/</link>
      <pubDate>Sat, 28 Nov 2020 16:14:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/314/</guid>
      <description>$ docker run -v `pwd`:/root -it ubuntu:20.04 /bin/sh # apt update &amp;amp;&amp;amp; apt install -y make # make --version GNU Make 4.2.1 Built for x86_64-pc-linux-gnu # cat Makefile HOGE:=aaa foo: echo $(HOGE) $(FUGA) &amp;gt; /dev/null フラグを付けないと引数の値 -&amp;gt; Makefileの変数 -&amp;gt; 環境変数の順で参照されるので、 makeの前に書いた変数は環境変数となりMakefileの変数を上書きできないが、後に書いて引数とすると上書きできる。
# export HOGE=ccc FUGA=ddd # make foo echo aaa ddd &amp;gt; /dev/null # HOGE=bbb FUGA=xxx make foo echo aaa xxx &amp;gt; /dev/null # make foo HOGE=bbb FUGA=xxx echo bbb xxx &amp;gt; /dev/null -eフラグを付けて実行すると環境変数の値がMakefileの変数よりも優先して参照される。</description>
    </item>
    
    <item>
      <title>nkfによる文字コードの判定とGoでのShiftJISの扱い</title>
      <link>https://www.sambaiz.net/article/295/</link>
      <pubDate>Mon, 07 Sep 2020 21:38:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/295/</guid>
      <description>file --mime で文字コードを判定しようとしたら charset=unknown-8bit と表示されてしまったので、nkf --guess したところShift_JISであることが分かった。
$ file --mime unknown.txt unknown.txt: text/plain; charset=unknown-8bit $ brew install nkf $ nkf --guess unknown.txt Shift_JIS (CRLF) このファイルをGoで扱うにはjapanese packageでエンコード/デコードする。 ShiftJISのほかにEUCJPとISO2022JPをサポートしている。
import ( &amp;#34;bytes&amp;#34; &amp;#34;golang.org/x/text/encoding/japanese&amp;#34; &amp;#34;golang.org/x/text/transform&amp;#34; ) transform.NewReader(bytes.NewReader(b), japanese.ShiftJIS.NewDecoder()) </description>
    </item>
    
    <item>
      <title>Goのnet/http/pprofでCPUやMemoryをprofileする流れと内部実装</title>
      <link>https://www.sambaiz.net/article/238/</link>
      <pubDate>Mon, 16 Sep 2019 13:49:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/238/</guid>
      <description>Goのnet/http/pprofは pprofで可視化できるprofile.protoを返すAPIを提供するpackage。 profileを出力する方法はほかにもあるが、サーバーのような動き続けるアプリケーションのprofileを取るのに使う。
go testでベンチマークを取ってpprofで時間がかかっている箇所を調べる - sambaiz-net
profileを取る import _ &amp;quot;net/http/pprof&amp;quot;してhttp.ListenAndServe()する。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; _ &amp;#34;net/http/pprof&amp;#34; &amp;#34;time&amp;#34; &amp;#34;golang.org/x/crypto/bcrypt&amp;#34; ) func handler(w http.ResponseWriter, r *http.Request) { for i := 0; i &amp;lt; 3; i++ { bcrypt.GenerateFromPassword([]byte(&amp;#34;PASSWORD&amp;#34;), bcrypt.DefaultCost) } arr := []int{} for i := 0; i &amp;lt; 10000; i++ { arr = append(arr, i) } fmt.Fprintf(w, &amp;#34;OK&amp;#34;) } func main() { http.HandleFunc(&amp;#34;/foo&amp;#34;, handler) fmt.Println(&amp;#34;Listening on :8080&amp;#34;) if err := http.</description>
    </item>
    
    <item>
      <title>User NamespaceでrootになってNetwork Namespaceを作りvethとNATで外と通信する</title>
      <link>https://www.sambaiz.net/article/237/</link>
      <pubDate>Fri, 06 Sep 2019 02:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/237/</guid>
      <description>LinuxのNamespaceはuidやpid、networkなどを分離できる機能で、Dockerなどのコンテナ技術で使われている。
# Amazon Linux 2 (ami-0ff21806645c5e492) $ uname -r 4.14.138-114.102.amzn2.x86_64 User NamespaceでRootになる rootでないと正常終了しないコードを書いた。
$ cat /tmp/root_only.sh #!/bin/sh if [ &amp;#34;$(id -u)&amp;#34; != &amp;#34;0&amp;#34; ]; then echo &amp;#34;you are not root...&amp;#34; exit 1 fi echo &amp;#34;you are root!&amp;#34; 実際ec2-userではexit 1になる。
$ id -u 1000 $ sh /tmp/root_only.sh; echo $? you are not root... 1 User Namespaceを作る。rootでないとそれ以外のNamespaceは作れない。
$ unshare --net unshare: unshare failed: Operation not permitted $ unshare --user $ id uid=65534(nfsnobody) gid=65534(nfsnobody) groups=65534(nfsnobody) $ echo $$ 3537 他のshellを開き、Namespaceの外側からuid_mapを書き込む。 外側の1000から始まるuidを、このNamespaceの0から始まるuidに範囲1でマッピングする。</description>
    </item>
    
    <item>
      <title>SystemdのService</title>
      <link>https://www.sambaiz.net/article/236/</link>
      <pubDate>Fri, 30 Aug 2019 00:16:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/236/</guid>
      <description>SystemdはLinuxで動くServiceの管理などを行うデーモン。initの後継でchkconfig/servicceの代わりにsystemctlコマンドを使う。
$ systemctl start name.service $ systemctl stop name.service $ systemctl status name.service $ systemctl enable name.service $ systemctl disable name.service Serviceの一覧を見る。
$ systemctl list-units --type service --all UNIT LOAD ACTIVE SUB DESCRIPTION accounts-daemon.service loaded active running Accounts Service acpid.service loaded active running ACPI event daemon apparmor.service loaded active exited LSB: AppArmor initialization apport.service loaded active exited LSB: automatic crash report generation $ systemctl list-unit-files --type service UNIT FILE STATE accounts-daemon.</description>
    </item>
    
    <item>
      <title>nohupし忘れた時間のかかる処理をdisownしてexit後も実行させ続ける</title>
      <link>https://www.sambaiz.net/article/184/</link>
      <pubDate>Thu, 23 Aug 2018 00:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/184/</guid>
      <description>時間がかかるコマンドを実行する場合、通常はnohupで実行し ターミナル終了時に飛ぶSIGHUP(SIGnal Hang UP)を無視させることで exitしても実行させ続けることができる。
$ nohup ./foo &amp;amp; ただnohupを付けずに実行し始めてから思ったより時間がかかるということもある。 その場合は、Ctrl+Zで一旦停止してからbgでバックラウンドで実行するようにしてdisown -hでSIGHUPが送られないようにできる。 disownはシェルのジョブテーブルから削除するコマンドで、そのままでもSIGHUPが送られないようにできるが、 -hを付けるとジョブテーブルから削除せずに済む。
$ jobs [1]+ 停止 ./foo $ bg 1 $ jobs [1]+ 実行中 ./foo $ disown -h %1 </description>
    </item>
    
    <item>
      <title>tmuxのメモ</title>
      <link>https://www.sambaiz.net/article/95/</link>
      <pubDate>Fri, 21 Apr 2017 00:25:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/95/</guid>
      <description>https://tmux.github.io/
セッションを立ち上げてその中で複数のウィンドウやペインからコマンドを実行できるやつ。 サーバーでの作業中にネットワークが切断されてしまってもセッションをattachすることで再開することができる。 ローカル環境でもコマンドキーでのウィンドウ作成やペインの分割、 複数のサーバーにsshで入って調査するようなときにペインの同時入力は便利。 もちろんターミナルを閉じてしまっても再開できる。
$ brew install tmux $ tmux $ tmux ls $ tmux a # sessionをattachする bind key(デフォルトでCtrl + b)を入れてからコマンドキーを入れる。よく使うもの。
 c: 新しいウインドウをCreateする d: 今のクライアントをDetachする n: Nextウィンドウに移動する p: Previousウィンドウに戻る w: Windowを一覧表示して選択する x: ペインを削除する ,: ウィンドウの名前を変更する z: ウィンドウ一杯にペインをzoomする/解除 [: ペイン内をスクロールできるようになる。qで解除  ~/.tmux.confはこんな感じにしている。
# bind keyをC-tに変更してC-bを解除 set -g prefix C-t unbind C-b # Vimのキーバインドでペインを移動する bind h select-pane -L bind j select-pane -D bind k select-pane -U bind l select-pane -R # - でペインを横に分割する(縦に切る) bind - split-window -h # | でペインを縦に分割する(横に切る) bind | split-window -v # 同時入力 bind s set-window-option synchronize-panes on bind S set-window-option synchronize-panes off </description>
    </item>
    
    <item>
      <title>Unixのパイプをmkfifo()で作ってdup2()で標準出力にコピーして書き込む</title>
      <link>https://www.sambaiz.net/article/87/</link>
      <pubDate>Fri, 24 Mar 2017 22:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/87/</guid>
      <description>パイプとは Unixでプロセス間通信するためのもの。シェルで使う|は無名パイプ。 mkfifo()システムコールで名前付きパイプを作成でき、これを読み書きすることで任意のプロセス間でやりとりできる。
$ mkfifo hoge $ ls -lh $ prw-r--r-- ... 0B ... hoge 通常のファイルと同様に読み書きすることができ、読み書きどちらかを行おうとすると待つことになる。
$ echo hoge &amp;amp; # 読まれるまで待つ $ cat hoge aaaaa [1]+ Done echo &amp;#34;aaaaa&amp;#34; &amp;gt; hoge $ cat hoge &amp;amp; # 書かれるまで待つ $ echo &amp;#34;bbbbb&amp;#34; &amp;gt; hoge bbbbb [1]+ Done cat hoge ファイルディスクリプタをコピーするシステムコールdup2()でopenしたパイプを標準出力(1)にコピーしてみる。
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;fcntl.h&amp;gt; int main(){ int fd = open(&amp;#34;./hoge&amp;#34;, O_WRONLY); if(fd &amp;lt; 0){ printf(&amp;#34;fail to open\n&amp;#34;); return 1; } printf(&amp;#34;OPEN %d \n&amp;#34;, fd); if(dup2(fd, 1) &amp;lt; 0){ printf(&amp;#34;fail to dup2\n&amp;#34;); return 2; } printf(&amp;#34;WRITE\n&amp;#34;); // これがどこに書き込まれるか  close(fd); } 最後のprintfの内容は標準出力ではなく、パイプに書き込まれていることがわかる。</description>
    </item>
    
    <item>
      <title>crontabのメモ</title>
      <link>https://www.sambaiz.net/article/70/</link>
      <pubDate>Fri, 24 Feb 2017 21:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/70/</guid>
      <description>各ユーザーごとのcron設定。crontab -eでも編集できるけど、間違えて-rにすると全部消えてしまうのでこういう風に一旦取り出してから編集すると安全。
$ crontab -l &amp;gt; ~/crontab $ echo &amp;#34;*/1 * * * * /hoge/fuga.sh&amp;#34; &amp;gt;&amp;gt; ~/crontab $ crontab &amp;lt; ~/crontab $ crontab -l */1 * * * * /hoge/fuga.sh 参考 cron 設定ファイル (crontab ファイル) の置き場所と書式について - ひだまりソケットは壊れない</description>
    </item>
    
    <item>
      <title>iftopでネットワークの帯域を見る</title>
      <link>https://www.sambaiz.net/article/60/</link>
      <pubDate>Tue, 07 Feb 2017 20:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/60/</guid>
      <description>$ yum install --enablerepo=epel iftop $ iftop -f &amp;#34;not dst net 10.0.0.0/8&amp;#34; -i eth0のようにしてインタフェースを指定し、-fでフィルタをかけられる。フィルタの詳細はman pcap-filterで。
12.5Kb 25.0Kb 37.5Kb 50.0Kb	62.5Kb └─────────────────────────┴──────────────────────────┴──────────────────────────┴──────────────────────────┴────────────────────────── ip-172-31-9-9.ap-northeast-1.compute.internal =&amp;gt; 61-121-217-66.dh-connect.net 1.72Kb 6.57Kb 2.40Kb &amp;lt;= 416b 2.13Kb 702b ... ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── TX: cum: 22.6KB peak: 13.2Kb rates: 1.22Kb 1.27Kb 2.46Kb RX: 6.63KB 5.03Kb 208b 330b 748b TOTAL: 29.2KB 18.2Kb 1.42Kb 1.59Kb 3.19Kb 左から2, 10, 40秒間の平均kbps。TXが送信量、RXが受信量で、cumが総量、peakが最大。
実行中にSでソースのポートをDでディスティネーションのポートが表示される。</description>
    </item>
    
    <item>
      <title>SSHポートフォワーディングとnetstatのメモ</title>
      <link>https://www.sambaiz.net/article/42/</link>
      <pubDate>Sat, 17 Dec 2016 12:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/42/</guid>
      <description>SSHポートフォワーディング ローカルの8080ポートを、example.comを通したexample2.comの80ポートに向ける。
$ ssh hoge@example.com -Nf -L 8080:example2.com:80 $ curl localhost:8080 # =&amp;gt; example2.com:80  -N: リモートでコマンドを実行しない -f: バックグラウンドで実行  netstat ネットワークの状態を確認する。
$ netstat -ant Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN ...  -a: non-listening(TCPではESTABLISHED状態)しているソケットだけではなく、listeningしている情報も出す -n: 数値のアドレスで表示する -t: TCPで制限  </description>
    </item>
    
    <item>
      <title>ファイルディスクリプタの上限を増やす</title>
      <link>https://www.sambaiz.net/article/41/</link>
      <pubDate>Thu, 08 Dec 2016 21:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/41/</guid>
      <description>ファイルディスクリプタとは プロセスの外部とやりとりするための識別子。POSIXではint型で、0がstdin、1がstdout、2がstderrといったもの。 ファイルやデバイスに対するopen()や、 ネットワーク(INETドメインソケット)やホスト内(UNIXドメインソケット)で 通信するためのソケットを生成するsocket()などのシステムコールで生成される。
ファイルディスクリプタの上限 一つのプロセスがリソースを食いつぶさないように 使えるファイルディスクリプタの上限が決まっていて、ulimit -nで確認できる。デフォルトは大体1024。
$ ulimit -n 1024 各プロセスの上限と使っているファイルディスクリプタはこれで確認できる。
$ cat /proc/&amp;lt;プロセスID&amp;gt;/limits ... Max open files 1024 4096 files ... $ ls -l /proc/&amp;lt;プロセスID&amp;gt;/fd webサーバーのように同時にたくさん通信したりすると上限に達してしまい、Too many open filesになってしまうので増やす必要がある。
/etc/security/limits.confで変更する PAM認証時(ログインするときなど)に適用されるので、サーバーの起動時に立ち上がったデーモンには使えない。
$ cat /etc/pam.d/sshd ... session required pam_limits.so ... 全てのユーザー(*)のプロセスが使える ファイルディスクリプタ(nofile)のsoft(ユーザーが設定できる)とhard(rootが設定できる)上限を共に64000にする。
$ echo &amp;#34;* hard nofile 64000&amp;#34; &amp;gt;&amp;gt; /etc/security/limits.conf $ echo &amp;#34;* soft nofile 64000&amp;#34; &amp;gt;&amp;gt; /etc/security/limits.conf $ ulimit -n 64000 ulimit -nで変更する シェルと、起動したプロセスで有効。
$ ulimit -n 64000 dockerコンテナでは run時にulimitオプションで --ulimit nofile=11111のように指定することもできる。</description>
    </item>
    
  </channel>
</rss>
