<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>objective-c on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/objective-c/</link>
    <description>Recent content in objective-c on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 27 Jun 2020 23:11:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/objective-c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SwiftのARCとweak、delegateが呼ばれなかったりObjective-Cで返り値が0やNOになる原因</title>
      <link>https://www.sambaiz.net/article/283/</link>
      <pubDate>Sat, 27 Jun 2020 23:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/283/</guid>
      <description>SwiftやObjective-CはARC (Automatic Reference Counting)という仕組みでメモリを管理していて、 インスタンスへの参照カウントが0になったときにそのメモリが開放される。昔は参照カウントの増減を手動でやっていたが今はARCが自動でやってくれる。
class X { deinit { print(&amp;quot;deinit X&amp;quot;) } } var x: X? = X() print(&amp;quot;inited X&amp;quot;) x = nil print(&amp;quot;setted nil&amp;quot;) /* inited X deinit X setted nil */ 通常それでうまく働くが、次のように循環参照するといずれの参照カウントも0にならずメモリリークする。
protocol SomeDeleagete: AnyObject { func foo() -&amp;gt; Int } class A { var b: B init() { self.b = B() self.b.delegate = self } deinit { print(&amp;quot;deinit A&amp;quot;) } } extension A: SomeDeleagete { func foo() -&amp;gt; Int { return 100 } } class B { var delegate: SomeDeleagete?</description>
    </item>
    
    <item>
      <title>Objective-CでFrameworkを作りSwiftからimportする</title>
      <link>https://www.sambaiz.net/article/254/</link>
      <pubDate>Sun, 12 Jan 2020 17:41:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/254/</guid>
      <description>Frameworkの作成 New -&amp;gt; ProjectでFrameworkをLanguage Objective-Cで作成。
最低限の実装とHeaderを書いた。このHeaderはBuild PhasesのHeadersにPublicとして登録されている。
 TestObjcFramework.m  #import &amp;lt;Foundation/Foundation.h&amp;gt; void hello() { NSLog(@&amp;quot;hello&amp;quot;); };  TestObjcFramework.h  #import &amp;lt;UIKit/UIKit.h&amp;gt; //! Project version number for TestObjcFramework. FOUNDATION_EXPORT double TestObjcFrameworkVersionNumber; //! Project version string for TestObjcFramework. FOUNDATION_EXPORT const unsigned char TestObjcFrameworkVersionString[]; // In this header, you should import all the public headers of your framework using statements like #import &amp;lt;TestObjcFramework/PublicHeader.h&amp;gt; void hello(void); arm64(実機)/x86_64(Simulator)両方で使えるUniversal Frameworkをビルドするため、 New -&amp;gt; TargetでAggregateを作成し、Build PhasesのNew Run Script Phaseで、 各環境でxcodebuildしてlipoでUniversal Binaryにする次のスクリプトを追加する。</description>
    </item>
    
  </channel>
</rss>