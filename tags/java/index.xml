<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/java/</link>
    <description>Recent content in Java on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 08 Aug 2023 22:44:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javaでの互換性のないライブラリのバージョン衝突問題をrelocationや独自のクラスローダーによって解消する</title>
      <link>https://www.sambaiz.net/article/443/</link>
      <pubDate>Tue, 08 Aug 2023 22:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/443/</guid>
      <description>&lt;p&gt;Javaで自身や依存しているライブラリが異なるバージョンのライブラリに依存している場合、&#xA;通常、uber-jarにしたとしてもその中のクラスが優先的に読まれたりすることはなく、クラスパスの前にあるクラスがロードされることになるが、&#xA;互換性のないものがあると俗に言う &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Classloader#:~:text=2%5D%5B6%5D-,JAR%20hell%5Bedit%5D,-JAR%20hell%20is&#34;&gt;JAR hell&lt;/a&gt; と呼ばれる状態に陥り、&#xA;実行時の NoSuchMethodError や意図しない挙動をする可能性がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java から Go でビルドした shared library を JNI と JNA で呼び出した際の速度を比較する</title>
      <link>https://www.sambaiz.net/article/437/</link>
      <pubDate>Sun, 29 Jan 2023 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/437/</guid>
      <description>&lt;p&gt;JNI (Java Native Interface) は Java から JVM 外で実行される C/C++ のネイティブコードを呼び出したり、ネイティブコードから Java のコードを呼び出すためのインタフェースで、&#xA;これにより重い処理を高速化したり複数プラットフォームで処理を共通化することができる。&#xA;Java からネイティブコードを呼ぶのは &lt;a href=&#34;https://github.com/java-native-access/jna&#34;&gt;JNA (Java Native Access)&lt;/a&gt; というライブラリを用いることでもでき、&#xA;実装は簡単だが、速度についてはなるべく問題にならないよう配慮はされているものの JNI と比べると差があるようだ。&#xA;そこで実際に JNI と JNA で簡単な shared library を呼び出した際の速度を比較してみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JMH で Java のコードのベンチマークを取る</title>
      <link>https://www.sambaiz.net/article/435/</link>
      <pubDate>Sat, 28 Jan 2023 17:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/435/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/openjdk/jmh&#34;&gt;JMH (Java Microbenchmark Harness)&lt;/a&gt; は Java のベンチマークツール。&#xA;小さなコードを単純に実行するとコードが大きいときには行われない JIT コンパイルなどの最適化がはたらくことで実際よりパフォーマンスが高く出ることがあるが、&#xA;JMH はこれを防ぐことでより正確にベンチマークを取ることができるそうだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SparkをビルドしIntelliJでリモートデバッグする</title>
      <link>https://www.sambaiz.net/article/419/</link>
      <pubDate>Sun, 09 Oct 2022 19:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/419/</guid>
      <description>&lt;h2 id=&#34;コマンドラインでのビルド&#34;&gt;&lt;a href=&#34;https://spark.apache.org/docs/3.3.0/building-spark.html&#34;&gt;コマンドラインでのビルド&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone &lt;span style=&#34;color:#6272a4&#34;&gt;--branch v3.3.0 --depth 1 https://github.com/apache/spark.git &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://asdf-vm.com/guide/getting-started.html#_3-install-asdf&#34;&gt;asdf&lt;/a&gt; で Java 8 をインストールする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install asdf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;\n. $(brew --prefix asdf)/libexec/asdf.sh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ${ZDOTDIR:&lt;span style=&#34;color:#ff79c6&#34;&gt;-~&lt;/span&gt;}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;.zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf &lt;span style=&#34;color:#6272a4&#34;&gt;--version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;v0.&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf plugin&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;add&lt;/span&gt; java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf list&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;all&lt;/span&gt; java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf install java corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf &lt;span style=&#34;color:#ff79c6&#34;&gt;global&lt;/span&gt; java corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;. ~/.asdf/plugins/java/set-java-home.zsh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;~/&lt;/span&gt;.zprofile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ java &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openjdk &lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.8.0_342&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenJDK Runtime Environment Corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; (build &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;_342&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;b07)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenJDK &lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Bit&lt;/span&gt; Server VM Corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; (build &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;b07, mixed &lt;span style=&#34;color:#ff79c6&#34;&gt;mode&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ビルドが通ることを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javaで発生したOOMの原因をGCログとヒープダンプから探る</title>
      <link>https://www.sambaiz.net/article/413/</link>
      <pubDate>Thu, 11 Aug 2022 08:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/413/</guid>
      <description>&lt;h2 id=&#34;gcログの可視化&#34;&gt;GCログの可視化&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-Xloggc:/tmp/gc.log&lt;/li&gt;&#xA;&lt;li&gt;-XX:+PrintGCDetails&lt;/li&gt;&#xA;&lt;li&gt;-XX:+PrintGCDateStamps&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;で次のようなGCのログが出力される。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /tmp/gc.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:30.738+0000: [GC (Allocation Failure) [PSYoungGen: 638269K-&amp;gt;3108K(665600K)] 2017703K-&amp;gt;1382542K(2063872K), 0.0084360 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:31.320+0000: [GC (Allocation Failure) [PSYoungGen: 640548K-&amp;gt;2565K(666624K)] 2019982K-&amp;gt;1382000K(2064896K), 0.0086070 secs] [Times: user=0.05 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:31.878+0000: [GC (Allocation Failure) [PSYoungGen: 640005K-&amp;gt;2565K(667136K)] 2019440K-&amp;gt;1382000K(2065408K), 0.0086495 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:32.451+0000: [GC (Allocation Failure) [PSYoungGen: 643589K-&amp;gt;3301K(668672K)] 2023024K-&amp;gt;1382736K(2066944K), 0.0087513 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/chewiebug/GCViewer&#34;&gt;GCViewer&lt;/a&gt;でこのファイルを開くと次のようなグラフが描画される。&#xA;上部がNew領域、下部がOld領域を表し、Old領域の使用量である紫の線が一杯になると黒い線のFull GCが走り、ヒープ使用量の合計である青い線も下がっている。&#xA;この例では徐々にGCでの減り分が少なくなっていき、後半はほとんど真っ黒なので常にFull GCが発生していることが分かる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JDWPを有効にしてリモートマシンで動いているJavaアプリケーションをデバッグする</title>
      <link>https://www.sambaiz.net/article/411/</link>
      <pubDate>Sun, 24 Jul 2022 21:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/411/</guid>
      <description>&lt;h2 id=&#34;jdwpを有効にする&#34;&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&#34;&gt;JDWPを有効にする&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;実行時に &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&#34;&gt;-agentlib:jdwp&lt;/a&gt; を渡すとJVMとデバッガーがやり取りする際に用いられるJDWP(Java Debug Wire Protocol)を有効にできる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;transport=dt_socket,server=y,address=*:5005 5005番ポートでデバッガーを待ち受ける。Java 8以前は *: が不要。&lt;/li&gt;&#xA;&lt;li&gt;suspend=n メインクラスがロードされる直前にJVMを一時停止しない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;処理が終わると終了するタイプのアプリケーションでは、先にデバッガーを起動し待ち受けておいて、server=n で接続しにいったり、&#xA;suspend=y にしてデバッガーが接続されるまで停止させることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athenaのデータソースコネクタとユーザー定義関数(UDF)を実装する</title>
      <link>https://www.sambaiz.net/article/402/</link>
      <pubDate>Sat, 23 Apr 2022 18:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/402/</guid>
      <description>&lt;p&gt;AthenaにはLambdaをコネクタとしてS3以外のデータソースにアクセスできるFederate Queryという機能があって、&lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation&#34;&gt;公式のリポジトリ&lt;/a&gt;でBigQueryやSnowflakeなど様々なデータソースのコネクタが提供されているが自作することもできる。&#xA;今回は&lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation/tree/master/athena-example&#34;&gt;Example Connector&lt;/a&gt;を参考にしながら最低限のコネクタを実装しその動作を確認する。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/athena-connector-udf-example&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SDK for Java 2.x のUnable to load an HTTP implementationとクライアント変更によるlambda実行高速化</title>
      <link>https://www.sambaiz.net/article/366/</link>
      <pubDate>Thu, 10 Jun 2021 22:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/366/</guid>
      <description>&lt;p&gt;AWS SDK for Java 2.x では内部で使う&lt;a href=&#34;https://aws.amazon.com/jp/blogs/developer/aws-sdk-for-java-2-x-released/&#34;&gt;HTTP Clientを変更できる&lt;/a&gt;ようになっている。現在サポートされているのは次の4つ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- synchronous --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apache-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;url-connection-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- asynchronous --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;netty-nio-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;aws-crt-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.16.79-PREVIEW&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;system propertyでデフォルトクライアントを指定でき、クライアントごとに変えることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JVMのヒープ領域とFull GC</title>
      <link>https://www.sambaiz.net/article/35/</link>
      <pubDate>Mon, 14 Nov 2016 23:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/35/</guid>
      <description>&lt;h2 id=&#34;ヒープ領域&#34;&gt;ヒープ領域&lt;/h2&gt;&#xA;&lt;p&gt;動的に確保されるメモリの領域でJVMではNew領域とOld領域に分けられる。&#xA;ちなみに、ロードしたクラスやメソッドが入るヒープ領域はPermanent領域と呼ばれていたが&#xA;Java8からMetaspace領域に置き換えられネイティブメモリに乗るようになった。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
