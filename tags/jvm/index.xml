<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/jvm/index.xml</link>
    <language>ja</language>
    <author>sambaiz</author>
    <rights>(C) 2017</rights>
    <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>JVMのヒープ領域とFull GC</title>
          <link>https://www.sambaiz.net/article/35/</link>
          <pubDate>Mon, 14 Nov 2016 23:46:00 &#43;0900</pubDate>
          <author></author>
          <guid>https://www.sambaiz.net/article/35/</guid>
          <description>

&lt;h3 id=&#34;ヒープ領域&#34;&gt;ヒープ領域&lt;/h3&gt;

&lt;p&gt;ヒープ領域というのはメモリ上の動的に確保する領域のこと。
JVMでは、ヒープ領域のNew領域とOld領域、非ヒープ領域のPermanent領域が存在する(した)。&lt;/p&gt;

&lt;h3 id=&#34;permanent領域&#34;&gt;Permanent領域&lt;/h3&gt;

&lt;p&gt;ロードしたクラスやメソッドが入る。
Java8版のHotspotVM(OracleのJVM)ではMetaspace領域となり、ネイティブメモリに乗るようになったらしい。&lt;/p&gt;

&lt;h3 id=&#34;new領域&#34;&gt;New領域&lt;/h3&gt;

&lt;p&gt;New領域の中はさらに分かれている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eden領域: オブジェクトが作られて最初に配置される。&lt;/li&gt;
&lt;li&gt;To領域(Survivor領域1): Edenが一杯になると、EdenとFromから送られる。&lt;/li&gt;
&lt;li&gt;From領域(Survivor領域0): Edenが一杯になると、Toから送られる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edenが一杯になったときに不要なオブジェクトは破棄、必要なものは領域を移動させるのがScavenge GC。
つまり、Edenが一杯になるたびにToに飛んだオブジェクトはFromと往復し続ける。
ただし、MaxTenuringThresholdの回数を超えるとOld領域に送られることになる。&lt;/p&gt;

&lt;h3 id=&#34;old領域&#34;&gt;Old領域&lt;/h3&gt;

&lt;p&gt;Old領域も一杯になったらどうしようもないのでFull GCが走る。
Full GCでは全ての領域のオブジェクトをチェックして不要なものを探す。
これに集中するので他のことはできなくなり、時間もかかる。
Full GCばかり起きていたらまともに動かないので、
Old領域にまで行かないようにオブジェクトの寿命を短くするか、
ヒープ領域の大きさ(&lt;code&gt;-Xms&lt;/code&gt;, &lt;code&gt;-Xmx&lt;/code&gt;)を変えたりしてなるべく起きないようにしたい。&lt;/p&gt;

&lt;h3 id=&#34;どれくらいfull-gcしているかどうか&#34;&gt;どれくらいFull GCしているかどうか&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;-Xloggc&lt;/code&gt;でGCのログが出せる。&lt;code&gt;-XX:+UseGCLogFileRotation&lt;/code&gt;でローテーションしたりもできる。
あと手軽に&lt;code&gt;jps&lt;/code&gt;からの&lt;code&gt;jstat -gc &amp;lt;pid&amp;gt;&lt;/code&gt;、あるいはグラフで可視化できるようなやつでヒープ領域の状態を確認する。
&lt;code&gt;jstat&lt;/code&gt;の結果の意味は&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/technotes/tools/windows/jstat.html&#34;&gt;ここ&lt;/a&gt;に書いてある。
例えばFGCがフルGCイベントの数。&lt;/p&gt;

&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/ogin_s57/20120623/1340463194&#34;&gt;JVMとGCのしくみ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://equj65.net/tech/java8hotspot/&#34;&gt;Java8のHotSpotVMからPermanent領域が消えた理由とその影響 | ギークを目指して&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/i_matsui/items/aabbdaa169c6ae51ecb3&#34;&gt;Java開発の性能改善！ その２ GCログの解析とHeepの設定&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
