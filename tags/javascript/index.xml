<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/javascript/</link>
    <description>Recent content in javascript on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 19 Feb 2019 23:52:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chrome ExtensionsとChrome Apps</title>
      <link>https://www.sambaiz.net/article/209/</link>
      <pubDate>Tue, 19 Feb 2019 23:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/209/</guid>
      <description>Chrome Extrnsions ツールバーに表示され、ChromeのAPIを呼んで色々できる拡張機能で、manifestとhtml, js, cssなどから構成される。 開発中はディレクトリごとchrome://extensions/から読み込むとインストールでき、ツールバーにアイコンが表示される。
test-chrome-extension
manifest.json manifest_version, name, versionと、brower_actionかpage_actionのどちらかはRequired。
{ &amp;#34;manifest_version&amp;#34;: 2, &amp;#34;name&amp;#34;: &amp;#34;test-chrome-extension&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0&amp;#34;, &amp;#34;icons&amp;#34;: { &amp;#34;128&amp;#34;: &amp;#34;images/icon-128.png&amp;#34; }, &amp;#34;page_action&amp;#34;: { &amp;#34;default_icon&amp;#34;: { &amp;#34;32&amp;#34;: &amp;#34;images/icon-32.png&amp;#34; } }, &amp;#34;options_page&amp;#34;: &amp;#34;options.html&amp;#34;, &amp;#34;background&amp;#34;: { &amp;#34;scripts&amp;#34;: [ &amp;#34;background.js&amp;#34; ], &amp;#34;persistent&amp;#34;: false }, &amp;#34;permissions&amp;#34;: [ &amp;#34;declarativeContent&amp;#34;, &amp;#34;storage&amp;#34; ], &amp;#34;content_security_policy&amp;#34;: &amp;#34;script-src &amp;#39;self&amp;#39;; object-src &amp;#39;self&amp;#39;&amp;#34; }  page_action  常にツールバーに表示されているbrowser_actionに対して、限られたページでのみ有効なAction。 有効かどうかは declarativeContent.onPageChangedの conditionsや、tags.onUpdatedのリスナー内で制御する。
 options_page: &amp;ldquo;拡張機能のオプション&amp;quot;で表示されるページ background  インストール時や更新時など必要なときにロードされるスクリプト。イベントリスナーはここで設定する。
chrome.runtime.onInstalled.addListener(() =&amp;gt; { chrome.declarativeContent.onPageChanged.removeRules(undefined, () =&amp;gt; { chrome.</description>
    </item>
    
    <item>
      <title>WebSocketでの通信内容をWiresharkで見る</title>
      <link>https://www.sambaiz.net/article/177/</link>
      <pubDate>Tue, 10 Jul 2018 23:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/177/</guid>
      <description>Webで双方向通信するためのプロトコル、WebSocketでの通信内容をWiresharkで見る。
アプリケーション サーバー package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;golang.org/x/net/websocket&amp;#34; ) type Payload struct { A string } func Handler(ws *websocket.Conn) { ctx, cancel := context.WithCancel(context.Background()) go func() { var payload Payload for { err := websocket.JSON.Receive(ws, &amp;amp;payload) if err != nil { if err == io.EOF { fmt.Println(&amp;#34;connection closed&amp;#34;) } else { fmt.Println(err) } cancel() break } fmt.Println(payload.A) } }() websocket.JSON.Send(ws, Payload{A: &amp;#34;a&amp;#34;}) select { case &amp;lt;-ctx.Done(): } } func main() { http.</description>
    </item>
    
    <item>
      <title>DOMの(next/previous)SiblingとElementSiblingの値</title>
      <link>https://www.sambaiz.net/article/176/</link>
      <pubDate>Wed, 04 Jul 2018 23:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/176/</guid>
      <description>Siblingは兄弟姉妹という意味
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;li2&amp;#34;&amp;gt;2&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;script&amp;gt; const el = document.querySelector(&amp;#34;li#li2&amp;#34;); &amp;lt;/script&amp;gt; Sibling elのpreviousSiblingを取ると&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;になると思いきや、その直前の空白や改行を含むtext nodeが返る。 それらが全くない場合隣のElementが返ることになる。
const el2 = el.previousSibling; console.log(`previousSibling: ${el2.nodeName} &amp;#34;${el2.textContent}&amp;#34;`); /* #text &amp;#34; &amp;#34; */ const el4 = el.nextSibling; console.log(`nextSibling: ${el4.nodeName} &amp;#34;${el4.textContent}&amp;#34;`); // LI &amp;#34;3&amp;#34; ElementSibling 多くの場合で意図した結果が返るのはこっち。
const el3 = el.previousElementSibling; console.log(`previousElementSibling: ${el3.nodeName} &amp;#34;${el3.textContent}&amp;#34;`); // LI &amp;#34;1&amp;#34; const el5 = el.nextElementSibling; console.log(`nextElementSibling: ${el5.nodeName} &amp;#34;${el5.textContent}&amp;#34;`); // LI &amp;#34;3&amp;#34; firstChildとfirstElementChildなどの関係も同じ。存在を忘れていてひっかかった。
const el6 = document.querySelector(&amp;#34;ul&amp;#34;).firstChild; console.log(`firstChild: ${el6.nodeName} &amp;#34;${el6.textContent}&amp;#34;`); /* fistChild: #text &amp;#34; &amp;#34; */ </description>
    </item>
    
    <item>
      <title>ブラウザのwindow間の値渡し</title>
      <link>https://www.sambaiz.net/article/156/</link>
      <pubDate>Fri, 23 Feb 2018 02:01:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/156/</guid>
      <description>直接Windowを参照する オリジン(プロトコル+ポート+ホスト)が同じ場合は、親はopen()した返り値で、子はwindow.openerで相手のwindowが取れて、直接参照したりDOMを操作したりすることもできる。
同じ/異なるオリジンのiframeの中からできること - sambaiz-net
$ cat index.html &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;Open window&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;#34;btn2&amp;#34;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;view&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; let win2; const button = document.getElementById(&amp;#34;btn&amp;#34;); button.addEventListener(&amp;#34;click&amp;#34;, () =&amp;gt; { window.foo = &amp;#34;bar from window1&amp;#34;; win2 = window.open(&amp;#34;index2.html&amp;#34;); }, false); const button2 = document.getElementById(&amp;#34;btn2&amp;#34;); button2.addEventListener(&amp;#34;click&amp;#34;, () =&amp;gt; { if (win2) { win2.close(); } }, false); &amp;lt;/script&amp;gt; $ cat index2.html &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;view&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; console.log(window.aaa); const parentWindow = window.opener; const view = document.</description>
    </item>
    
    <item>
      <title>Chromeで任意のscriptを読み込まれる前に差し替える</title>
      <link>https://www.sambaiz.net/article/150/</link>
      <pubDate>Thu, 01 Feb 2018 21:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/150/</guid>
      <description>ChromeのDevToolsではSourcesからscriptを書き換えられるようになっているが、 一行目にbreakpointを挟んで更新するとそこで止まるので読み込まれる前に差し替えることができる。 ページの読み込み時に呼ばれるSDKやライブラリの影響範囲を調べたりデバッグしたりするのに便利。
確認用jsとhtml
console.log(&amp;#34;original&amp;#34;) &amp;lt;script src=&amp;#34;index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 読み込み時に実行されるconsole.logの文章を変えた。</description>
    </item>
    
    <item>
      <title>JavaScriptのrequire/importの歴史</title>
      <link>https://www.sambaiz.net/article/143/</link>
      <pubDate>Sat, 11 Nov 2017 20:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/143/</guid>
      <description>scriptタグを並べる &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;a.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;b.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 先に書かれたa.jsで定義された内容はb.jsで読むことができる。
$ cat a.js const a = &amp;#39;a is defined&amp;#39;; const divA = document.createElement(&amp;#39;div&amp;#39;); divA.textContent = (typeof b !== &amp;#39;undefined&amp;#39;) ? b : &amp;#39;b is undefined&amp;#39;; document.body.appendChild(divA); $ cat b.js const b = &amp;#39;b is defined&amp;#39;; const divB = document.createElement(&amp;#39;div&amp;#39;); divB.textContent = (typeof a !== &amp;#39;undefined&amp;#39;) ? a : &amp;#39;a is undefined&amp;#39;; document.body.appendChild(divB); 依存が増えてくると順番を考えるのが大変。さらにグローバルな名前空間を汚染してしまう。
b is undefined a is defined AMDとCommonJS というのも、かつてのJSにはモジュールを読み込む仕組みがなかった。 そこで考えられたのがAMDやCommonJSというフォーマット。 AMD(Asynchronous module definition)はRequireJSによって提供されるrequire()で動的にscriptタグを埋める。CommonJSはNodeでもおなじみのrequire()で、これにWebpackを通して一つのファイルにまとめておく。同じ関数名が使われているが全くの別物。</description>
    </item>
    
    <item>
      <title>RxJSでObservableを結合する(merge, forkJoin, concat, combineLatest)</title>
      <link>https://www.sambaiz.net/article/100/</link>
      <pubDate>Tue, 09 May 2017 20:25:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/100/</guid>
      <description>RxJSでRxをはじめる - sambaiz.net
merge 2つのstreamの両方の値がemitされる。
Rx.Observable.merge( stream1, stream2 ).subscribe( data =&amp;gt; console.log(`merge ${data}`), err =&amp;gt; console.log(`merge ${err}`) ); forkJoin completeしたときの最後の値を配列としてemitする。 非同期で一つ値をemitするようなstreamで、Promise.allのようなことをしたいときはこれ。
Rx.Observable.forkJoin( stream1, stream2 ).subscribe( data =&amp;gt; console.log(` forkJoin: ${data}`), err =&amp;gt; console.log(` forkJoin: ${err}`) ) concat 前のstreamがcompleteしたら次のstreamの値がemitされる。
Rx.Observable.concat( stream1, stream2 ).subscribe( data =&amp;gt; console.log(` concat ${data}`), err =&amp;gt; console.log(` concat ${err}`) ); combineLatest stream自体を結合するのではなく値を結合する。 この例だと、stream1でemitされた値がa、stream2で最後にemitされた値がbのときa+bをemitする。 combineする値がない場合はemitされない。
stream1.combineLatest(stream2, (a, b) =&amp;gt; a + b).subscribe( data =&amp;gt; console.log(` combineLatest ${data}`), err =&amp;gt; console.</description>
    </item>
    
    <item>
      <title>RxJSでRxをはじめる</title>
      <link>https://www.sambaiz.net/article/85/</link>
      <pubDate>Sat, 18 Mar 2017 21:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/85/</guid>
      <description>https://github.com/ReactiveX/rxjs
Rx(ReactiveX)とは 非同期処理をうまく扱えるようにするライブラリ。いろんな言語で実装されている。 非同期処理の結果はObservableなStreamに流される。 ObservableはIteratableのように扱うことができる。
RxはObserver pattern を拡張したもの。 Observer patternというのは、Subjectが、Observeしている全てのObserverに対して通知を送るデザインパターン。 C#などのeventのそれ。
C#のdelegateとevent - sambaiz.net
試してみる inputのkeyupイベントのObservableを作成し、それをsubscribe()して出力している。
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/rxjs/5.0.1/Rx.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; id=&amp;#34;input&amp;#34; /&amp;gt; &amp;lt;script&amp;gt; const inputForm = document.querySelector(&amp;#39;#input&amp;#39;); const keyups = Rx.Observable.fromEvent(inputForm, &amp;#39;keyup&amp;#39;); keyups.subscribe( data =&amp;gt; console.log(data), err =&amp;gt; console.log(err) ); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 入力するとこんなのが出力される。
KeyboardEvent {isTrusted: true, key: &amp;#34;a&amp;#34;, code: &amp;#34;KeyA&amp;#34;, location: 0, ctrlKey: false…} KeyboardEvent {isTrusted: true, key: &amp;#34;b&amp;#34;, code: &amp;#34;KeyB&amp;#34;, location: 0, ctrlKey: false…} KeyboardEvent {isTrusted: true, key: &amp;#34;c&amp;#34;, code: &amp;#34;KeyC&amp;#34;, location: 0, ctrlKey: false…} Observable create next()でObservableに値をemitし、complete()で終了させる。 error()でエラーをemitするとそれ以後の値はemitされない。</description>
    </item>
    
  </channel>
</rss>
