<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vscode on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/vscode/</link>
    <description>Recent content in vscode on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 17 Oct 2020 23:50:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/vscode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH Agentに鍵を登録してVSCodeのdevcontainerの中で使えるようにする</title>
      <link>https://www.sambaiz.net/article/305/</link>
      <pubDate>Sat, 17 Oct 2020 23:50:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/305/</guid>
      <description>VSCodeのdevcontainer内からホストのSSH Keyでgit pushなどできるようにする。
VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net
macOSの場合ホストのKeyChainかSSH Agentに鍵を登録すると自動でExtensionが参照する。今回はSSH Agentの方で行う。
ssh-addを-Kフラグを付けて実行するとKeychainにパスフレーズが保存される。SSH Agentは自分で起動する必要はなくコマンドを実行すると起動するようだ。
$ ssh-add -K ~/.ssh/id_rsa $ ssh-add -l 4096 ****** ***** (RSA) Sierra以降では.ssh/configのAddKeysToAgentとUseKeychainをyesにしないと起動時に自動で登録されずKeychainも参照されない。
Host * ... AddKeysToAgent yes UseKeychain yes devcontainerに反映されていることを確認。
# ssh-add -l 4096 ****** ***** (RSA) 参考 Mac OS X以降のssh-agent事情 - Qiita</description>
    </item>
    
    <item>
      <title>VSCodeのDocker開発コンテナでJupyter Notebookを開いてAthenaのクエリを実行し可視化する</title>
      <link>https://www.sambaiz.net/article/294/</link>
      <pubDate>Fri, 04 Sep 2020 19:34:04 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/294/</guid>
      <description>ローカルでJupyter Notebookを動かすために以前はjupyter/datascience-notebookのイメージを立ち上げていた。 Notebookはエディタとしての機能に乏しいため通常のコードを書くのが大変だったのだが、 VSCodeのPython extensionにはJupyter notebookサポートが入っていてそのまま開けて実行できるのを知ったので移行することにした。 今回はVSCodeのDocker開発コンテナからNotebookを開いてAthenaのクエリを実行し可視化する。
VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net
環境構築 ~/.awsをマウントする。Dockerfileは上記の記事のと同じ。
{ &amp;#34;name&amp;#34;: &amp;#34;Python&amp;#34;, &amp;#34;build&amp;#34;: { &amp;#34;dockerfile&amp;#34;: &amp;#34;Dockerfile&amp;#34; }, &amp;#34;settings&amp;#34;: { &amp;#34;terminal.integrated.shell.linux&amp;#34;: &amp;#34;/bin/bash&amp;#34;, &amp;#34;python.pythonPath&amp;#34;: &amp;#34;/usr/local/bin/python&amp;#34;, &amp;#34;python.linting.enabled&amp;#34;: true, &amp;#34;python.linting.pylintEnabled&amp;#34;: false, &amp;#34;python.linting.flake8Enabled&amp;#34;: true, &amp;#34;python.linting.flake8Path&amp;#34;: &amp;#34;/usr/local/bin/flake8&amp;#34;, &amp;#34;editor.formatOnSave&amp;#34;: true, &amp;#34;python.formatting.provider&amp;#34;: &amp;#34;yapf&amp;#34;, &amp;#34;python.formatting.yapfPath&amp;#34;: &amp;#34;/usr/local/bin/yapf&amp;#34;, &amp;#34;python.linting.mypyEnabled&amp;#34;: true, &amp;#34;python.linting.mypyPath&amp;#34;: &amp;#34;/usr/local/bin/mypy&amp;#34;, }, &amp;#34;extensions&amp;#34;: [ &amp;#34;ms-python.python&amp;#34; ], &amp;#34;mounts&amp;#34;: [ &amp;#34;source=${localEnv:HOME}/.aws,target=/root/.aws,type=bind,readonly&amp;#34; ] } アプリケーションで使うパッケージはPoetryでインストールすることにしている。
PoetryでPythonの依存パッケージを管理する - sambaiz-net
KernalをvenvのPythonに切り替えるためにipykernelをインストールする必要がある。
[tool.poetry.dependencies] python = &amp;#34;^3.8&amp;#34; PyAthena = &amp;#34;^1.11.1&amp;#34; pandas = &amp;#34;^1.1.1&amp;#34; ipykernel = &amp;#34;^5.</description>
    </item>
    
    <item>
      <title>VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する</title>
      <link>https://www.sambaiz.net/article/289/</link>
      <pubDate>Sun, 19 Jul 2020 19:34:04 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/289/</guid>
      <description>SageMakerで学習させるモデルを開発するにあたって、Notebooks上ではコードを書きづらいのでVS Codeで書いているのだが、ローカルに依存パッケージをインストールして実行しているため エディタ上では警告が出ていなくても、実際の環境にはパッケージがなかったりすることがある。
そんな場合に便利なのがVS CodeのRemote Development。 これはローカルのVS CodeからリモートのVS Code Serverに接続してその環境で開発することができるエクステンションで、 Dockerコンテナのほか、SSHでリモートマシンやVMに接続したり、WindowsならWSLにも接続して開発環境を揃えることができる。
SageMakerでPyTorchのモデルを学習させる - sambaiz-net
設定 .devcontainer/に次のファイルを置く。
PyTorch  Dockerfile  aws/deep-learning-containersの Deep Learning Containers Imagesから選び、ECRからpullするため認証情報を登録しておく。
$ aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin https://763104351884.dkr.ecr.us-east-1.amazonaws.com これをベースに、開発用ツールを入れてVSCodeのDevelopment Container Scriptsを実行する。
$ cat .devcontainer/Dockerfile FROM763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:1.5.1-cpu-py36-ubuntu16.04 RUN conda install -y yapf flake8 mypy # VS Code Development Container Scripts # https://github.com/microsoft/vscode-dev-containers/tree/v0.128.0/script-library ARG INSTALL_ZSH=&amp;#34;true&amp;#34; ARG USERNAME=&amp;#34;vscode&amp;#34; ARG USER_UID=&amp;#34;1000&amp;#34; ARG USER_GID=&amp;#34;${USER_UID}&amp;#34; ARG UPGRADE_PACKAGES=&amp;#34;true&amp;#34; ARG COMMON_SCRIPT_SOURCE=&amp;#34;https://raw.</description>
    </item>
    
    <item>
      <title>PoetryでPythonの依存パッケージを管理する</title>
      <link>https://www.sambaiz.net/article/288/</link>
      <pubDate>Sat, 18 Jul 2020 21:23:04 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/288/</guid>
      <description>Poetryは比較的新しいPythonの依存管理ツールで、 pipenvの依存解決に失敗することがある問題を解消したり、ライブラリを開発しやすくしたものらしい。 まだスターはpipenvの半分ほどだがバージョンもv1.0.0に到達したしpipenvよりも速くて安定しているという話もあるので使ってみる。
インストール pipでインストールした。ドキュメントによると依存が衝突する可能性があるとのことだったが、自分の環境では特に問題なかった。
$ pip install --user poetry $ poetry --version Poetry version 1.0.9 使い方 PEP 518で定義されている設定ファイルpyproject.tomlを置く。
$ cat pyproject.toml [tool.poetry] name = &amp;#34;poetry-demo&amp;#34; version = &amp;#34;0.1.0&amp;#34; description = &amp;#34;&amp;#34; authors = [&amp;#34;sambaiz &amp;lt;godgourd@gmail.com&amp;gt;&amp;#34;] [tool.poetry.dependencies] python = &amp;#34;^3.7&amp;#34; [build-system] requires = [&amp;#34;poetry&amp;gt;=0.12&amp;#34;] build-backend = &amp;#34;poetry.masonry.api&amp;#34; poetry addするとvenvがなければ作成してその中にパッケージをインストールしpyproject.tomlにも追加する。
$ poetry add pendulum Creating virtualenv poetry-demo-t1vYebNd-py3.7 in /Users/*****/Library/Caches/pypoetry/virtualenvs ... $ cat pyproject.toml ... [tool.poetry.dependencies] python = &amp;#34;^3.7&amp;#34; pendulum = &amp;#34;^2.1.1&amp;#34; poetry install でpyproject.</description>
    </item>
    
    <item>
      <title>MacのVSCodeでC&#43;&#43;を書く環境構築</title>
      <link>https://www.sambaiz.net/article/252/</link>
      <pubDate>Sat, 04 Jan 2020 01:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/252/</guid>
      <description>(追記:2021-02-05) 今はdevcontainerで環境を作っている。mirosoft/vscode-remote-try-cppをコンテナで開くだけでbits/stdc++.hも読めるg++環境が立ち上がる。GitHubのテンプレートとして公開されているので、これをベースとしたリポジトリを作成できる。
VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net
 Extension  C/C++  を入れてHello Worldを書いたところ、stdio.hが見つからず#includeの行に赤線が付いた。
#include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;#34;Hello World!\n&amp;#34;); return 0; } Command Palletteから C/C++: Edit Configurations (JSON) を選ぶと .vscode/c_cpp_properties.json が生成されるので編集していく。
Xcode 10から/usr/includeにHeaderファイルが置かれなくなったようなのでincludePathにXcodeのSDKのパスを追加する。
$ xcode-select --install $ xcrun --show-sdk-path /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk $ ls -l /Library/Developer/CommandLineTools/SDKs/ total 0 drwxr-xr-x 7 root wheel 224 7 23 08:49 MacOSX.sdk lrwxr-xr-x 1 root wheel 10 7 23 08:48 MacOSX10.14.sdk -&amp;gt; MacOSX.sdk $ ls /Library/Developer/CommandLineTools/SDKs/MacOSX.</description>
    </item>
    
  </channel>
</rss>
