<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vscode on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/vscode/</link>
    <description>Recent content in vscode on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 19 Jul 2020 19:34:04 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/vscode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VSCodeのRemote DeploymentでSageMakerのコンテナ環境でモデルを開発する</title>
      <link>https://www.sambaiz.net/article/289/</link>
      <pubDate>Sun, 19 Jul 2020 19:34:04 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/289/</guid>
      <description>SageMakerで学習させるモデルを開発するにあたって、Notebooks上ではコードを書きづらいのでVS Codeで書いているのだが、ローカルに依存パッケージをインストールして実行しているため それが実際の環境でも動くか保証できなくなっている。SageMakerが学習に用いるDockerコンテナにコピーして実行してみれば分かるわけだが、面倒だしデバッグも大変だ。
そんな場合に使えるのがVS CodeのRemote Development。 これはローカルのVS CodeからリモートのVS Code Serverに接続してその環境で開発することができるエクステンションで、 Dockerコンテナのほか、SSHでリモートマシンやVMに接続したり、WindowsならWSLにも接続できる。開発環境を揃えることができて便利だ。
SageMakerでPyTorchのモデルを学習させる - sambaiz-net
設定 .devcontainer/に次のファイルを置く。
Dockerfile aws/deep-learning-containersの Deep Learning Containers Imagesから選び、ECRからpullするため認証情報を登録しておく。
$ aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin https://763104351884.dkr.ecr.us-east-1.amazonaws.com これをベースに、開発用ツールを入れてVSCodeのDevelopment Container Scriptsを実行する。
$ cat .devcontainer/Dockerfile FROM 763104351884.dkr.ecr.us-east-1.amazonaws.com/pytorch-training:1.5.1-cpu-py36-ubuntu16.04 RUN conda install -y yapf flake8 mypy # VS Code Development Container Scripts # https://github.com/microsoft/vscode-dev-containers/tree/v0.128.0/script-library ARG INSTALL_ZSH=&amp;quot;true&amp;quot; ARG USERNAME=&amp;quot;vscode&amp;quot; ARG USER_UID=&amp;quot;1000&amp;quot; ARG USER_GID=&amp;quot;${USER_UID}&amp;quot; ARG UPGRADE_PACKAGES=&amp;quot;true&amp;quot; ARG COMMON_SCRIPT_SOURCE=&amp;quot;https://raw.githubusercontent.com/microsoft/vscode-dev-containers/master/script-library/common-debian.sh&amp;quot; ARG COMMON_SCRIPT_SHA=&amp;quot;dev-mode&amp;quot; # Configure apt and install packages RUN apt-get update \ &amp;amp;&amp;amp; export DEBIAN_FRONTEND=noninteractive \ &amp;amp;&amp;amp; apt-get -y install --no-install-recommends curl ca-certificates 2&amp;gt;&amp;amp;1 \ &amp;amp;&amp;amp; curl -sSL ${COMMON_SCRIPT_SOURCE} -o /tmp/common-setup.</description>
    </item>
    
    <item>
      <title>PoetryでPythonの依存パッケージを管理する</title>
      <link>https://www.sambaiz.net/article/288/</link>
      <pubDate>Sat, 18 Jul 2020 21:23:04 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/288/</guid>
      <description>Poetryは比較的新しいPythonの依存管理ツールで、 pipenvの依存解決に失敗することがある問題を解消したり、ライブラリを開発しやすくしたものらしい。 まだスターはpipenvの半分ほどだがバージョンもv1.0.0に到達したしpipenvよりも速くて安定しているという話もあるので使ってみる。
インストール pipでインストールした。ドキュメントによると依存が衝突する可能性があるとのことだったが、自分の環境では特に問題なかった。
$ pip install --user poetry $ poetry --version Poetry version 1.0.9 使い方 PEP 518で定義されている設定ファイルpyproject.tomlを置く。
$ cat pyproject.toml [tool.poetry] name = &amp;quot;poetry-demo&amp;quot; version = &amp;quot;0.1.0&amp;quot; description = &amp;quot;&amp;quot; authors = [&amp;quot;sambaiz &amp;lt;godgourd@gmail.com&amp;gt;&amp;quot;] [tool.poetry.dependencies] python = &amp;quot;^3.7&amp;quot; [build-system] requires = [&amp;quot;poetry&amp;gt;=0.12&amp;quot;] build-backend = &amp;quot;poetry.masonry.api&amp;quot; poetry addするとvenvがなければ作成してその中にパッケージをインストールしpyproject.tomlにも追加する。
$ poetry add pendulum Creating virtualenv poetry-demo-t1vYebNd-py3.7 in /Users/*****/Library/Caches/pypoetry/virtualenvs ... $ cat pyproject.toml ... [tool.poetry.dependencies] python = &amp;quot;^3.7&amp;quot; pendulum = &amp;quot;^2.1.1&amp;quot; poetry install でpyproject.</description>
    </item>
    
    <item>
      <title>MacのVSCodeでC&#43;&#43;を書く環境構築</title>
      <link>https://www.sambaiz.net/article/252/</link>
      <pubDate>Sat, 04 Jan 2020 01:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/252/</guid>
      <description>Extension  C/C++  を入れてHello Worldを書いたところ、stdio.hが見つからず#includeの行に赤線が付いた。
#include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;quot;Hello World!\n&amp;quot;); return 0; } Command Palletteから C/C++: Edit Configurations (JSON) を選ぶと .vscode/c_cpp_properties.json が生成されるので編集していく。
Xcode 10から/usr/includeにHeaderファイルが置かれなくなったようなのでincludePathにXcodeのSDKのパスを追加する。
$ xcode-select --install $ xcrun --show-sdk-path /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk $ ls -l /Library/Developer/CommandLineTools/SDKs/ total 0 drwxr-xr-x 7 root wheel 224 7 23 08:49 MacOSX.sdk lrwxr-xr-x 1 root wheel 10 7 23 08:48 MacOSX10.14.sdk -&amp;gt; MacOSX.sdk $ ls /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ | grep &amp;quot;stdio.h&amp;quot; _stdio.h stdio.h ついでにcompilerPathをclangにした。これはIntelliSenseをうまく働かせるための設定らしい。 clangはLLVMバックエンドのC/C++コンパイラで、Macだとgccコマンドもclangを指すようになっている。</description>
    </item>
    
  </channel>
</rss>