<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/node.js/</link>
    <description>Recent content in Node.js on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 23 Jul 2019 23:44:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lambda上でnpm installできるLayerを作った</title>
      <link>https://www.sambaiz.net/article/233/</link>
      <pubDate>Tue, 23 Jul 2019 23:44:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/233/</guid>
      <description>Lambda上でnpm installするためにnpmとnode, npmrc入りのLambda Layerを作った。 GitHubにある。
Lambda Layerでバイナリやライブラリを切り出す - sambaiz-net
まずは/usr/bin/npmをそのまま入れて実行してみた。
FROM lambci/lambda-base:build WORKDIR /opt RUN curl -sL https://rpm.nodesource.com/setup_12.x | bash - &amp;amp;&amp;amp; \ yum install -y nodejs &amp;amp;&amp;amp; \ mkdir bin &amp;amp;&amp;amp; \ cp /usr/bin/node bin/node &amp;amp;&amp;amp; \ cp /usr/bin/npm bin/ &amp;amp;&amp;amp; \ zip -yr /tmp/npm-layer.zip ./*  $ docker build -t npmbin . $ docker run npmbin cat /tmp/npm-layer.zip &amp;gt; npm-layer.zip &amp;amp;&amp;amp; unzip npm-layer.zip -d layer  相対パスでの参照に失敗したようだが対象のパスが見当たらない。
internal/modules/cjs/loader.js:628 throw err; ^ Error: Cannot find module &#39;.</description>
    </item>
    
    <item>
      <title>SlackのInteractive messagesでボタンの入力を受け付ける</title>
      <link>https://www.sambaiz.net/article/148/</link>
      <pubDate>Tue, 16 Jan 2018 21:59:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/148/</guid>
      <description>Interactive messages
まずはサーバーを用意する。コードはここにあって、 Interactive messagesのハンドリングはSlack公式のnode-slack-interactive-messagesを使っている。
app.use(&#39;/slack&#39;, slackMessages.expressMiddleware()); slackMessages.action(&#39;question_button&#39;, (payload) =&amp;gt; { let replacement = payload.original_message; replacement.text =`${payload.user.name} likes ${payload.actions[0].value}`; delete replacement.attachments[0].actions; return replacement; });  ボタンの表示はattachmentsを使う。
web.chat.postMessage(channelId, &#39;Question&#39;, { attachments: [ { text: &amp;quot;Which buttons do you like?&amp;quot;, color: &amp;quot;#f9a41b&amp;quot;, callback_id: &amp;quot;question_button&amp;quot;, actions: [ { name: &amp;quot;primary_button&amp;quot;, type: &amp;quot;button&amp;quot;, style: &amp;quot;primary&amp;quot;, text: &amp;quot;Primary&amp;quot;, value: &amp;quot;Primary Button&amp;quot;, }, { name: &amp;quot;normal_button&amp;quot;, type: &amp;quot;button&amp;quot;, text: &amp;quot;Normal&amp;quot;, value: &amp;quot;Normal Button&amp;quot; }, { name: &amp;quot;danger_button&amp;quot;, type: &amp;quot;button&amp;quot;, style: &amp;quot;danger&amp;quot;, text: &amp;quot;Danger&amp;quot;, value: &amp;quot;Danger Button&amp;quot;, confirm: { title: &amp;quot;Really?</description>
    </item>
    
    <item>
      <title>Athenaのmigrationやpartitionするathena-adminを作った</title>
      <link>https://www.sambaiz.net/article/145/</link>
      <pubDate>Sun, 24 Dec 2017 23:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/145/</guid>
      <description>https://github.com/sambaiz/athena-admin
AthenaはS3をデータソースとするマネージドなデータ分析基盤。Prestoベースで標準SQLを実行できる。
料金はスキャンしたデータ量にかかり、$5/TB。1MB切り上げで、10MB以下のクエリは10MBになる。 データ量に対してかなり安く使えるものの、フルスキャンしてしまうとBigQueryと同様にお金が溶けてしまうので、大抵はパーティションを切ることになるのだけど都度locationを指定してADD PARTITIONを実行するのは大変。さらにスキーマを変更するのにもALTER TABLE ADD COLUMNSなどはないのでテーブルを作り直すことになるが、当然パーティションも全部作り直すことになる。
ではどうしようもないかというとMSCK REPAIR TABLEというのがあって、 これはS3のObjectのdt=YYYY-MM-DDのようなkey=valueのprefixを認識してパーティションを作るもの。作り直す際もこれ1クエリで終わる。それなら最初からそういう風に置けばよいのではというところだけど、勝手にYYYY/MM/DD/HHのprefixを付けてしまうFirehoseのようなのもある。
今回作ったathena-adminは以下のような定義ファイルから、 パーティションのkey=valueのprefixが付くように置き換えたり、変更があったらmigrationする。 このファイルを書き換えるだけで基本的にどうにかなるし、バージョン管理すればテーブル定義の変更を追うことができる。
{ &amp;quot;general&amp;quot;: { &amp;quot;athenaRegion&amp;quot;: &amp;quot;ap-northeast-1&amp;quot;, &amp;quot;databaseName&amp;quot;: &amp;quot;aaaa&amp;quot;, &amp;quot;saveDefinitionLocation&amp;quot;: &amp;quot;s3://saveDefinitionBucket/aaaa.json&amp;quot; }, &amp;quot;tables&amp;quot;: { &amp;quot;sample_data&amp;quot;: { &amp;quot;columns&amp;quot;: { &amp;quot;user_id&amp;quot;: &amp;quot;int&amp;quot;, &amp;quot;value&amp;quot;: { &amp;quot;score&amp;quot;: &amp;quot;int&amp;quot;, &amp;quot;category&amp;quot;: &amp;quot;string&amp;quot; } /* &amp;quot;struct&amp;lt;score:int,category:string&amp;gt;&amp;quot; のように書くこともできる */ }, &amp;quot;srcLocation&amp;quot;: &amp;quot;s3://src/location/&amp;quot;, &amp;quot;partition&amp;quot;: { &amp;quot;prePartitionLocation&amp;quot;: &amp;quot;s3://pre/partition/&amp;quot;, /* optional */ &amp;quot;regexp&amp;quot;: &amp;quot;(\\d{4})/(\\d{2})/(\\d{2})/&amp;quot;, /* optional */ &amp;quot;keys&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;dt&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;string&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;{1}-{2}-{3}&amp;quot;, /* optional */ } ] } } } }  使い方はこんな感じ。使い方によってはmigrate()だけ呼ぶこともあると思う。 replaceObjects()にはmatchedHandlerというのを渡すこともできて、 UTCからJSTに変換するといったこともできる。</description>
    </item>
    
    <item>
      <title>ApexでデプロイしたLambdaのトリガーをTerraformで管理する</title>
      <link>https://www.sambaiz.net/article/144/</link>
      <pubDate>Sun, 12 Nov 2017 22:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/144/</guid>
      <description>Apexでfunctionをデプロイするとトリガーが登録されないのであとで追加することになる。 これを手作業で行うこともできるのだけど、せっかくなのでアプリケーションと一緒に管理したい。 そんなときのためにterraformコマンドをラップしたapex infraが用意されている。
TerraformでVPCを管理するmoduleを作る - sambaiz-net
functionsと同列にinfrastructureディレクトリを作成してtfファイルを置く。 その下に環境ごとのディレクトリを作成することもできて、その場合は--envで指定した環境のものが使われる。
- functions - infrastructure main.tf variables.tf - modules - cloudwatch_schedule main.tf variables.tf project.json  functionをデプロイするとそのARNが変数で取れるようになる。
$ apex list --tfvars apex_function_hello=&amp;quot;arn:aws:lambda:ap-northeast-1:*****:function:usetf_hello&amp;quot;  今回設定するトリガーはCloudwatch Eventのスケジューリング。作成するリソースは以下の通り。
 aws_cloudwatch_event_ruleでイベントルール(今回はschedule)を作成 aws_cloudwatch_event_targetでルールにターゲット(今回はLambda)を設定 aws_lambda_permissionでルールに対象Lambdaをinvokeする権限を付ける  $ cat infrastructure/modules/cloudwatch_schefule/variables.tf variable &amp;quot;lambda_function_name&amp;quot; {} variable &amp;quot;lambda_function_arn&amp;quot; {} variable &amp;quot;schedule_expression&amp;quot; { description = &amp;quot;cloudwatch schedule expression e.g. \&amp;quot;cron(0/5 * * * ? *)\&amp;quot;&amp;quot; } $ cat infrastructure/modules/cloudwatch_schefule/main.tf resource &amp;quot;aws_cloudwatch_event_rule&amp;quot; &amp;quot;lambda&amp;quot; { name = &amp;quot;lambda_rule_${var.</description>
    </item>
    
    <item>
      <title>JavaScriptのrequire/importの歴史</title>
      <link>https://www.sambaiz.net/article/143/</link>
      <pubDate>Sat, 11 Nov 2017 20:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/143/</guid>
      <description>scriptタグを並べる &amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;a.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;b.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt;  先に書かれたa.jsで定義された内容はb.jsで読むことができる。
$ cat a.js const a = &#39;a is defined&#39;; const divA = document.createElement(&#39;div&#39;); divA.textContent = (typeof b !== &#39;undefined&#39;) ? b : &#39;b is undefined&#39;; document.body.appendChild(divA); $ cat b.js const b = &#39;b is defined&#39;; const divB = document.createElement(&#39;div&#39;); divB.textContent = (typeof a !== &#39;undefined&#39;) ? a : &#39;a is undefined&#39;; document.body.appendChild(divB);  依存が増えてくると順番を考えるのが大変。さらにグローバルな名前空間を汚染してしまう。
b is undefined a is defined  AMDとCommonJS というのも、かつてのJSにはモジュールを読み込む仕組みがなかった。 そこで考えられたのがAMDやCommonJSというフォーマット。 AMD(Asynchronous module definition)はRequireJSによって提供されるrequire()で動的にscriptタグを埋める。CommonJSはNodeでもおなじみのrequire()で、これにWebpackを通して一つのファイルにまとめておく。同じ関数名が使われているが全くの別物。</description>
    </item>
    
    <item>
      <title>ApexでLambdaをデプロイする</title>
      <link>https://www.sambaiz.net/article/140/</link>
      <pubDate>Sun, 22 Oct 2017 16:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/140/</guid>
      <description>ApexでLambdaをデプロイする。 とても簡単に使えるし、変なこともしないので良い感じ。
Serverless Frameworkだとeventの設定までカバーできてより便利。
Serverless FrameworkでLambdaをデプロイする - sambaiz-net
インストール。ダウンロードして実行できるようにしている。
$ curl https://raw.githubusercontent.com/apex/apex/master/install.sh | sh   IAMFullAccess AWSLambdaFullAccess  を付けたIAMのプロファイルを登録しておく。
$ aws configure --profile apex $ aws configure list --profile apex Name Value Type Location ---- ----- ---- -------- profile apex manual --profile access_key ****************OVGQ shared-credentials-file secret_key ****************oi5t shared-credentials-file region ap-northeast-1 config-file ~/.aws/config  apex initしてnameとdescriptionを入れるとIAMが登録され、 ディレクトリ構造が作られる。
$ apex init --profile apex Project name: try-apex Project description: test [+] creating IAM try-apex_lambda_function role [+] creating IAM try-apex_lambda_logs policy [+] attaching policy to lambda_function role.</description>
    </item>
    
    <item>
      <title>Node.jsのコードをPrettierでフォーマットしてESLintにかける</title>
      <link>https://www.sambaiz.net/article/139/</link>
      <pubDate>Thu, 19 Oct 2017 00:35:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/139/</guid>
      <description>PrettierはJSやTSのコードフォーマッタで、 ReactやBabel、Yarnなどの開発にも使われている。
今回はPrettierでフォーマットしたものを eslint --fixするprettier-eslint-cliを使う。役割が被っているけどPrettierはeslint --fixよりも強力にフォーマットしてくれるようだ。
$ git init $ yarn add --dev eslint eslint-config-google prettier-eslint-cli husky lint-staged $ cat .eslintrc.js module.exports = { &amp;quot;extends&amp;quot;: &amp;quot;google&amp;quot;, &amp;quot;parserOptions&amp;quot;: { &amp;quot;ecmaVersion&amp;quot;: 2017, } };  対象のコードはこれ。
$ cat src/main.js /** * hoge function */ function hoge() { const f = (aaaaaaaaaaaaaaa, bbbbbbbbbb, ccccccccc, dddddddddddd, eeeeeeeeeeeeee) =&amp;gt; console.log(&#39;a&#39;); f(1, 2, 3, 4, 5); } hoge();  Prettierのドキュメントでも紹介されているようにlint-stagedを使うとCommit時にフォーマットし、Lintをかけることができる。
{ &amp;quot;scripts&amp;quot;: { &amp;quot;precommit&amp;quot;: &amp;quot;lint-staged&amp;quot;, &amp;quot;lint&amp;quot;: &amp;quot;eslint src&amp;quot;, &amp;quot;format&amp;quot;: &amp;quot;prettier-eslint --write \&amp;quot;src/**/*.</description>
    </item>
    
    <item>
      <title>Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った</title>
      <link>https://www.sambaiz.net/article/132/</link>
      <pubDate>Sun, 10 Sep 2017 23:45:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/132/</guid>
      <description>PuppeteerでHeadless Chromeを動かすコードを Lambda上で動かすStarter Kitを作った。
puppeteer-lambda-starter-kit
Chromeの準備 Puppeteerのインストール時に落としてくるChromeをLambda上で動かそうとしても Lambdaにないshared libraryに依存しているため失敗する。
error while loading shared libraries: libpangocairo-1.0.so.0: cannot open shared object file: No such file or directory  Lambda上でHeadless Chromeを動かす例がないか調べたらserverless-chromeというのがあって、 Headless用の設定でChromeをビルドしていた。 ほかにはchromelessというのもあるけど これはserverless-chromeに 依存している。 最小構成でPuppeteerを使いたかったので、今回はこれらを使わず一から作ることにした。
serverless-chromeにもビルドしたものが置いてあるが、少しバージョンが古いようだったので最新版でビルドした。 基本的には書いてある 通りやればうまくいく。他のプロセスとのshared memoryとして/dev/shmを使っているのを、/tmpに置き換える ようにしないと、実行時のpage.goto()でFailed Provisional Load: ***, error_code: -12になる。
ビルドしたheadless_shellには問題になった依存は含まれていないようだ。
$ ldd headless_shell linux-vdso.so.1 =&amp;gt; (0x00007ffcb6fed000) libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00007f5f17dbe000) libdl.so.2 =&amp;gt; /lib64/libdl.so.2 (0x00007f5f17bba000) librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00007f5f179b1000) libnss3.so =&amp;gt; /usr/lib64/libnss3.so (0x00007f5f17692000) libnssutil3.so =&amp;gt; /usr/lib64/libnssutil3.so (0x00007f5f17466000) libsmime3.</description>
    </item>
    
    <item>
      <title>Headless Chromeでファイルをダウンロードする</title>
      <link>https://www.sambaiz.net/article/131/</link>
      <pubDate>Sun, 03 Sep 2017 18:51:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/131/</guid>
      <description>Chrome DevTools Protocolに ExperimentalだけどPage.setDownloadBehavior というのがあったので、これを呼んでファイルをダウンロードしてみた。
今回は公式のDevToolsのNode API、Puppeteerを使うけど、 setDownloadBehaviorを送るAPIはまだなく、直接clientを取ってsendするので他のライブラリでもやることは変わらないと思う。 Puppeteerのインストールの際にChromiumも入る。setDownloadBehaviorは現行Chromeの60では対応していないようだけど、62が入ったのでなんとかなりそう。
$ yarn add puppeteer $ find . -name &amp;quot;*chrome*&amp;quot; ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac/Chromium.app/Contents/Versions/62.0.3198.0/Chromium Framework.framework/Versions/A/Resources/chrome_100_percent.pak ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac/Chromium.app/Contents/Versions/62.0.3198.0/Chromium Framework.framework/Versions/A/Resources/chrome_200_percent.pak  ちなみに、このChromeをLambda上で実行しようとすると失敗する。
Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った
ChromeでChromeをダウンロードしてみる。
const puppeteer = require(&#39;puppeteer&#39;), fs = require(&#39;fs&#39;); const headless = true, downloadPath = &#39;./Download&#39;; (async () =&amp;gt; { const browser = await puppeteer.launch({headless: headless}); const page = await browser.newPage(); await page._client.send( &#39;Page.setDownloadBehavior&#39;, {behavior : &#39;allow&#39;, downloadPath: downloadPath} ); await page.goto(&#39;https://www.google.co.jp/chrome/browser/desktop/index.html&#39;, {waitUntil: &#39;networkidle&#39;}); await page.</description>
    </item>
    
    <item>
      <title>Node.jsをTypeScriptで書く</title>
      <link>https://www.sambaiz.net/article/123/</link>
      <pubDate>Sat, 29 Jul 2017 19:34:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/123/</guid>
      <description>公式のTypeScript-Node-Starterから始めてもいいけど、依存が少し余分なので一から作ることにした。
コードはここ。
$ yarn add --dev typescript tslint tslint-microsoft-contrib jest ts-jest @types/jest  package.json scriptsとテストフレームワークJestの設定を追加。
{ &amp;quot;devDependencies&amp;quot;: { ... &amp;quot;typescript&amp;quot;: &amp;quot;^2.4.2&amp;quot; }, &amp;quot;scripts&amp;quot;: { &amp;quot;start&amp;quot;: &amp;quot;npm run build &amp;amp;&amp;amp; node dist/app.js&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;npm run lint &amp;amp;&amp;amp; tsc&amp;quot;, &amp;quot;test&amp;quot;: &amp;quot;jest --forceExit&amp;quot;, &amp;quot;lint&amp;quot;: &amp;quot;tslint -c tslint.json -p tsconfig.json --type-check&amp;quot; }, &amp;quot;jest&amp;quot;: { &amp;quot;transform&amp;quot;: { &amp;quot;^.+\\.ts$&amp;quot;: &amp;quot;./node_modules/ts-jest/preprocessor.js&amp;quot; }, &amp;quot;testRegex&amp;quot;: &amp;quot;/test/.*\\.test\\.(ts|js)$&amp;quot;, &amp;quot;moduleFileExtensions&amp;quot;: [ &amp;quot;ts&amp;quot;, &amp;quot;js&amp;quot; ], &amp;quot;testEnvironment&amp;quot;: &amp;quot;node&amp;quot; } }  tsconfig.json 公式のそのまま。</description>
    </item>
    
    <item>
      <title>Node.jsのStream API</title>
      <link>https://www.sambaiz.net/article/96/</link>
      <pubDate>Sat, 22 Apr 2017 19:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/96/</guid>
      <description>Stream APIとは NodeでStreamデータを扱うためのもの。 例えばサイズが大きいファイルの入出力をStreamとして扱うことでバッファを最小限にできる。
StreamはEventEmitterで、 Readable streamやWritable stream、ReadableとWritableを合わせたDuplex streamと Readしたものを加工してWriteするTransform streamの種類があり、 それぞれ特定の関数が実装されている必要がある。
Readable stream Readable streamにはflowingとpausedの 二つのモードがある。 最初はpausedモードで、readableになってからread()することで読むことができる。
const fs = require(&#39;fs&#39;); let readable = fs.createReadStream(&#39;sample.txt&#39;); var i = 0; readable.on(&#39;readable&#39;, () =&amp;gt; { let chunk; while (null !== (chunk = readable.read(10))) { console.log(`${i++}: ${chunk}`); } }); dable.on(&#39;end&#39;, () =&amp;gt; { console.log(&#39;end&#39;); });  $ cat sample.txt abcdefghijklmnopqrstuvwxyz 1234567890 あいうえお $ node main.js 0: abcdefghij 1: klmnopqrst 2: uvwxyz 123 3: 4567890 あい 4: うえお end  dataのイベントハンドラーを追加するか、後で書くpipeを使うとflowingモードになる。</description>
    </item>
    
    <item>
      <title>Nightmareでブラウザでの操作を自動化する</title>
      <link>https://www.sambaiz.net/article/90/</link>
      <pubDate>Wed, 29 Mar 2017 23:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/90/</guid>
      <description>最近、POSTWASHという洗濯代行サービスを使っている。 専用のカバンに詰めて集荷にきた人に渡すと、きれいに畳まれた洗濯ものが届く便利なサービスだ。 注文時にはWebのフォームから集荷、配達時間や支払い方法などを選ぶ必要があるんだけど、毎週のことなのでこれを自動化してみる。
ブラウザの操作を自動化するのにNightmareを使う。 Electronを使っていて、PahntomJSより2倍くらい速く、簡潔に書ける。
$ npm install nightmare  Nightmare()の引数にshow: trueを渡すとウィンドウが開いて実行し始める。 これで確認画面までいくのであとは注文ボタンを押すだけ。 ウィンドウが閉じないように最後にnightmare.end()を呼んでいない。
const co = require(&#39;co&#39;); const moment = require(&#39;moment&#39;) const jst = +9 const Nightmare = require(&#39;nightmare&#39;);	const nightmare = Nightmare({ show: true, waitTimeout: 3000, gotoTimeout: 3000 }); const loginID = process.env.LOGIN_ID; const loginPassword = process.env.LOGIN_PASSWORD; moment.locale(&#39;ja&#39;); const now = moment().utcOffset(jst) const dayAfterTomorrow = now.add(2, &#39;days&#39;).format(&amp;quot;YYYY年M月D日(ddd)&amp;quot;); const nextWeek = now.add(7, &#39;days&#39;).format(&amp;quot;YYYY年M月D日(ddd)&amp;quot;) console.log(`${dayAfterTomorrow}~${nextWeek}`); // IDとパスワードを入れてログイン const login = () =&amp;gt; nightmare .</description>
    </item>
    
    <item>
      <title>Node.jsでの文字コードの変換</title>
      <link>https://www.sambaiz.net/article/89/</link>
      <pubDate>Tue, 28 Mar 2017 21:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/89/</guid>
      <description>node-iconvを使う。
$ npm install iconv  SHIFT_JISからUTF-8への変換はこんな感じ。
const Iconv = require(&#39;iconv&#39;).Iconv; const before = new Buffer([ 0x8b, 0x8d, 0x8e, 0x4d, 0x26, 0x82, 0xb2, 0x94, 0xd1 ]); const iconv = new Iconv(&#39;SHIFT_JIS&#39;, &#39;UTF-8&#39;); console.log(`before: ${before.toString(&#39;hex&#39;)} ${before.toString()}`) const after = iconv.convert(before); console.log(`after: ${after.toString(&#39;hex&#39;)} ${after.toString()}`);  before: 8b8d8e4d2682b294d1 ���M&amp;amp;���� after: e7899be79abf26e38194e9a3af 牛皿&amp;amp;ご飯  文字コードによっては変換後に表せないことがある。 例えば、UTF-8からSHIFT_JISへの変換でサロゲートペア🍚を渡すと変換できず、エラーになる。
throw errnoException(&#39;EILSEQ&#39;, &#39;Illegal character sequence.&#39;);  //IGNOREを付けることで そのような文字があった場合でもエラーにしないようにできる。
const Iconv = require(&#39;iconv&#39;).Iconv; const before = &amp;quot;牛皿&amp;amp;🍚&amp;quot;; const iconv = new Iconv(&#39;UTF-8&#39;, &#39;SHIFT_JIS//IGNORE&#39;); console.</description>
    </item>
    
    <item>
      <title>Moment.jsでNode.jsのDateを任意のフォーマットの文字列にする</title>
      <link>https://www.sambaiz.net/article/79/</link>
      <pubDate>Mon, 06 Mar 2017 20:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/79/</guid>
      <description>Moment.js
相対時間(5 years ago)を出したり、日付の計算(add(3, &#39;days&#39;))もできる便利なライブラリ。 ブラウザでも使える。
$ npm install moment  const moment = require(&#39;moment&#39;) const jst = +9 let now = moment().utcOffset(jst).format(&amp;quot;YYYY-MM-DD HH:mm:ss.SSSZ&amp;quot;); console.log(now);  $ TZ=Africa/Ouagadougou node main.js  mutableなのでadd()などの操作で元の値が変わってしまうのに注意。 変わると困る場合clone()する必要がある。
let now2 = moment(); let now3 = now2.clone(); console.log(now2); console.log(now2.add(1, &#39;days&#39;)); console.log(now2); console.log(now3);  </description>
    </item>
    
    <item>
      <title>Node.jsのバージョン管理</title>
      <link>https://www.sambaiz.net/article/8/</link>
      <pubDate>Fri, 15 Jul 2016 19:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/8/</guid>
      <description>n nodeが必要だけど手軽。
n latest, n stable, n ltsでバージョンが切り替わる。 バージョンを指定する場合、n &amp;lt;version&amp;gt;でインストールし、nでインストールされているバージョンの一覧から選択できる。 バージョンの削除はn - &amp;lt;version&amp;gt;。
$ npm install -g n $ n stable $ node -v v6.2.2  nvm nodeが必要ない。
$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash $ nvm install node $ node -v v7.7.2 $ nvm install 6 $ node -v v6.10.0 $ nvm ls v6.10.0 -&amp;gt; v7.7.2 default -&amp;gt; node (-&amp;gt; v7.7.2) node -&amp;gt; stable (-&amp;gt; v7.7.2) (default) stable -&amp;gt; 7.</description>
    </item>
    
  </channel>
</rss>