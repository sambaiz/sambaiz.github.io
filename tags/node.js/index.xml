<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>node.js on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/node.js/</link>
    <description>Recent content in node.js on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 23 Jul 2019 23:44:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lambda上でnpm installできるLayerを作った</title>
      <link>https://www.sambaiz.net/article/233/</link>
      <pubDate>Tue, 23 Jul 2019 23:44:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/233/</guid>
      <description>Lambda上でnpm installするためにnpmとnode, npmrc入りのLambda Layerを作った。 GitHubにある。 Lambda Lay</description>
    </item>
    
    <item>
      <title>SlackのInteractive messagesでボタンの入力を受け付ける</title>
      <link>https://www.sambaiz.net/article/148/</link>
      <pubDate>Tue, 16 Jan 2018 21:59:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/148/</guid>
      <description>Interactive messages まずはサーバーを用意する。コードはここにあって、 Interactive messagesのハンドリングはSlack公式のnode-slack-interact</description>
    </item>
    
    <item>
      <title>Athenaのmigrationやpartitionするathena-adminを作った</title>
      <link>https://www.sambaiz.net/article/145/</link>
      <pubDate>Sun, 24 Dec 2017 23:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/145/</guid>
      <description>https://github.com/sambaiz/athena-admin AthenaはS3をデータソースとするマネージドなデータ分析基盤。Prestoベースで標準SQLを実行できる。 料金はスキャンしたデータ量に</description>
    </item>
    
    <item>
      <title>ApexでデプロイしたLambdaのトリガーをTerraformで管理する</title>
      <link>https://www.sambaiz.net/article/144/</link>
      <pubDate>Sun, 12 Nov 2017 22:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/144/</guid>
      <description>Apexでfunctionをデプロイするとトリガーが登録されないのであとで追加することになる。 これを手作業で行うこともできるのだが、せっかく</description>
    </item>
    
    <item>
      <title>JavaScriptのrequire/importの歴史</title>
      <link>https://www.sambaiz.net/article/143/</link>
      <pubDate>Sat, 11 Nov 2017 20:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/143/</guid>
      <description>scriptタグを並べる &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;a.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;b.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 先に書かれたa.jsで定義された内容はb.jsで読むことができる。 $ cat a.js const a = &amp;#39;a is defined&amp;#39;; const divA = document.createElement(&amp;#39;div&amp;#39;); divA.textContent = (typeof b !== &amp;#39;undefined&amp;#39;)</description>
    </item>
    
    <item>
      <title>ApexでLambdaをデプロイする</title>
      <link>https://www.sambaiz.net/article/140/</link>
      <pubDate>Sun, 22 Oct 2017 16:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/140/</guid>
      <description>ApexでLambdaをデプロイする。 とても簡単に使えるし、変なこともしないので良い感じ。 Serverless Frameworkだとeventの設定までカバー</description>
    </item>
    
    <item>
      <title>Node.jsのコードをPrettierでフォーマットしてESLintにかける</title>
      <link>https://www.sambaiz.net/article/139/</link>
      <pubDate>Thu, 19 Oct 2017 00:35:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/139/</guid>
      <description>PrettierはJSやTSのコードフォーマッタで、 ReactやBabel、Yarnなどの開発にも使われている。 今回はPrettierでフォ</description>
    </item>
    
    <item>
      <title>Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った</title>
      <link>https://www.sambaiz.net/article/132/</link>
      <pubDate>Sun, 10 Sep 2017 23:45:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/132/</guid>
      <description>PuppeteerでHeadless Chromeを動かすコードを Lambda上で動かすStarter Kitを作った。 puppeteer-lambda-starter-kit Chromeの準備 Pu</description>
    </item>
    
    <item>
      <title>Headless Chromeでファイルをダウンロードする</title>
      <link>https://www.sambaiz.net/article/131/</link>
      <pubDate>Sun, 03 Sep 2017 18:51:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/131/</guid>
      <description>Chrome DevTools Protocolに ExperimentalだがPage.setDownloadBehavior というのがあったので、これを呼んでファイル</description>
    </item>
    
    <item>
      <title>Node.jsをTypeScriptで書く</title>
      <link>https://www.sambaiz.net/article/123/</link>
      <pubDate>Sat, 29 Jul 2017 19:34:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/123/</guid>
      <description>公式のTypeScript-Node-Starterから始めてもいいが、依存が少し余分なので一から作ることにした。 コードはここ。 $ yarn add --dev typescript tslint</description>
    </item>
    
    <item>
      <title>Node.jsのStream API</title>
      <link>https://www.sambaiz.net/article/96/</link>
      <pubDate>Sat, 22 Apr 2017 19:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/96/</guid>
      <description>Stream APIとは NodeでStreamデータを扱うためのもの。 例えばサイズが大きいファイルの入出力をStreamとして扱うことでバッファを最小限</description>
    </item>
    
    <item>
      <title>Nightmareでブラウザでの操作を自動化する</title>
      <link>https://www.sambaiz.net/article/90/</link>
      <pubDate>Wed, 29 Mar 2017 23:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/90/</guid>
      <description>最近、POSTWASHという洗濯代行サービスを使っている。 専用のカバンに詰めて集荷にきた人に渡すと、きれいに畳まれた洗濯ものが届く便利なサー</description>
    </item>
    
    <item>
      <title>Node.jsでの文字コードの変換</title>
      <link>https://www.sambaiz.net/article/89/</link>
      <pubDate>Tue, 28 Mar 2017 21:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/89/</guid>
      <description>node-iconvを使う。 $ npm install iconv SHIFT_JISからUTF-8への変換はこんな感じ。 const Iconv = require(&amp;#39;iconv&amp;#39;).Iconv; const before = new Buffer([ 0x8b, 0x8d, 0x8e, 0x4d, 0x26, 0x82, 0xb2, 0x94, 0xd1 ]); const iconv = new Iconv(&amp;#39;SHIFT_JIS&amp;#39;, &amp;#39;UTF-8&amp;#39;);</description>
    </item>
    
    <item>
      <title>Moment.jsでNode.jsのDateを任意のフォーマットの文字列にする</title>
      <link>https://www.sambaiz.net/article/79/</link>
      <pubDate>Mon, 06 Mar 2017 20:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/79/</guid>
      <description>Moment.js 相対時間(5 years ago)を出したり、日付の計算(add(3, &#39;days&#39;))もできる便利なライブラリ。 ブラウザでも使える。 $ npm install moment const moment = require(&amp;#39;moment&amp;#39;) const</description>
    </item>
    
    <item>
      <title>Node.jsのバージョン管理</title>
      <link>https://www.sambaiz.net/article/8/</link>
      <pubDate>Fri, 15 Jul 2016 19:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/8/</guid>
      <description>n nodeが必要だが手軽。 n latest, n stable, n ltsでバージョンが切り替わる。 バージョンを指定する場合、n &amp;lt;version&amp;gt;でインストール</description>
    </item>
    
  </channel>
</rss>
