<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hololens on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/hololens/</link>
    <description>Recent content in hololens on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 16 Jul 2017 23:32:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/hololens/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HoloLensでのUnityアプリケーションのフレームレート</title>
      <link>https://www.sambaiz.net/article/120/</link>
      <pubDate>Sun, 16 Jul 2017 23:32:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/120/</guid>
      <description>HoloLensディスプレイのフレームレート HoloLensのディスプレイは60fpsでリフレッシュされるので、アプリケーションもこれに合わせて60fps、 つまり16msごとにOSにイメージを渡せるのがベスト。 ただし、安定して60fpsが実現できないような重いアプリケーションの場合、 変動してしまうよりは下げて安定させる方が良い。
フレームレートはDevice Portalから確認することができ、キャプチャする際は30fpsに制限される。
Unityアプリケーションのフレームレート Unityでのフレームレートは Application.targetFrameRate で設定できる。デフォルト値は-1で、その場合プラットフォームごとのデフォルト設定が使われる。 何も設定しない状態でHoloLensで動かしたところ60fpsになった。
Debugビルドでのフレームレートの低下 DebugビルドだとSpace Robot Kyle だけ描画するだけでもフレームレートが20まで下がってしまった。
HoloLensで剣振ってみた - sambaiz-net
DebugビルドだったのをRelasseビルドに変えたら60fpsになった。 Relaseビルドではコードの最適化にチェックが入っていたりするんだけど、 その辺りを外してみても特に変わらなかったのでそれではないらしい。</description>
    </item>
    
    <item>
      <title>HoloLensで剣振ってみた</title>
      <link>https://www.sambaiz.net/article/119/</link>
      <pubDate>Sun, 09 Jul 2017 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/119/</guid>
      <description>かつてCardboardでやったようにHoloLensでも剣を振ってみた。
剣を振るVRゲームを作った - sambaiz-net
剣を振ってロボットに当てると爆発する。
動画
剣の方は前回と同じくiOSアプリから傾きをBLEで送信している。今回は傘がなかったのでペットボトルにくくりつけた。
HoloLensのアプリの方はUWPのネイティブプラグインを作った。 Creater&amp;rsquo;s UpdateのAPIがまだ使えなかったので一つ前のAPIを使ってビルドしている。 なお、ペアリングはアプリ内ではなくOSの設定画面から行なっている。 エラーについては原因が分からずハンドリングできていないものもあるけど、つなぎ直すと大抵どうにかなった。 つなぎ直す際はHoloLens側だけではなくiOS側の方の設定も削除する。
Unity/UWPでBLEを扱うプラグインを作る - sambaiz-net
ロボットを小さくしているのは近づいても視野角に収まるようにするため。 小さいとどこにいるか分からないので目印を出したほうが良い。 近接武器じゃなきゃ敵に近づかなくてよくなるのでましになるかも。
上の動画を見れば分かるように、全体的に動きが重くて素でframerateが20ぐらいしか出ていない。 これはReleaseビルドにすると改善された。
HoloLensでのUnityアプリケーションのフレームレート - sambaiz-net</description>
    </item>
    
    <item>
      <title>HoloLensのSpartial MappingでNavMeshを生成してランダムにAgentを出現・移動させる</title>
      <link>https://www.sambaiz.net/article/118/</link>
      <pubDate>Sun, 02 Jul 2017 23:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/118/</guid>
      <description>Unity 5.6.2f1 HoloToolkit v1.5.7.0 Unity 5.6から動的にNavMeshを生成できるようになったので HoloLensのSpartial MappingしたものをNavMeshにしてAgentを動かしてみる。
Unityで動的にNavMeshを生成する - sambaiz-net
Spartial MappingしたものをNavMeshにするのは以下の記事のスクリプトを使った。
HoloLens の空間マップで NavMesh を使ってみる - たるこすの日記
Unity-Technologies/NavMeshComponentsから LocalNavMeshBuilderとNavMeshSourceTagを持ってきてLocalNavMeshBuilderのObjectを置いておき、 Spartial MappingしたものにNavMeshSourceTagを付けられればExampleと同様にNavMeshにできる。 そこで、このスクリプトではSpatialMappingSourceを取得し、イベントハンドラでNavMeshSourceTagが追加されるようにしている。
using HoloToolkit.Unity.SpatialMapping; using UnityEngine; using HoloToolkit.Unity; public class SpatialMappingNavMesh : MonoBehaviour { public GameObject SpatialMapping; private void Awake() { var spatialMappingSources = SpatialMapping.GetComponents&amp;lt;SpatialMappingSource&amp;gt;(); foreach (var source in spatialMappingSources) { source.SurfaceAdded += SpatialMappingSource_SurfaceAdded; source.SurfaceUpdated += SpatialMappingSource_SurfaceUpdated; } } private void SpatialMappingSource_SurfaceAdded(object sender, DataEventArgs&amp;lt;SpatialMappingSource.SurfaceObject&amp;gt; e) { e.Data.Object.AddComponent&amp;lt;NavMeshSourceTag&amp;gt;(); } private void SpatialMappingSource_SurfaceUpdated(object sender, DataEventArgs&amp;lt;SpatialMappingSource.</description>
    </item>
    
    <item>
      <title>Unity/UWPでBLEを扱うプラグインを作る</title>
      <link>https://www.sambaiz.net/article/105/</link>
      <pubDate>Sun, 04 Jun 2017 11:57:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/105/</guid>
      <description>コードはここ
この動画の 50:00あたりから説明があるように、 ビルドされたWSAが読むUWPのdllのほかに、 Unityエディタ上から読むための.NET Framework3.5のdllを用意する。 こうすることで実行環境ごとの違いをUnityコード上で気にしなくてもよくなる。
新しいプロジェクトで
  Visual C# から.NET Framework 3.5にしてクラスライブラリ(.NET Framework)
  Visual C# -&amp;gt; Windows -&amp;gt; ユニバーサルからクラスライブラリ(ユニバーサルWindows)
  の2つのプロジェクトを同じソリューションに作成する。 VS2017で.NET Frameworkのクラスライブラリプロジェクトを作成するためには Visual Studio Installerで.NET Coreのワークロードをインストールする必要がある。 また、これとは別に動作確認用のUWPアプリケーションプロジェクトを作成した。
UWPの方のプロジェクトにあるClass1.csを削除し、追加 -&amp;gt; 既存の項目から、 もう片方のClass1.csをリンクとして追加して、この共通のcsにUWPのコードを書いていくんだけど、 そのまま書くと当然.NET Frameworkの方でビルドできないので 実装部分を#if WINDOWS_UWP ~ #endif で囲む。UWPの方のプロジェクトにはプロパティ -&amp;gt; ビルドの条件付きコンパイルにWINDOWS_UWPが含まれているので有効になる。
public void Start() { #if WINDOWS_UWP  ... #endif } UWPでBLEを扱うのは前書いた通り。 ただし、なぜかXAMLに依存しているようでD3Dビルドすると失敗する。
UWPでBLEデバイスとペアリングして値を取得する - sambaiz-net
ビルドするとdllができるので.NET Frameworkの方をAssets/Pluginsに置いてInspectorからEditorにだけチェックを入れる。 UWPの方はAssets/Plugins/WSAに置くとWSA Playerにだけチェックが入る。
あとは普通にusingして使うだけ。Edit-&amp;gt;Project Settings-&amp;gt;PlayerからBluetoothのcapabilityを有効にするのを忘れずに。 Package.appxmanifestは上書きされないようなので前にビルドしたやつがあったら一旦消す。
using UnityBLE; public class BLE : MonoBehaviour { string value = &amp;#34;no connection&amp;#34;; public GameObject text; private string serviceUUID = &amp;#34;***&amp;#34;; private string characteristicUUID = &amp;#34;***&amp;#34;; void Start() { var ble = new UnityBLE.</description>
    </item>
    
    <item>
      <title>HoloLensのSharing</title>
      <link>https://www.sambaiz.net/article/88/</link>
      <pubDate>Sat, 25 Mar 2017 22:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/88/</guid>
      <description>HoloToolkit-Unity v1.5.5.0  サーバー SharingService.exeを ここ からとってきて実行する。開発に使っているHoloToolkitと同じリリースバージョンのものを使う。
&amp;gt; SharingService.exe -local ... SharingService: Listening for session list connections on port 20602 of all network devices of the local machine. SharingService: Local IP addresses are: SharingService: xxx.xxx.xxx.xxx SharingService: Created Session &amp;#34;Default&amp;#34; with ID 0 on port 20601 今日のTokyo Hololens Meetup Vol.2の開発者セッションで、 ちょうどSharingの話があったのだけれど、残念ながら先着順で出遅れて聞けなかった。
Tweetを見る限りだとカスタマイズできず、スケーリングできないSharingService.exeは使わずに MagicOnionというのを自前で作ったらしい。
Tokyo Hololens MeetuUp Vol.2 Session5 #HoloLensJP #TMCN - Togetterまとめ
クライアント Assets/HoloToolkit/Sharing/TestsのSceneで試してみる。
以下のcapabilitiesを設定し、
 SpatialPerception InternetClient  SharingのServer Addressを設定してビルド。ほかにはこんな設定がある。</description>
    </item>
    
    <item>
      <title>HoloLensでGaze, Click, Hold, Voiceイベントを拾う</title>
      <link>https://www.sambaiz.net/article/57/</link>
      <pubDate>Sun, 05 Feb 2017 20:01:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/57/</guid>
      <description>こんなの。SparitalMappingを有効にしているので球が床で止まっている。
動画
HoloToolKit のインタフェースを実装することでイベントを拾えるようになっている。
IFocusable Gazeしたとき。
public void OnFocusEnter（） { gazing = true; } public void OnFocusExit() { gazing = false; } IInputClickHandler クリックしたとき。
public void OnInputClicked(InputEventData eventData) { if (!clicked) { clicked = true; clickedRotationFrame = 0; } countUp(); } IHoldHandler Hold(指を下げたまま維持する)したとき。 指を上げたときがCompletedで、Objectを外れたときCanceledになる。
public void OnHoldStarted(HoldEventData eventData) { holding = true; clicked = true; } public void OnHoldCompleted(HoldEventData eventData) { holding = false; } public void OnHoldCanceled(HoldEventData eventData) { holding = false; } ISpeechHandler 声の入力。 InspectorからSpeech Input Source(Script)を追加して反応するキーワードを設定して使う。 MicrophoneのCapabilitiesが必要。</description>
    </item>
    
    <item>
      <title>HoloLensの開発を始める</title>
      <link>https://www.sambaiz.net/article/56/</link>
      <pubDate>Sat, 04 Feb 2017 21:28:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/56/</guid>
      <description>HoloLensでのアプリケーション https://developer.microsoft.com/en-us/windows/holographic/app_model
ある点を見るGazeと指で選択するGesture、声で入力するVoiceで操作する。
HoloLens shell では壁などにタイルを配置することでアプリケーションが起動する。
一度に動くアプリケーションは一つ。 他にアクティブなアプリケーションがあれば中断され、タイルは最後の状態のスクリーンショットになる。 タイルを削除するとプロセスが終了する。
Viewには空間全体を使うHolographic Viewと、通常のウィンドウのような2D Viewがある。
開発を始める Unityを使ってHolographic Viewのアプリケーションを開発する。
必要なツールをインストールする。エミュレーターは空きメモリが2GB以上ないと立ち上がらない。
https://developer.microsoft.com/en-us/windows/holographic/install_the_tools
チュートリアル https://developer.microsoft.com/en-us/windows/holographic/holograms_100
QualityのところでWindows Storeのマークがなかったら、 UnityのFile-&amp;gt;Build SettingsからWindows Storeモジュールをダウンロードする。
https://developer.microsoft.com/en-us/windows/holographic/holograms_101e
エミュレーターはWASDキーで移動してカーソルキーで向きを変え、エンターキーで選択できる。
エミュレーターで動かしてみる UnityProjectを作成してHolograms 100のように設定していく。
まずはCamera。
 Position: (0,0,0) Clear Flags: Solid Color Background: (0,0,0,0) Clipping Planes Near: 0.85  とりあえず動くことを確認するため適当なオブジェクトを置いてビルドしてみる。
Edit-&amp;gt;Project Settings-&amp;gt;QualityでWindows StoreをFastestにする。
Build Settings-&amp;gt;Windows Storeで
 SDK: Universal: 10 Target device: HoloLens UWP Build Type: D3D Unity C# Projectにチェック  にする。
BuildSettingsにあるPlayer Settingsボタンを押して Other SettingsのVirtual Reality Supportedにチェックを入れ、 SDKsにWindows Holographicが出るのを確認する。</description>
    </item>
    
  </channel>
</rss>
