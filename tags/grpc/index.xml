<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grpc on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/grpc/</link>
    <description>Recent content in Grpc on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Fri, 29 Jul 2016 22:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Googleが作ったRPCフレームワークgRPCを使ってみた</title>
      <link>https://www.sambaiz.net/article/12/</link>
      <pubDate>Fri, 29 Jul 2016 22:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/12/</guid>
      <description>A high performance, open source, general RPC framework that puts mobile and HTTP/2 first.
 What is gRPC? gRPCを使うと、クライアントアプリケーションは直接、ローカルのオブジェクトのように、他のマシンのサーバーアプリケーションのメソッドを呼ぶことができ、 分散したアプリケーションやサービスを簡単に作ることができる。 多くのRPCシステムと同様に、gRPCはサービスを定義し、リモートから呼べるメソッドと、そのパラメーターおよび返り値の型を記述するようになっている。 サーバーサイドではインタフェースを実装し、クライアントからの呼び出しをハンドリングするgRPCサーバーを実行する。 クライアントサイドでは、サーバーと同じメソッドを提供するスタブを持っている。
gRPCクライアントとサーバーは様々な環境同士でやり取りすることができ、いくつもの言語でサポートされている。 そのため、例えば、gRPCサーバーをJavaで、クライアントをGoやPython、Rubyで作るのも簡単だ。 加えて、最新のGoodle APIにはgRPCのインタフェースが存在するので、これらをアプリケーションに組み込むのも容易にできる。
Protobuf デフォルトではgRPCはprotobuf(protocol buffers)を使う。 protobufというのは、 Googleによるオープンソースの、構造化されたデータをシリアライズするメカニズムだ。
今回作るのは、同じ文字列を返すだけのEchoサーバーで、コードはここにある。 以下のprotoファイルでは、EchoというサービスはRetEchoというメソッドを含み、 これは文字列sayを含むEchoRequestに対して、文字列retを含むEchoReplyを返すということを表している。
syntax = &amp;quot;proto3&amp;quot;; option java_package = &amp;quot;net.sambaiz.trygrpc.protos&amp;quot;; package protos; service Echo { rpc RetEcho (EchoRequest) returns (EchoReply) {} } message EchoRequest { string say = 1; } message EchoReply { string ret = 1; }  これをprotocでコンパイルするとecho.</description>
    </item>
    
  </channel>
</rss>