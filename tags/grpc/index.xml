<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grpc on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/grpc/</link>
    <description>Recent content in Grpc on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 26 Jun 2018 23:50:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GoのgRPC ServerのInterceptor(recovery/auth/zap/prometheus)</title>
      <link>https://www.sambaiz.net/article/174/</link>
      <pubDate>Tue, 26 Jun 2018 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/174/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go&#34;&gt;grpc-go&lt;/a&gt;はInterceptor(Middleware)でhandlerの前後で処理を行うことができる。&#xA;UnaryとStreamで&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/interceptor.go#L60&#34;&gt;シグネチャ&lt;/a&gt;が異なる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; UnaryServerInterceptor &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UnaryServerInfo, handler UnaryHandler) (resp &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, err &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; StreamServerInterceptor &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(srv &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, ss ServerStream, info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;StreamServerInfo, handler StreamHandler) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;UnaryServerInterceptor&lt;/span&gt;(opts &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;Option) grpc.UnaryServerInterceptor {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, err &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        resp, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handler&lt;/span&gt;(newCtx, req)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(resp)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; resp, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今回は良く使う&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware&#34;&gt;go-grpc-middleware&lt;/a&gt;の&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware/tree/master/recovery&#34;&gt;recovery&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware/tree/master/auth&#34;&gt;auth&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware/tree/master/logging/zap&#34;&gt;zap&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-prometheus&#34;&gt;prometehus&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Interceptorの挙動を確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Googleが作ったRPCフレームワークgRPCを使ってみた</title>
      <link>https://www.sambaiz.net/article/12/</link>
      <pubDate>Fri, 29 Jul 2016 22:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/12/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;A high performance, open source, general RPC framework that puts mobile and HTTP/2 first.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;what-is-grpc&#34;&gt;&lt;a href=&#34;http://www.grpc.io/docs/#what-is-grpc&#34;&gt;What is gRPC?&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;gRPCを使うと、クライアントアプリケーションは直接ローカルのオブジェクトのように、他のマシンのサーバーアプリケーションのメソッドを呼ぶことができ、&#xA;分散したアプリケーションやサービスを簡単に作ることができる。&#xA;多くのRPCシステムと同様にgRPCはサービスを定義し、リモートから呼べるメソッドとそのパラメーターおよび返り値の型を記述するようになっている。&#xA;サーバーサイドではインタフェースを実装し、クライアントからの呼び出しをハンドリングするgRPCサーバーを実行する。&#xA;クライアントサイドではサーバーと同じメソッドを提供するスタブを持っている。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
