<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/github/</link>
    <description>Recent content in github on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 22 Nov 2020 01:25:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub ActionsのDocker container actionを作る</title>
      <link>https://www.sambaiz.net/article/310/</link>
      <pubDate>Sun, 22 Nov 2020 01:25:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/310/</guid>
      <description>GitHub ActionsのActionにはランナーで直接実行されるJavaScript actionと、Docker container action、複数のステップをまとめたComposite run steps actionがある。 Docker container actionは環境を固定できるが、イメージを取得する分JavaScript actionと比べて時間がかかり、DockerがインストールされているLinuxでしか使えない。 今回はこのDocker container actionを作って動かしてみる。
Dockerfileとメタデータのaction.ymlを用意する。 using: &#39;docker&#39; にするとDocker container actionになる。
::set-output name={name}::{value}の文字列をstdoutに出力するとoutputsのパラメータに値がセットされる。
$ cat Dockerfile FROM alpine:20200917 ENTRYPOINT [&amp;#34;echo&amp;#34;, &amp;#34;::set-output name=return-json::&amp;#34;] $ cat action.yml name: &amp;#39;sambaiz-test-docker-github-action&amp;#39; description: &amp;#39;Echo your word&amp;#39; inputs: i-say: description: &amp;#39;What do you say?&amp;#39; required: true default: &amp;#39;{}&amp;#39; outputs: return-word: description: &amp;#39;return word you said&amp;#39; runs: using: &amp;#39;docker&amp;#39; image: &amp;#39;Dockerfile&amp;#39; args: - ${{ inputs.i-say }} usesにはリポジトリではなくパスを渡すこともできるので、次のようなワークフローで試しに実行できる。</description>
    </item>
    
    <item>
      <title>GitHub ActionsでPRのコメントに返事を返すbotを動かす</title>
      <link>https://www.sambaiz.net/article/308/</link>
      <pubDate>Tue, 10 Nov 2020 09:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/308/</guid>
      <description>APIトークン コメントを投稿するAPIを呼ぶためにトークンが必要だが、GitHub Actionsのジョブの実行中有効なGitHub Appトークンが自動生成され、${{secrets.GITHUB_TOKEN}}で参照できるのでこれを使う。 このトークンによるイベントではワークフローが発火しないので無限ループの心配がない。
AWS SAMとGoでPRのコメントに対して返事を返すGitHub Appを作る - sambaiz-net
リポジトリに対して大方の権限は付いているが、フォークしたリポジトリからはreadしかできないようになっている。
actions/github-script octokit/core.jsを用いたGitHub APIを呼ぶスクリプトを実行できるAction。 直接ワークフローファイルに書くこともできるが、別のファイルに分けている。
containsで hey botという文字列が含まれるときのみジョブを実行するようにしている。
name: echo-bot on: issue_comment: types: [created] jobs: echo-bot: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/github-script@v2 if: ${{ contains(github.event.comment.body, &amp;#39;hey bot&amp;#39;) }} with: github-token: ${{secrets.GITHUB_TOKEN}} script: | const script = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/script.js`) script({github, context}) $ cat .github/workflows/script.js module.exports = ({github, context}) =&amp;gt; { github.issues.createComment({ issue_number: context.payload.issue.number, owner: context.payload.repository.owner.login, repo: context.payload.repository.name, body: `You said ${context.</description>
    </item>
    
    <item>
      <title>GitHub Actionsのself-hosted runner</title>
      <link>https://www.sambaiz.net/article/307/</link>
      <pubDate>Sat, 07 Nov 2020 13:04:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/307/</guid>
      <description>GitHub Actionsのself-hosted runnerは GitHubがホストする環境以外でジョブを実行できる機能。 権限やネットワークなどの都合で特定の環境でしか実行できない処理を行うことができ、GitHubへロングポーリングしてジョブを待ち構えるのでwebhookのように外からアクセスできるようにする必要がない。 実行時間やストレージによる料金は発生しない。
self-hosted runnerは単一リポジトリだけではなくOrganization、Enterprise単位でも追加できる。Settings-&amp;gt;ActionsからAdd runnerするとOS/アーキテクチャごとのself-hosted runner アプリケーションのインストールコマンドが出てくるので実行する。アップデートは自動で行われ、失敗し続けてバージョンが古くなるとジョブが実行できなくなる。
Dockerで動かす。
$ cat Dockerfile FROMdebian:buster ARG USERNAME=user ARG USER_UID=1000 ARG USER_GID=$USER_UID ARG APP_VERSION=2.273.6 RUN groupadd --gid $USER_GID $USERNAME \  &amp;amp;&amp;amp; useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \  &amp;amp;&amp;amp; apt-get update \  &amp;amp;&amp;amp; apt-get install -y sudo \  &amp;amp;&amp;amp; echo $USERNAME ALL=\(root\) NOPASSWD:ALL &amp;gt; /etc/sudoers.d/$USERNAME \  &amp;amp;&amp;amp; chmod 0440 /etc/sudoers.d/$USERNAME USER$USERNAME WORKDIR/home/$USERNAME RUN sudo apt-get install -y curl &amp;amp;&amp;amp; \  mkdir actions-runner &amp;amp;&amp;amp; cd actions-runner &amp;amp;&amp;amp; \  curl -O -L https://github.</description>
    </item>
    
    <item>
      <title>AWS SAMとGoでPRのコメントに対して返事を返すGitHub Appを作る</title>
      <link>https://www.sambaiz.net/article/231/</link>
      <pubDate>Fri, 19 Jul 2019 21:21:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/231/</guid>
      <description>GitHub Appはリポジトリにインストールできるアプリケーションで、 Access TokenやOAuth Appと異なり ユーザーとは独立した権限を与えて実行することができる。
今回はPRの特定のコメントに反応して返事を返すAppを作る。
AWS SAMでデプロイする。全体のコードはGitHubにある。
AWS SAMでLambdaの関数をデプロイしServerless Application Repositoryに公開する - sambaiz-net
GitHub Appの作成 Settings &amp;gt; Developer settings から作成できる。いろいろ項目はあるが、NameとHomepage URL、Webhook URLを入れればひとまず作成はできる。 Webhook URLはあとで決まるので適当な値を入れておく。必須にはなっていないがリクエストを検証するため適当なWebhook secretも入れる。 PermissionsはPull requestsではなくIssueのRead &amp;amp; Writeが必要で、 さらにそうすると表示されるようになるSubscribe to eventsのIssue commentにチェックを入れる。
作成すると秘密鍵がダウンロードできるのでSecretsmanagerに上げておき、LambdaのRoleにもこれを取得できるRoleを付ける。
AWS Systems Manager (SSM)のParameter Storeに認証情報を置き参照する - sambaiz-net
$ aws secretsmanager create-secret --name GitHubCdkAppSecretKey --secret-string $(cat private-key.pem) Policies: - PolicyName: read-cdk-github-app-secret-key PolicyDocument: Version: &amp;#34;2012-10-17&amp;#34; Statement: - Effect: Allow Action: secretsmanager:GetSecretValue Resource: &amp;lt;secret-key arn&amp;gt; Webhooksのリクエスト内容 設定でチェックを入れたeventが起きると次のようなリクエストが送られてくる。 Headerの X-GitHub-Event によってbodyの中身が決まり、 X-Hub-Signature と、bodyと設定したWebhook secretから生成したHMACのMAC値を比較することで リクエストを検証することができる。</description>
    </item>
    
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>AWS CDKでリソースを記述し、PullRequestに対して自動でcdk diffで変更があるものを表示して、mergeしたときにcdk deployする。 全体のコードはGitHubにある。
AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする - sambaiz-net
 追記 (2019-08-29): このフローで起こったいくつかの問題を解決するため新しいツールを作った。 PR上でCDKのレビューやデプロイを行うツールcdkbotを作った - sambaiz-net
 CI Userの作成 まずcdkコマンドを実行するためのCI Userを作成する。これはCDK管理外のスタックで、AWSコンソール上から手動で上げる。
AWSのAssumeRole - sambaiz-net
AssumeRoleしかできないCIUserからCIAssumeRoleをassumeすることにした。
AWSTemplateFormatVersion: &amp;#39;2010-09-09&amp;#39; Resources: CIAssumeRole: Type: &amp;#39;AWS::IAM::Role&amp;#39; Properties: RoleName: &amp;#39;CIAssumeRole&amp;#39; ManagedPolicyArns: - &amp;#39;arn:aws:iam::aws:policy/AdministratorAccess&amp;#39; AssumeRolePolicyDocument: Version: &amp;#39;2012-10-17&amp;#39; Statement: - Effect: &amp;#39;Allow&amp;#39; Principal: AWS: - !Ref AWS::AccountId Action: - &amp;#39;sts:AssumeRole&amp;#39; CIGroup: Type: &amp;#39;AWS::IAM::Group&amp;#39; Properties: GroupName: &amp;#39;CI&amp;#39; CIPolicies: Type: &amp;#39;AWS::IAM::Policy&amp;#39; Properties: PolicyName: &amp;#39;CI&amp;#39; PolicyDocument: Statement: - Effect: Allow Action: &amp;#39;sts:AssumeRole&amp;#39; Resource: !</description>
    </item>
    
  </channel>
</rss>
