<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/github/</link>
    <description>Recent content in Github on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 30 Oct 2022 02:33:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub ActionsからOIDCでassumeできるRoleをCDKで作成する</title>
      <link>https://www.sambaiz.net/article/421/</link>
      <pubDate>Sun, 30 Oct 2022 02:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/421/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/aws-actions/configure-aws-credentials&#34;&gt;aws-actions/configure-aws-credentials&lt;/a&gt; は AWS の Role を assume する Actionで、&#xA;Access Key による認証もサポートしているが、&lt;a href=&#34;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect&#34;&gt;GitHub の OIDC Provider&lt;/a&gt;&#xA;が発行した JWT を用いることで認証情報を持つことなくセキュアにAPIを呼ぶことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ScalaでSparkのアプリケーションを開発してGitHub ActionsでデプロイしEMRでリモートデバッグする</title>
      <link>https://www.sambaiz.net/article/420/</link>
      <pubDate>Fri, 21 Oct 2022 23:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/420/</guid>
      <description>&lt;p&gt;Spark は開発で用いられている Scala に加えて Java や Python のAPIを提供しており、技術スタックや他コンポーネントとの兼ね合いなどによって選択することができる。&lt;/p&gt;&#xA;&lt;p&gt;Python は データ分析や機械学習のスキルセットとの親和性の高さや Glue Studio 上で編集して実行できる手軽さがある一方、エラーが分かりづらく JVM と Python Worker 間でデータをやり取りする必要があるのでパフォーマンスの点でも不利。&#xA;また、JVM の制御の外である Python インタプリタが YARN などのリソースマネージャによって割り当てられた以上のメモリを確保してしまうと executor が kill されてしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ReviewdogのGitHub ActionsでGoのlintをかけてPRに表示する</title>
      <link>https://www.sambaiz.net/article/363/</link>
      <pubDate>Thu, 03 Jun 2021 19:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/363/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34;&gt;Reviewdog&lt;/a&gt;はlinterの結果をPRにコメントしてくれるツール。&#xA;差分のみに適用することができるので段階的に改善していくこともできる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;staticcheck&#34;&gt;Staticcheck&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://staticcheck.io/&#34;&gt;Staticcheck&lt;/a&gt;はdeprecatedになった&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;Golint&lt;/a&gt;のリポジトリで移行先として紹介されているlinter。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; go install honnef&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;co&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;go&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;tools&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;cmd&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;staticcheck@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; staticcheck &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;staticcheck &lt;span style=&#34;color:#bd93f9&#34;&gt;2021.1&lt;/span&gt; (v0&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2.0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;典型的なミスや非効率な書き方など&lt;a href=&#34;https://staticcheck.io/docs/checks&#34;&gt;様々な項目&lt;/a&gt;がチェックされる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;logging&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Color &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Red  Color = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:14:2: only the first constant in this group has an explicit type (SA9004)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  Blue       = &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;f&lt;/span&gt;(ctx context.Context, str []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; m &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;                             &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:13:2: assignment to nil map (SA5000)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; json.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;(str, m); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:14:32: json.Unmarshal expects to unmarshal into a pointer, but the provided value is not a pointer (SA1014)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  l &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&amp;amp;&lt;/span&gt;m &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:17:7: *&amp;amp;x will be simplified to x. It will not copy x. (SA4001)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  l[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;ToLower&lt;/span&gt;(m[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;]) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;ToLower&lt;/span&gt;(m[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;]) { &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:19:5: should use strings.EqualFold instead (SA6005)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%v -&amp;gt; %s&amp;#34;&lt;/span&gt;, m, l)) &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:27:3: should use fmt.Printf instead of fmt.Println(fmt.Sprintf(...)) (but don&amp;#39;t forget the newline) (S1038)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`{&amp;#34;A&amp;#34;: &amp;#34;B&amp;#34;, &amp;#34;X&amp;#34;: &amp;#34;Y&amp;#34;}`&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:33:14: do not pass a nil Context, even if a function permits it; pass context.TODO if you are unsure about which Context to use (SA1012)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ReviewdogにStaticcheckの&lt;a href=&#34;https://github.com/reviewdog/action-staticcheck&#34;&gt;Action&lt;/a&gt;があるので次のような設定で動き出す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub ActionsのDocker container actionを作る</title>
      <link>https://www.sambaiz.net/article/310/</link>
      <pubDate>Sun, 22 Nov 2020 01:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/310/</guid>
      <description>&lt;p&gt;GitHub ActionsのActionにはランナーで直接実行される&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-javascript-action&#34;&gt;JavaScript action&lt;/a&gt;と、&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-docker-container-action&#34;&gt;Docker container action&lt;/a&gt;、複数のステップをまとめた&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-composite-run-steps-action&#34;&gt;Composite run steps action&lt;/a&gt;がある。&#xA;Docker container actionは環境を固定できるが、イメージを取得する分JavaScript actionと比べて時間がかかり、DockerがインストールされているLinuxでしか使えない。&#xA;今回はこのDocker container actionを作って動かしてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub ActionsでPRのコメントに返事を返すbotを動かす</title>
      <link>https://www.sambaiz.net/article/308/</link>
      <pubDate>Tue, 10 Nov 2020 09:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/308/</guid>
      <description>&lt;h2 id=&#34;apiトークン&#34;&gt;APIトークン&lt;/h2&gt;&#xA;&lt;p&gt;コメントを投稿するAPIを呼ぶためにトークンが必要だが、GitHub Actionsのジョブの実行中有効なGitHub Appトークンが自動生成され、&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow&#34;&gt;${{secrets.GITHUB_TOKEN}}&lt;/a&gt;で参照できるのでこれを使う。&#xA;このトークンによるイベントではワークフローが発火しないので無限ループの心配がない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub Actionsのself-hosted runner</title>
      <link>https://www.sambaiz.net/article/307/</link>
      <pubDate>Sat, 07 Nov 2020 13:04:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/307/</guid>
      <description>&lt;p&gt;GitHub Actionsの&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/hosting-your-own-runners/about-self-hosted-runners&#34;&gt;self-hosted runner&lt;/a&gt;は&#xA;GitHubがホストする環境以外でジョブを実行できる機能。&#xA;権限やネットワークなどの都合で特定の環境でしか実行できない処理を行うことができ、GitHubへロングポーリングしてジョブを待ち構えるのでwebhookのように外からアクセスできるようにする必要がない。&#xA;実行時間やストレージによる&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions&#34;&gt;料金&lt;/a&gt;は発生しない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SAMとGoでPRのコメントに対して返事を返すGitHub Appを作る</title>
      <link>https://www.sambaiz.net/article/231/</link>
      <pubDate>Fri, 19 Jul 2019 21:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/231/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.github.com/apps/&#34;&gt;GitHub App&lt;/a&gt;はリポジトリにインストールできるアプリケーションで、&#xA;Access TokenやOAuth Appと&lt;a href=&#34;https://developer.github.com/apps/differences-between-apps/&#34;&gt;異なり&lt;/a&gt;&#xA;ユーザーとは独立した権限を与えて実行することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>&lt;p&gt;AWS CDKでリソースを記述し、PullRequestに対して自動で&lt;code&gt;cdk diff&lt;/code&gt;で変更があるものを表示して、mergeしたときに&lt;code&gt;cdk deploy&lt;/code&gt;する。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/aws-cdk-circleci-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
