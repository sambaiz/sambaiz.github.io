<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compress on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/compress/</link>
    <description>Recent content in Compress on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Fri, 03 Nov 2017 15:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/compress/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>圧縮アルゴリズムZopfliとBrotli</title>
      <link>https://www.sambaiz.net/article/142/</link>
      <pubDate>Fri, 03 Nov 2017 15:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/142/</guid>
      <description>どちらもGoogleが開発した圧縮アルゴリズム。
puppetter-lambda-starter-kit のissueに 現在使っているgzipと、Zopfli、Brotliを比較したデータが上がっていたので調べてみた。
Zopfli 出力としてDeflateに対応している。
Deflate LZ77(実際は改良版のLZSS)とハフマン記号による可逆圧縮アルゴリズム。 zip、zlib、gzip、pngなどで使われていて、これらはヘッダーやフッターが異なる。 LZSSはバイト列を見ていって同じ部分を発見したらそこを参照するように置き換えていく。
a b c a b c a b c d d d =&amp;gt; a b c (距離3, 長さ6) d (距離１, 長さ2)  このLZSSにあたる部分をZopfliはがんばってやるので圧縮時間が結構かかるがサイズは小さくなるらしい。 展開は通常のDeflate通り。上げてくれたデータを見ても大体そんな感じだ。
$ git clone https://github.com/google/zopfli $ cd zopfli $ make zopfli $ ./zopfli aaaa  Brotli LZ77、ハフマン記号に加えて2nd order context modelingというのを使って圧縮する Deflateではない可逆圧縮アルゴリズム。 Safari以外のモダンなブラウザで既に対応しているか対応しているところ。 対応している場合、Accept-EncodingやContent-Encodingヘッダに含まれるのはbr。 圧縮率も展開時間もかなり良さそう。
Nodeにもblotliのライブラリがあって、 圧縮はEmscriptenで本家のC++コードから変換し、 展開は手で移植しているようだ。
$ npm install blotli  const fs = require(&#39;fs&#39;); const brotli = require(&#39;brotli&#39;); const TARGET = process.</description>
    </item>
    
  </channel>
</rss>