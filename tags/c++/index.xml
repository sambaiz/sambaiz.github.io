<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 29 May 2022 19:18:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Segment TreeとBineary Indexed Tree (BIT)で部分和を求める</title>
      <link>https://www.sambaiz.net/article/406/</link>
      <pubDate>Sun, 29 May 2022 19:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/406/</guid>
      <description>Segment Tree 配列の各区間での計算結果を接点に持つことで任意の区間での計算をO(log n)で行えるようにした完全二分木。 以下の例では和を持っているが最小値にすればRange Minimum Query (RMQ)を解くことができる。値を更新する際は下から順に再計算していく。
 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; template &amp;lt;typename S, typename T&amp;gt; class SegmentTree { T default_value; int leaf_num = 1; vector&amp;lt;S&amp;gt; nodes; /* [0] / \ [1] [2] / \ / \ [3][4][5][6] */ function&amp;lt;int(int, int)&amp;gt; calc; public: SegmentTree(vector&amp;lt;S&amp;gt; data, T default_value, function&amp;lt;T(S, S)&amp;gt; calc) { while (leaf_num &amp;lt; data.size()) leaf_num *= 2; this-&amp;gt;calc = calc; this-&amp;gt;default_value = default_value; nodes = vector&amp;lt;S&amp;gt;(2 * data.</description>
    </item>
    
    <item>
      <title>Union-Find木で無向グラフに閉路があるかを判定する</title>
      <link>https://www.sambaiz.net/article/390/</link>
      <pubDate>Sun, 12 Dec 2021 16:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/390/</guid>
      <description>Union-Find木 Union-Find木はいくつかの素集合の木を持つデータ構造で、 2つの集合を結合するUnionと、要素の含まれる集合を特定し2つの要素が同じ集合に含まれるかを判定できるFindを、 ならし計算量 O(α(n)) (α(n)はアッカーマン間数A(n,n)の逆関数でlog(n)よりも小さい)で行うことができる。
Unionはなるべく木が平衡になるようrankが小さい方の木が下に来るように辺を張る。1要素の木のrankは0で、同じrankの木を結合すると上にした木のrankが1増える。 Findは根の値を比較した後、辿ったノードから根へ辺を張り直して次回以降の処理を効率的に行えるようにする。
 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; class union_find_tree { unordered_map&amp;lt;int, int&amp;gt; parent; unordered_map&amp;lt;int, int&amp;gt; rank; public: union_find_tree(vector&amp;lt;int&amp;gt; values) { for(int i = 0; i &amp;lt; values.size(); i++) { parent[values[i]] = values[i]; rank[values[i]] = 0; } } int find(int x) { if (parent[x] == x) return x; int root = find(parent[x]); parent[x] = root; return root; } void unite(int x, int y) { x = find(x); y = find(y); if (x == y) return; if (rank[x] &amp;gt; rank[y]) { parent[y] = x; } else { parent[x] = y; if (rank[x] == rank[y]) rank[y]++; } } bool same(int x, int y) { return find(x) == find(y); } }; int main() { auto tree = new union_find_tree({1,2,3,4,5,6}); tree-&amp;gt;unite(2, 3); tree-&amp;gt;unite(1, 2); tree-&amp;gt;unite(4, 5); tree-&amp;gt;unite(5, 6); cout &amp;lt;&amp;lt; tree-&amp;gt;same(2, 5) &amp;lt;&amp;lt; endl; // 0  tree-&amp;gt;unite(2, 5); cout &amp;lt;&amp;lt; tree-&amp;gt;same(2, 5) &amp;lt;&amp;lt; endl; // 1 } Union-Find木による無向グラフの閉路の判定 無向グラフの辺をUnion-Find木に入れると、すでに到達可能なノードは同じ集合に属することになるので、 辺を張った時に閉路ができるかを判定できる。</description>
    </item>
    
    <item>
      <title>ラビン-カープアルゴリズムをC&#43;&#43;で実装する</title>
      <link>https://www.sambaiz.net/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/387/</guid>
      <description>ラビン-カープアルゴリズムはローリングハッシュを用いて部分文字列を探索するアルゴリズム。 ローリングハッシュは前のハッシュから先頭の要素を取り除き、次の要素を追加することによってO(1)で次のハッシュが得られる。 これを満たせるハッシュ関数としては様々なものが考えられるが、例えば文字コードを単に足し合わせる場合、同じ文字が含まれているだけでハッシュが衝突してしまうので、通常は次のように文字列を数値化したものが用いられる。剰余を取れば長い文字列でもオーバーフローを回避できる。
剰余を取った値の四則演算 - sambaiz-net
#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; class rolling_hash { const int base = 256; const int mod = pow(10, 9) + 7; // prime modulus  string str; int window_length; long tail_p; // = pow(base,window_length)  long current_hash = 0; int head_idx = 0; public: rolling_hash(string str, int window_length) { this-&amp;gt;str = str; this-&amp;gt;window_length = window_length; long p = 1; for (int i = window_length - 1; i&amp;gt;= 0; i--) { current_hash = (current_hash + ((str[i] * p) % mod)) % mod; if (i !</description>
    </item>
    
    <item>
      <title>C&#43;&#43;のstructとclass</title>
      <link>https://www.sambaiz.net/article/385/</link>
      <pubDate>Tue, 30 Nov 2021 18:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/385/</guid>
      <description>C++のclassとstructは同じ機能を持っているが、classのデフォルトがprivateなのに対してstructはpublicになっている。 classはカプセル化のために用いられ、公開フィールドを持ちメソッドをほとんど持たない場合はstructを使うことが多いようだ。
#include &amp;lt;iostream&amp;gt;using namespace std; class C { int value; public: C(int value) { this-&amp;gt;value = value; } int func() { return value; }; }; struct S { S(int value) { this-&amp;gt;value = value; } int value; private: int func() { return value; }; }; int main () { C(1).value; // member &amp;#34;C::value&amp;#34; (declared at line 2) is inaccessible  C(1).func(); S(1).value; S(1).func(); // function &amp;#34;S::func&amp;#34; (declared at line 18) is inaccessible } いずれも継承できる。C++では継承元の関数にvirtualを付けて仮想関数にしないと、 継承元の型の変数から呼んだ際にオーバーライドされず元の関数が呼ばれる。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STLのmapやunordered_mapのkeyにstructを使えるようにする</title>
      <link>https://www.sambaiz.net/article/371/</link>
      <pubDate>Fri, 09 Jul 2021 23:13:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/371/</guid>
      <description>map operator&amp;lt; を実装する。
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;map&amp;gt;using namespace std; struct Item { string name; int point; }; bool operator&amp;lt;(const Item&amp;amp; a, const Item&amp;amp; b) { return tie(a.name, a.point) &amp;lt; tie(b.name, b.point); } int main() { map&amp;lt;Item, bool&amp;gt; M; M[{&amp;#34;sambaiz&amp;#34;, 1024}] = true; cout &amp;lt;&amp;lt; M[{&amp;#34;sambaiz&amp;#34;, 1024}] &amp;lt;&amp;lt; endl; return 0; } unordered_map operator== とハッシュ関数を実装する。
#include &amp;lt;iostream&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;unordered_map&amp;gt;using namespace std; struct Item { string name; int point; }; bool operator==(const Item&amp;amp; a, const Item&amp;amp; b) { return a.</description>
    </item>
    
    <item>
      <title>剰余を取った値の四則演算</title>
      <link>https://www.sambaiz.net/article/321/</link>
      <pubDate>Sat, 16 Jan 2021 18:03:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/321/</guid>
      <description>競プロの64bit整数でもオーバーフローする大きな値が出てくる問題では、言語による差が出ないよう \(10^9+7\) といった数で割ったときの余りが要求される。
四則演算の内、割り算以外は各項の剰余を取ってから計算してもその剰余の値は変わらないので、都度剰余を取ってオーバーフローを回避できる。
#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int mod(int a, int n) { int x = a % n; if (x &amp;gt;= 0) { return x; } else { return n + x; } } int main() { int X = 7; int Y = 9; int Z = 5; // (AZ + B) + (CZ + D) = (A+C)Z + (B+D) ≡ B+D (mod Z)  cout &amp;lt;&amp;lt; mod(X + Y, Z) &amp;lt;&amp;lt; endl; // 1  cout &amp;lt;&amp;lt; mod(X, Z) + mod(Y, Z) &amp;lt;&amp;lt; endl; // 6  cout &amp;lt;&amp;lt; mod(mod(X, Z) + mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 1  // (AZ + B) - (CZ + D) = (A-C)Z + (B-D) ≡ B-D (mod Z)  cout &amp;lt;&amp;lt; mod(X - Y, Z) &amp;lt;&amp;lt; endl; // 3  cout &amp;lt;&amp;lt; mod(X, Z) - mod(Y, Z) &amp;lt;&amp;lt; endl; // -1  cout &amp;lt;&amp;lt; mod(mod(X, Z) - mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 3  // (AZ + B) * (CZ + D) = (ACZ+AD+BC)Z + (BD) ≡ BD (mod Z)  cout &amp;lt;&amp;lt; mod(X * Y, Z) &amp;lt;&amp;lt; endl; // 2  cout &amp;lt;&amp;lt; mod(X, Z) + mod(Y, Z) &amp;lt;&amp;lt; endl; // 6  cout &amp;lt;&amp;lt; mod(mod(X, Z) * mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 3  return 0; } 割り算は \(b^{-1}b \equiv 1 \mod n\) となるようなモジュラ逆数\(b^{-1}\)があれば、\(\frac{a}{b} \equiv (a \mod n)(b^{-1} \mod n) \mod n\)が成り立つ。bとnが互いに素(\(gcd(b,n)=1\))であることが必要十分条件で、\(bx - ny = gcd(b, n) = 1\)の\(x\)を拡張されたユークリッドの互除法で求める。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;で標準入力から数が不定なスペース区切りの文字列を読み込んで分割する</title>
      <link>https://www.sambaiz.net/article/320/</link>
      <pubDate>Tue, 12 Jan 2021 21:32:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/320/</guid>
      <description>std::getline(basic_istream, basic_string, delim)を使う。 第三引数delimかEOFに達するとそこまでの文字列を出力する。delimを渡さないとis.widen(&#39;\n&#39;)となり一行読む。 一度stringstreamにしているのは、getline(cin, s, &#39; &#39;) のように直接読み込もうとすると最後の文字列の後にdelimもEOFも来ずに止まってしまうため。
#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int main() { string s; getline(cin, s); stringstream ss(s); while (getline(ss, s, &amp;#39; &amp;#39;)) { cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; endl; } return 0; } </description>
    </item>
    
    <item>
      <title>C&#43;&#43;でnext_permutationを使わずに順列を列挙する</title>
      <link>https://www.sambaiz.net/article/277/</link>
      <pubDate>Wed, 03 Jun 2020 01:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/277/</guid>
      <description>Permutations - LeetCode
配列が渡されてそれを並び替えてできる全ての順列を返す問題。 まさにSTLのalgorithmに辞書順で次の順列を返すnext_permutation()というのがあって次のようにするだけでできてしまう。
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ret; sort(nums.begin(), nums.end()); do { ret.push_back(nums); } while (next_permutation(nums.begin(), nums.end())); return ret; せっかくなのでこれを使わず実装してみた。 あるindexの要素とそれ以降の全ての要素をそれぞれswapすることでそのindexに入り得る全ての値を網羅し、 それら全ての配列に対して対象のindexを一つ増やして同じ処理を再帰的に繰り返す。
class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permute(vector&amp;lt;int&amp;gt;&amp;amp; nums) { return _permute(nums, 0); } vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; _permute(vector&amp;lt;int&amp;gt; nums, int swap_index) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ret; if (swap_index &amp;gt;= nums.size()) { return {nums}; } for(int i = swap_index; i &amp;lt; nums.size(); i++) { swap(nums[swap_index], nums[i]); auto v = _permute(nums, swap_index+1); copy(v.begin(), v.end(), back_inserter(ret)); swap(nums[swap_index], nums[i]); } return ret; } }; </description>
    </item>
    
    <item>
      <title>C&#43;&#43;でO(1)で読み書きできるLRUキャッシュを実装する</title>
      <link>https://www.sambaiz.net/article/270/</link>
      <pubDate>Sun, 26 Apr 2020 18:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/270/</guid>
      <description>LRU Cache - LeetCode
最初次のようなコードを書いたがタイムアウトしてしまった。 C++のstd::mapは二分木で実装されているので各操作にO(log n)かかり、dequeの先頭への挿入はO(1)でできるが重複するキーを探して削除するのにO(n^2)かかってしまう。
C++ STLのContainersとAlgorithms - sambaiz-net
class LRUCache { public: deque&amp;lt;int&amp;gt; Q; // key  map&amp;lt;int, int&amp;gt; V; // &amp;lt;key, value&amp;gt;  int cap = 0; LRUCache(int capacity) { cap = capacity; } int get(int key) { if (V.count(key) != 0) { for (int i = 0; i &amp;lt; Q.size(); i++) { if (Q[i] == key) { Q.erase(Q.begin() + i); break; } } Q.push_front(key); return V[key]; } return -1; } void put(int key, int value) { if (cap == 0) { return; } if (get(key) == -1) { if (Q.</description>
    </item>
    
    <item>
      <title>貪欲法(Greedy algorithm)で問題を解く</title>
      <link>https://www.sambaiz.net/article/255/</link>
      <pubDate>Mon, 13 Jan 2020 21:17:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/255/</guid>
      <description>貪欲法(Greedy algorithm)は問題を分割し、それぞれにおいて貪欲に最適な選択をしていくアルゴリズムの総称。 必ずしも最適解になるとは限らないが、うまくいけば簡潔に計算量を減らすことができる。
Best Time to Buy and Sell Stock II - LeetCode 配列で株価が与えられ、売買して得られる最大の利益を返す問題。
Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STLのContainersとAlgorithms</title>
      <link>https://www.sambaiz.net/article/253/</link>
      <pubDate>Sat, 04 Jan 2020 21:25:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/253/</guid>
      <description>STL(Standard Template Library)はC++の標準ライブラリ。 その名の通りtemplateで実装され、様々な型で使えるようになっている。
// https://github.com/microsoft/STL/blob/1e8b8d4eef4b2dddeb7533c5231c876383bd0ea6/stl/inc/algorithm#L3501 template &amp;lt;class _RanIt, class _Pr&amp;gt; void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last), using _Pred  _Adl_verify_range(_First, _Last); const auto _UFirst = _Get_unwrapped(_First); const auto _ULast = _Get_unwrapped(_Last); _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred)); } 以下の例はC++14で、
$ g++-8 -dM -E -x c++ /dev/null | grep -F __cplusplus #define __cplusplus 201402L 全部入りHeader bits/stdc++.h をincludeし、std:: を省略している。
#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; Containers データを保存するオブジェクト。</description>
    </item>
    
    <item>
      <title>MacのVSCodeでC&#43;&#43;を書く環境構築</title>
      <link>https://www.sambaiz.net/article/252/</link>
      <pubDate>Sat, 04 Jan 2020 01:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/252/</guid>
      <description>(追記:2021-02-05) 今はdevcontainerで環境を作っている。mirosoft/vscode-remote-try-cppをコンテナで開くだけでbits/stdc++.hも読めるg++環境が立ち上がる。GitHubのテンプレートとして公開されているので、これをベースとしたリポジトリを作成できる。
VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net
 Extension  C/C++  を入れてHello Worldを書いたところ、stdio.hが見つからず#includeの行に赤線が付いた。
#include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;#34;Hello World!\n&amp;#34;); return 0; } Command Palletteから C/C++: Edit Configurations (JSON) を選ぶと .vscode/c_cpp_properties.json が生成されるので編集していく。
Xcode 10から/usr/includeにHeaderファイルが置かれなくなったようなのでincludePathにXcodeのSDKのパスを追加する。
$ xcode-select --install $ xcrun --show-sdk-path /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk $ ls -l /Library/Developer/CommandLineTools/SDKs/ total 0 drwxr-xr-x 7 root wheel 224 7 23 08:49 MacOSX.sdk lrwxr-xr-x 1 root wheel 10 7 23 08:48 MacOSX10.14.sdk -&amp;gt; MacOSX.sdk $ ls /Library/Developer/CommandLineTools/SDKs/MacOSX.</description>
    </item>
    
    <item>
      <title>動的計画法(DP)で計算結果を再利用して計算量を減らす</title>
      <link>https://www.sambaiz.net/article/251/</link>
      <pubDate>Mon, 30 Dec 2019 19:28:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/251/</guid>
      <description>動的計画法(DP, Dynamic Programming)は、 例えばフィボナッチ数列の項f(x)を記録しておいたf(x-1)とf(x-2)から計算するように、 計算結果を記録し帰納的に求められるより大きな計算で利用するアルゴリズムの総称。
いくつか問題を解いてみる。
Longest Common Subsequence 最長共通部分列問題。
Given two strings text1 and text2, return the length of their longest common subsequence. Example 1: Input: text1 = &amp;#34;abcde&amp;#34;, text2 = &amp;#34;ace&amp;#34; Output: 3 Explanation: The longest common subsequence is &amp;#34;ace&amp;#34; and its length is 3. 単純に毎回一から探索するとO(n^3)になるが、text1のi番目までとtext2のj番目までの共通部分列の長さをDP[i-1][j-1]に記録しておくと、 ヒントにあるように、それぞれの文字列に1文字足したときに それが同じ文字ならその分伸ばした DP[i - 1][j - 1] + 1 となり 違う文字ならそのまま max(DP[i - 1][j], DP[i][j - 1]) となる ことに気付けると毎回探索しなくてよくなりO(n^2)にできる。
class Solution { public: int longestCommonSubsequence(string text1, string text2) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; DP(text1.</description>
    </item>
    
    <item>
      <title>単調性のある式の解を二分法で数値的に求める</title>
      <link>https://www.sambaiz.net/article/246/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/246/</guid>
      <description>AtCoder Beginner Contest 144の D - Water Bottleをやってみた。
高橋君は、底面が1辺 a cm の正方形であり、高さが b cm であるような直方体型の水筒を持っています。(水筒の厚みは無視できます。) この水筒の中に体積 x cm^3 の水を入れ、底面の正方形の1辺を軸として、この水筒を徐々に傾けます。 水を溢れさせずに水筒を傾けることができる最大の角度を求めてください。 水を溢れさせずに水筒を傾けることができる最大の角度を度数法で出力せよ。 出力は、ジャッジの出力との絶対誤差または相対誤差が10^6以下のとき正解と判定される。 水が溢れるパターンは次の2通りあって、水が入っている、または入ってない部分の三角柱を除いた部分の体積がxになるようなθをatanで出せる。
解説を見ると、これに加えて二分法を使って数値的に求める解法も紹介されていた。 二分法というのは解が含まれる区間の中間での値を求め、その値が解より小さいか大きいかによって二分したどちらかの区間を選ぶ操作を繰り返すことで区間の幅を狭めて解を求めるアルゴリズム。収束条件として式に単調性がある必要があるが、θに対してこぼれる限界の水の体積の式は単調減少するので用いることができる。 解説にもコードが付いていたがまずは見ずに書いてみた。
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cmath&amp;gt;#include &amp;lt;iomanip&amp;gt;using namespace std; double waterVolume(int a, int b, double rad) { if (rad &amp;lt; atan(1.0 * b / a)) { return a * a * b - (a * (a * tan(rad)) / 2 * a); } else { return b * (b * tan(M_PI / 2 - rad)) / 2 * a; } } int main() { double a, b, x; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; x; double min = 0, max = M_PI / 2; while (true) { double m = (min + max) / 2; double vol = waterVolume(a, b, m); if (abs(vol - x) &amp;lt; pow(10, -6)) { cout &amp;lt;&amp;lt; setprecision(8) &amp;lt;&amp;lt; m / M_PI * 180 &amp;lt;&amp;lt; endl; return 0; } else if (vol &amp;gt; x) { min = m; } else { max = m; } } } 解説のコードでは、パターンの判定でa * tan(theta) &amp;lt;= bを使っているのと、有限回のループでxを上回らない最大のθを探すようになっていた。</description>
    </item>
    
  </channel>
</rss>
