<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 29 May 2022 19:18:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Segment TreeとBineary Indexed Tree (BIT)で部分和を求める</title>
      <link>https://www.sambaiz.net/article/406/</link>
      <pubDate>Sun, 29 May 2022 19:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/406/</guid>
      <description>&lt;h2 id=&#34;segment-tree&#34;&gt;Segment Tree&lt;/h2&gt;&#xA;&lt;p&gt;配列の各区間での計算結果をノードに持つことで任意の区間での計算をO(log n)で行えるようにした完全二分木。&#xA;以下の例では和を持っているが最小値にすれば&lt;a href=&#34;https://en.wikipedia.org/wiki/Range_minimum_query&#34;&gt;Range Minimum Query (RMQ)&lt;/a&gt;を解くことができ、ソートした列を持てばマージソートになる。値を更新する際は下から順に再計算していく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Union-Find木で無向グラフに閉路があるかを判定する</title>
      <link>https://www.sambaiz.net/article/390/</link>
      <pubDate>Sun, 12 Dec 2021 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/390/</guid>
      <description>&lt;h2 id=&#34;union-find木&#34;&gt;Union-Find木&lt;/h2&gt;&#xA;&lt;p&gt;Union-Find木はいくつかの素集合の木を持つデータ構造で、&#xA;2つの集合を結合するUnionと、要素の含まれる集合を特定し2つの要素が同じ集合に含まれるかを判定できるFindを、&#xA;ならし計算量 O(α(n)) (α(n) は&lt;a href=&#34;https://en.wikipedia.org/wiki/Ackermann_function&#34;&gt;アッカーマン間数&lt;/a&gt; A(n,n) の逆関数で log(n) よりも小さい)で行うことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ラビン-カープアルゴリズムをC&#43;&#43;で実装する</title>
      <link>https://www.sambaiz.net/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/387/</guid>
      <description>&lt;p&gt;ラビン-カープアルゴリズムはローリングハッシュを用いて部分文字列を探索するアルゴリズム。&#xA;ローリングハッシュは前のハッシュから先頭の要素を取り除き、次の要素を追加することによって&lt;code&gt;O(1)&lt;/code&gt;で次のハッシュが得られる。&#xA;これを満たせるハッシュ関数としては様々なものが考えられるが、例えば文字コードを単に足し合わせる場合、同じ文字が含まれているだけでハッシュが衝突してしまうので、通常は次のように文字列を数値化したものが用いられる。剰余を取れば長い文字列でもオーバーフローを回避できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;のstructとclass</title>
      <link>https://www.sambaiz.net/article/385/</link>
      <pubDate>Tue, 30 Nov 2021 18:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/385/</guid>
      <description>&lt;p&gt;C++のclassとstructは同じ機能を持っているが、classのデフォルトがprivateなのに対してstructはpublicになっている。&#xA;classはカプセル化のために用いられ、公開フィールドを持ちメソッドをほとんど持たない場合はstructを使うことが多いようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; STLのmapやunordered_mapのkeyにstructを使えるようにする</title>
      <link>https://www.sambaiz.net/article/371/</link>
      <pubDate>Fri, 09 Jul 2021 23:13:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/371/</guid>
      <description>&lt;h2 id=&#34;map&#34;&gt;map&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt; を実装する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Item&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; point;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Item&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Item&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;tie&lt;/span&gt;(a.name, a.point) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; tie(b.name, b.point);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Item, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; M;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    M[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sambaiz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;}] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; M[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sambaiz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;}] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>剰余を取った値の四則演算</title>
      <link>https://www.sambaiz.net/article/321/</link>
      <pubDate>Sat, 16 Jan 2021 18:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/321/</guid>
      <description>&lt;p&gt;競プロの64bit整数でもオーバーフローする大きな値が出てくる問題では、言語による差が出ないよう \(10^9+7\) といった数で割ったときの余りが要求される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;で標準入力から数が不定なスペース区切りの文字列を読み込んで分割する</title>
      <link>https://www.sambaiz.net/article/320/</link>
      <pubDate>Tue, 12 Jan 2021 21:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/320/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/getline.html&#34;&gt;std::getline(basic_istream, basic_string, delim)&lt;/a&gt; を使う。&#xA;この関数は第三引数 delim か EOF に達するとそこまでの文字列を、delim を渡さないと is.widen(&amp;rsquo;\n&amp;rsquo;) が渡されるので一行出力する。&#xA;一度 stringstream にしているのは、getline(cin, s, &amp;rsquo; &amp;lsquo;) のように直接読み込もうとすると最後の文字の後に delim も EOF も来ずに止まってしまうため。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;でnext_permutationを使わずに順列を列挙する</title>
      <link>https://www.sambaiz.net/article/277/</link>
      <pubDate>Wed, 03 Jun 2020 01:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/277/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/permutations/&#34;&gt;Permutations - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;配列が渡されてそれを並び替えてできる全ての順列を返す問題。&#xA;まさにSTLのalgorithmに辞書順で次の順列を返す&lt;code&gt;next_permutation()&lt;/code&gt;というのがあって次のようにするだけでできてしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;でO(1)で読み書きできるLRUキャッシュを実装する</title>
      <link>https://www.sambaiz.net/article/270/</link>
      <pubDate>Sun, 26 Apr 2020 18:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/270/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/lru-cache/&#34;&gt;LRU Cache - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;最初次のようなコードを書いたがタイムアウトしてしまった。&#xA;C++のstd::mapは二分木で実装されているので各操作にO(log n)かかり、dequeの先頭への挿入はO(1)でできるが重複するキーを探して削除するのにO(n^2)かかってしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>貪欲法(Greedy algorithm)で問題を解く</title>
      <link>https://www.sambaiz.net/article/255/</link>
      <pubDate>Mon, 13 Jan 2020 21:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/255/</guid>
      <description>&lt;p&gt;貪欲法(Greedy algorithm)は問題を分割し、それぞれにおいて貪欲に最適な選択をしていくアルゴリズムの総称。&#xA;必ずしも最適解になるとは限らないが、うまくいけば簡潔に計算量を減らすことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; STLのContainersとAlgorithms</title>
      <link>https://www.sambaiz.net/article/253/</link>
      <pubDate>Sat, 04 Jan 2020 21:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/253/</guid>
      <description>&lt;p&gt;STL(Standard Template Library)はC++の標準ライブラリ。&#xA;その名の通りtemplateで実装され、様々な型で使えるようになっている。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// https://github.com/microsoft/STL/blob/1e8b8d4eef4b2dddeb7533c5231c876383bd0ea6/stl/inc/algorithm#L3501&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_RanIt&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_Pr&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; sort(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; _RanIt _First, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; _RanIt _Last, _Pr _Pred) { &lt;span style=&#34;color:#6272a4&#34;&gt;// order [_First, _Last), using _Pred&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    _Adl_verify_range(_First, _Last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; _UFirst &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; _Get_unwrapped(_First);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; _ULast  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; _Get_unwrapped(_Last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _Sort_unchecked(_UFirst, _ULast, _ULast &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; _UFirst, _Pass_fn(_Pred));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>MacのVSCodeでC&#43;&#43;を書く環境構築</title>
      <link>https://www.sambaiz.net/article/252/</link>
      <pubDate>Sat, 04 Jan 2020 01:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/252/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;(追記:2021-02-05) 今はdevcontainerで環境を作っている。&lt;a href=&#34;https://github.com/microsoft/vscode-remote-try-cpp&#34;&gt;mirosoft/vscode-remote-try-cpp&lt;/a&gt;をコンテナで開くだけで&lt;code&gt;bits/stdc++.h&lt;/code&gt;も読めるg++環境が立ち上がる。GitHubのテンプレートとして公開されているので、これをベースとしたリポジトリを作成できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>動的計画法(DP)で計算結果を再利用して計算量を減らす</title>
      <link>https://www.sambaiz.net/article/251/</link>
      <pubDate>Mon, 30 Dec 2019 19:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/251/</guid>
      <description>&lt;p&gt;動的計画法(DP, Dynamic Programming)は、&#xA;例えばフィボナッチ数列の項&lt;code&gt;f(x)&lt;/code&gt;を記録しておいた&lt;code&gt;f(x-1)&lt;/code&gt;と&lt;code&gt;f(x-2)&lt;/code&gt;から計算するように、&#xA;計算結果を記録し帰納的に求められるより大きな計算で利用するアルゴリズムの総称。&lt;/p&gt;</description>
    </item>
    <item>
      <title>単調性のある式の解を二分法で数値的に求める</title>
      <link>https://www.sambaiz.net/article/246/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/246/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc144&#34;&gt;AtCoder Beginner Contest 144&lt;/a&gt;の&#xA;&lt;a href=&#34;https://atcoder.jp/contests/abc144/tasks/abc144_d&#34;&gt;D - Water Bottle&lt;/a&gt;をやってみた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;高橋君は、底面が1辺 a cm の正方形であり、高さが b cm であるような直方体型の水筒を持っています。(水筒の厚みは無視できます。)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;この水筒の中に体積 x cm^3 の水を入れ、底面の正方形の1辺を軸として、この水筒を徐々に傾けます。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;水を溢れさせずに水筒を傾けることができる最大の角度を求めてください。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;水を溢れさせずに水筒を傾けることができる最大の角度を度数法で出力せよ。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;出力は、ジャッジの出力との絶対誤差または相対誤差が10^6以下のとき正解と判定される。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
