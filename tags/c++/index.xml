<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Wed, 03 Jun 2020 01:23:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;でnext_permutationを使わずに順列を列挙する</title>
      <link>https://www.sambaiz.net/article/277/</link>
      <pubDate>Wed, 03 Jun 2020 01:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/277/</guid>
      <description>Permutations - LeetCode
配列が渡されてそれを並び替えてできる全ての順列を返す問題。 まさにSTLのalgorithmに辞書順で次の順列を返すnext_permutation()というのがあって次のようにするだけでできてしまう。
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ret; sort(nums.begin(), nums.end()); do { ret.push_back(nums); } while (next_permutation(nums.begin(), nums.end())); return ret; せっかくなのでこれを使わず実装してみた。 あるindexの要素とそれ以降の全ての要素をそれぞれswapすることでそのindexに入り得る全ての値を網羅し、 それら全ての配列に対して対象のindexを一つ増やして同じ処理を再帰的に繰り返す。
class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permute(vector&amp;lt;int&amp;gt;&amp;amp; nums) { return _permute(nums, 0); } vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; _permute(vector&amp;lt;int&amp;gt; nums, int swap_index) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ret; if (swap_index &amp;gt;= nums.size()) { return {nums}; } for(int i = swap_index; i &amp;lt; nums.size(); i++) { swap(nums[swap_index], nums[i]); auto v = _permute(nums, swap_index+1); copy(v.begin(), v.end(), back_inserter(ret)); swap(nums[swap_index], nums[i]); } return ret; } }; </description>
    </item>
    
    <item>
      <title>C&#43;&#43;でO(1)で読み書きできるLRUキャッシュを実装する</title>
      <link>https://www.sambaiz.net/article/270/</link>
      <pubDate>Sun, 26 Apr 2020 18:23:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/270/</guid>
      <description>LRU Cache - LeetCode
最初次のようなコードを書いたがタイムアウトしてしまった。 C++のstd::mapは二分木で実装されているので各操作にO(log n)かかり、dequeの先頭への挿入はO(1)でできるが重複するキーを探して削除するのにO(n^2)かかってしまう。
C++ STLのContainersとAlgorithms - sambaiz-net
class LRUCache { public: deque&amp;lt;int&amp;gt; Q; // key map&amp;lt;int, int&amp;gt; V; // &amp;lt;key, value&amp;gt; int cap = 0; LRUCache(int capacity) { cap = capacity; } int get(int key) { if (V.count(key) != 0) { for (int i = 0; i &amp;lt; Q.size(); i++) { if (Q[i] == key) { Q.erase(Q.begin() + i); break; } } Q.push_front(key); return V[key]; } return -1; } void put(int key, int value) { if (cap == 0) { return; } if (get(key) == -1) { if (Q.</description>
    </item>
    
    <item>
      <title>貪欲法(Greedy algorithm)で問題を解く</title>
      <link>https://www.sambaiz.net/article/255/</link>
      <pubDate>Mon, 13 Jan 2020 21:17:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/255/</guid>
      <description>貪欲法(Greedy algorithm)は問題を分割し、それぞれにおいて貪欲に最適な選択をしていくアルゴリズムの総称。 必ずしも最適解になるとは限らないが、うまくいけば簡潔に計算量を減らすことができる。
Best Time to Buy and Sell Stock II - LeetCode 配列で株価が与えられ、売買して得られる最大の利益を返す問題。
Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STLのContainersとAlgorithms</title>
      <link>https://www.sambaiz.net/article/253/</link>
      <pubDate>Sat, 04 Jan 2020 21:25:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/253/</guid>
      <description>STL(Standard Template Library)はC++の標準ライブラリ。 その名の通りtemplateで実装され、様々な型で使えるようになっている。
// https://github.com/microsoft/STL/blob/1e8b8d4eef4b2dddeb7533c5231c876383bd0ea6/stl/inc/algorithm#L3501 template &amp;lt;class _RanIt, class _Pr&amp;gt; void sort(const _RanIt _First, const _RanIt _Last, _Pr _Pred) { // order [_First, _Last), using _Pred _Adl_verify_range(_First, _Last); const auto _UFirst = _Get_unwrapped(_First); const auto _ULast = _Get_unwrapped(_Last); _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred)); } 以下の例はC++14で、
$ g++-8 -dM -E -x c++ /dev/null | grep -F __cplusplus #define __cplusplus 201402L 全部入りHeader bits/stdc++.h をincludeし、std:: を省略している。
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; Containers データを保存するオブジェクト。</description>
    </item>
    
    <item>
      <title>MacのVSCodeでC&#43;&#43;を書く環境構築</title>
      <link>https://www.sambaiz.net/article/252/</link>
      <pubDate>Sat, 04 Jan 2020 01:36:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/252/</guid>
      <description>Extension  C/C++  を入れてHello Worldを書いたところ、stdio.hが見つからず#includeの行に赤線が付いた。
#include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;quot;Hello World!\n&amp;quot;); return 0; } Command Palletteから C/C++: Edit Configurations (JSON) を選ぶと .vscode/c_cpp_properties.json が生成されるので編集していく。
Xcode 10から/usr/includeにHeaderファイルが置かれなくなったようなのでincludePathにXcodeのSDKのパスを追加する。
$ xcode-select --install $ xcrun --show-sdk-path /Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk $ ls -l /Library/Developer/CommandLineTools/SDKs/ total 0 drwxr-xr-x 7 root wheel 224 7 23 08:49 MacOSX.sdk lrwxr-xr-x 1 root wheel 10 7 23 08:48 MacOSX10.14.sdk -&amp;gt; MacOSX.sdk $ ls /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/ | grep &amp;quot;stdio.h&amp;quot; _stdio.h stdio.h ついでにcompilerPathをclangにした。これはIntelliSenseをうまく働かせるための設定らしい。 clangはLLVMバックエンドのC/C++コンパイラで、Macだとgccコマンドもclangを指すようになっている。</description>
    </item>
    
    <item>
      <title>動的計画法(DP)で計算結果を再利用して計算量を減らす</title>
      <link>https://www.sambaiz.net/article/251/</link>
      <pubDate>Mon, 30 Dec 2019 19:28:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/251/</guid>
      <description>動的計画法(DP, Dynamic Programming)は記録した計算結果を、帰納的に求められるより大きな計算で利用するアルゴリズムの総称。 例えば、フィボナッチ数列の項f(x)を求めるのに、f(x-1)とf(x-2)の結果を記録しておけばそれらを足すだけで済む。
いくつか問題を解いてみる。
Longest Common Subsequence 最長共通部分列問題。
Given two strings text1 and text2, return the length of their longest common subsequence. Example 1: Input: text1 = &amp;quot;abcde&amp;quot;, text2 = &amp;quot;ace&amp;quot; Output: 3 Explanation: The longest common subsequence is &amp;quot;ace&amp;quot; and its length is 3. 単純に毎回一から探索するとO(n^3)になるが、 ヒントにあるように、それぞれの文字列に1文字足したときに それが同じ文字ならその分伸ばした DP[i - 1][j - 1] + 1 となり 違う文字ならそのまま max(DP[i - 1][j], DP[i][j - 1]) となる ことに気付けると毎回探索しなくてよくなりO(n^2)にできる。
class Solution { public: int longestCommonSubsequence(string text1, string text2) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; DP(text1.</description>
    </item>
    
    <item>
      <title>単調性のある式の解を二分法で数値的に求める</title>
      <link>https://www.sambaiz.net/article/246/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/246/</guid>
      <description>AtCoder Beginner Contest 144の D - Water Bottleをやってみた。
高橋君は、底面が1辺 a cm の正方形であり、高さが b cm であるような直方体型の水筒を持っています。(水筒の厚みは無視できます。) この水筒の中に体積 x cm^3 の水を入れ、底面の正方形の1辺を軸として、この水筒を徐々に傾けます。 水を溢れさせずに水筒を傾けることができる最大の角度を求めてください。 水を溢れさせずに水筒を傾けることができる最大の角度を度数法で出力せよ。 出力は、ジャッジの出力との絶対誤差または相対誤差が10^6以下のとき正解と判定される。 水が溢れるパターンは次の2通りあって、水が入っている、または入ってない部分の三角柱を除いた部分の体積がxになるようなθをatanで出せる。
解説を見ると、これに加えて二分法を使って数値的に求める解法も紹介されていた。 二分法というのは解が含まれる区間の中間での値を求め、その値が解より小さいか大きいかによって二分したどちらかの区間を選ぶ操作を繰り返すことで区間の幅を狭めて解を求めるアルゴリズム。収束条件として式に単調性がある必要があるが、θに対してこぼれる限界の水の体積の式は単調減少するので用いることができる。 解説にもコードが付いていたがまずは見ずに書いてみた。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;iomanip&amp;gt; using namespace std; double waterVolume(int a, int b, double rad) { if (rad &amp;lt; atan(1.0 * b / a)) { return a * a * b - (a * (a * tan(rad)) / 2 * a); } else { return b * (b * tan(M_PI / 2 - rad)) / 2 * a; } } int main() { double a, b, x; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; x; double min = 0, max = M_PI / 2; while (true) { double m = (min + max) / 2; double vol = waterVolume(a, b, m); if (abs(vol - x) &amp;lt; pow(10, -6)) { cout &amp;lt;&amp;lt; setprecision(8) &amp;lt;&amp;lt; m / M_PI * 180 &amp;lt;&amp;lt; endl; return 0; } else if (vol &amp;gt; x) { min = m; } else { max = m; } } } 解説のコードでは、パターンの判定でa * tan(theta) &amp;lt;= bを使っているのと、有限回のループでxを上回らない最大のθを探すようになっていた。</description>
    </item>
    
  </channel>
</rss>