<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>newrelic on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/newrelic/</link>
    <description>Recent content in newrelic on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Fri, 08 Apr 2022 12:11:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/newrelic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CloudWatch Logsを介さずにLambdaのテレメトリを行うnewrelic-lambda-extensionとその仕組み</title>
      <link>https://www.sambaiz.net/article/401/</link>
      <pubDate>Fri, 08 Apr 2022 12:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/401/</guid>
      <description>New RelicにLambdaのログを転送するには、CloudWatch Logsに出力したものをサブスクライブして送るLambda function aws-log-ingestionを用いる従来の方法のほかに、Lambda layer newrelic-lambda-extensionを用いる方法があって、トレースログなどをCloudWatc Logsに出力することなく送れるのでコストを最小限に抑えられる。
インストール newrelic-lambda integrations install するとLayerが参照するAPI KeyのSecretのStackなどがデプロイされる。
$ pip3 install newrelic-lambda-cli $ newrelic-lambda integrations install \  --nr-account-id &amp;lt;account id&amp;gt; \  --nr-api-key &amp;lt;api key&amp;gt; \  --linked-account-name &amp;lt;linked account name&amp;gt; \  --enable-license-key-secret \  --aws-profile &amp;lt;aws_profile_name&amp;gt; --aws-region &amp;lt;aws_region&amp;gt; Validating New Relic credentials Retrieving integration license key Creating the AWS role for the New Relic AWS Lambda Integration Waiting for stack creation to complete.</description>
    </item>
    
    <item>
      <title>New RelicのGraphQL API、NerdGraphでリソースを取得する</title>
      <link>https://www.sambaiz.net/article/400/</link>
      <pubDate>Fri, 01 Apr 2022 22:02:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/400/</guid>
      <description>New RelicのNerdGraphはGraphQLのAPIで、リソースを取得したり更新することができる。
curl -X POST https://api.newrelic.com/graphql \ -H &amp;#39;Content-Type: application/json&amp;#39; \ -H &amp;#39;API-Key: *****&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;{ requestContext { userId apiKey } actor { user { name } } }&amp;#34; }&amp;#39; | jq { &amp;#34;data&amp;#34;: { &amp;#34;actor&amp;#34;: { &amp;#34;user&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Taiki Sakamoto&amp;#34; } }, &amp;#34;requestContext&amp;#34;: { &amp;#34;apiKey&amp;#34;: &amp;#34;*****&amp;#34;, &amp;#34;userId&amp;#34;: &amp;#34;*****&amp;#34; } } } GraphiQL explorerで項目を選ぶとクエリが生成される。
 クライアントライブラリから実行することもできる。structはtutoneというツールで GraphQLのスキーマとtemplateから自動生成されている。
package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;github.com/newrelic/newrelic-client-go/newrelic&amp;#34; &amp;#34;github.</description>
    </item>
    
    <item>
      <title>New Relicでインフラやアプリケーションをモニタリングする</title>
      <link>https://www.sambaiz.net/article/399/</link>
      <pubDate>Wed, 30 Mar 2022 19:11:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/399/</guid>
      <description>New RelicはインフラやアプリケーションをモニタリングするSaaSで、同種のサービスとしてはDatadogがある。 2020年に製品や課金体系が変わり、転送量とユーザー数に対して課金されるようになったようだ。 ホストや機能に対して課金されるDatadogと比べると、少人数で多くのインスタンスを管理している場合に有利ということになる。また、Datadogの課金体系はやや複雑で頻繁に台数が増減する環境では請求がどの程度になるか読みづらいところがあるが、こちらは分かりやすい。新しい機能を使っても単価が上がることもないのでいろいろと試しやすいのも良いと思う。
一方、大人数で管理していたり、捌くリクエストが膨大な場合APMの転送量がかさむことでDatadogより高くなるケースがある。 多くの場合はユーザー課金の割合が大きくなるので、Full platform userの数を減らして半額のCore userや無料のBasic userにすればコストが抑えられるが、 DashboardやAlertについては全てのユーザーが使える一方APMの画面が見られるのはFull platform userのみだったりするのが悩ましい。 転送量についてはDrop dataすることで減らすことができるが現状画面からは設定できずNerdGraphを用いる必要がある。次はTerraformで設定を行う例。
New RelicのGraphQL API、NerdGraphでリソースを取得する - sambaiz-net
resource &amp;#34;newrelic_nrql_drop_rule&amp;#34; &amp;#34;heavy_path&amp;#34; { account_id = ***** description = &amp;#34;Drop transactions data&amp;#34; action = &amp;#34;drop_data&amp;#34; nrql = &amp;#34;SELECT * FROM Transaction WHERE `request.uri` = &amp;#39;/heavy_path&amp;#39;&amp;#34; } また、トラブルシューティングが比較的難しい印象があり、なぜかメトリクスが送られないといったことがあったり、古いドキュメントを参照してしまったりしたが、ライブラリやドキュメントはOSSになっており、いざとなれば実装を読んだり修正のPRを出すことができるので大きな問題は感じていない。
AWS連携 New RelicのアカウントからAssumeRoleするReadOnlyAccessとbudgets:ViewBudgetを付与したRoleを作る。
AWSのAssumeRole - sambaiz-net
{ &amp;#34;Statement&amp;#34;: [ { &amp;#34;Action&amp;#34;: [ &amp;#34;budgets:ViewBudget&amp;#34; ], &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;, &amp;#34;Resource&amp;#34;: &amp;#34;*&amp;#34; } ], &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34; } メトリクスの取得は従来の定期的にAPIを呼んでポーリングする方法と、FirehoseにストリーミングするCloudWatch Metric Steamsを用いる方法がサポートされていて、後者が推奨されている。用意されているCloudFormationのテンプレートにLicense Keyを渡してスタックを作成すると次のリソースが作成され、New Relicの画面上に各種リソースのメトリクスが表示されるようになる。</description>
    </item>
    
  </channel>
</rss>
