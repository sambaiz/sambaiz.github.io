<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vr on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/vr/</link>
    <description>Recent content in vr on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Wed, 16 Nov 2016 00:46:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/vr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebVRを動かす</title>
      <link>https://www.sambaiz.net/article/36/</link>
      <pubDate>Wed, 16 Nov 2016 00:46:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/36/</guid>
      <description>WebVRとは Webブラウザ上でVRアプリケーションを動かすためのAPI。 ヘッドマウントディスプレイの動きを3D空間上の動きに変換してくれる。
WebVR API - Web API インターフェイス | MDN
ただし、まだほとんどのブラウザがVR APIをサポートしていないので、 実際はPolyfillで動かすことになる。
動かしてみる まず、webvr-boilerplateを動かしてみる。
$ npm init $ npm install node-static $ git clone https://github.com/borismus/webvr-boilerplate.git $ cd webvr-boilerplate/ &amp;amp;&amp;amp; npm install &amp;amp; cd .. var static = require(&#39;node-static&#39;); var fileServer = new static.Server(&#39;./webvr-boilerplate&#39;); require(&#39;http&#39;).createServer(function (request, response) { request.addListener(&#39;end&#39;, function () { fileServer.serve(request, response); }).resume(); }).listen(8080); http://localhost:8080
を見ると箱が回っているのが映る。
ただ、start_modeに3を指定してVRモードにしようとしたところ、
http://localhost:8080/index.html?start_mode=3
PCのChromeから見ると
base.js:191 Uncaught (in promise) Error: VRDisplay is not capable of presenting というエラーが出てしまった。</description>
    </item>
    
    <item>
      <title>剣を振るVRゲームを作った</title>
      <link>https://www.sambaiz.net/article/29/</link>
      <pubDate>Sun, 30 Oct 2016 19:05:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/29/</guid>
      <description>プレイ動画
CardboardにAndroidを入れて、
iPhoneをくくりつけた傘を動かすと、画面の剣も動くのでこれで敵を倒すゲーム。
実装 剣(iOS) 剣にくくりつけたiPhoneの傾きの値をUnity(Android)に送信している。 iOSはClassic Bluetoothを自由に使えないので、Androidと通信する場合はBLEを使う。 BLEは通常だと20byteしか一度に送れないので、これを超えないよう注意する必要がある。
BLEで通信するところは
iOS端末をBLEのPeripheralにする
で作ったので、端末の傾きを取得して送るだけ。
import UIKit import CoreMotion class Motion{ let peripheral: BLEPeripheral let accelHandler:CMDeviceMotionHandler let manager = CMMotionManager() public init(peripheral :BLEPeripheral, label :UILabel){ self.peripheral = peripheral accelHandler = { (data: CMDeviceMotion?, error: Error?) -&amp;gt; Void in let str = String(format: &amp;quot;%.1f %.1f %.1f&amp;quot;, arguments: [data!.attitude.pitch * 180 / M_PI, data!.attitude.roll * 180 / M_PI, data!.attitude.yaw * 180 / M_PI] ) let res = peripheral.</description>
    </item>
    
  </channel>
</rss>
