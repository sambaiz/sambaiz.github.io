<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/web/</link>
    <description>Recent content in web on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 19 Jun 2021 12:56:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Next.jsのpre-rendering</title>
      <link>https://www.sambaiz.net/article/367/</link>
      <pubDate>Sat, 19 Jun 2021 12:56:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/367/</guid>
      <description>Next.jsはwebpackやbabel,ESLintを内包し、 SSG/SSRやリソースの最適化といった機能を提供するReactのフレームワーク。
create-next-appを実行し、npm run dev すると development modeでサーバーが起動するので localhost:3000/abcd にアクセスすると pages/abcd.tsx の export default されたコンポーネントが描画される。 Fast Refleshが効いているのでファイルを更新するとすぐに反映される。
$ npx create-next-app --ts $ cd my-app $ tree -I node_modules . . ├── README.md ├── next-env.d.ts ├── next.config.js ├── package-lock.json ├── package.json ├── pages │ ├── _app.tsx │ ├── api │ │ └── hello.ts │ └── index.tsx ├── public │ ├── favicon.ico │ └── vercel.svg ├── styles │ ├── Home.module.css │ └── globals.</description>
    </item>
    
    <item>
      <title>HTTPのCache-Control Header</title>
      <link>https://www.sambaiz.net/article/242/</link>
      <pubDate>Fri, 04 Oct 2019 14:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/242/</guid>
      <description>HTTPでCache-Control Headerを付けてレスポンスすると、 クライアントにキャッシュさせてリクエストの回数やレスポンスの通信量を削減することができる。CDNによって挙動が異なるようなので注意が必要。
CDN切り替え作業における、Web版メルカリの個人情報流出の原因につきまして - Mercari Engineering Blog
また、Vary Headerで クライアントが送るHeaderの値が前回と異なる場合にリクエストが送られるようにでき、 Access-Control-Allow-Origin でOriginの値を返す場合、Vary: Origin のようにしないと 他のOriginからのリクエスト時にキャッシュされたHeaderを読んでしまいCORSエラーになってしまう。
max-age キャッシュが有効な秒数を表す。s-maxageというのもあってこれはプロキシやCDNといった共有キャッシュでのみ適用される時間。 Expires Headerがあったとしてもこれらが優先される。
Cache-Control: max-age=30 private 単一ユーザー向けのレスポンスであることを表し、共有キャッシュに保存させないようにする。
Cache-Control: private, max-age=30 no-cache ETag付きのリクエストを毎回投げる。 ETagはリソースの識別子を表すHeaderで、 前回返ってきたETagをリクエストのIf-None-Match Headerで渡すと、変更されてない場合は代わりに304 Not Modifiedが返るのでキャッシュを使い、帯域を節約できる。 つまり文字通りキャッシュされないというわけではなく、304が返ってきたらキャッシュしたデータが使われる。
no-store キャッシュさせない。毎回リクエストが飛びレスポンスが返る。
max-ageもExpires Headerもない場合でもLast-Modified Headerがあれば キャッシュされるのでキャッシュさせたくない場合は明示的に書いたほうがよい。
参考 HTTP キャッシュ | Web Fundamentals | Google Developers
IPA ISEC　セキュア・プログラミング講座：Webアプリケーション編　第5章 暴露対策：プロキシキャッシュ対策</description>
    </item>
    
    <item>
      <title>React, Material-UI, Unstated, RechartsでTODOを作った</title>
      <link>https://www.sambaiz.net/article/215/</link>
      <pubDate>Thu, 28 Mar 2019 17:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/215/</guid>
      <description>コード
create-react-app create-react-appでアプリを作成した。 TypeScriptを有効にしている。
$ npx create-react-app react-todo-unstated --typescript $ cd react-todo-unstated $ tree src/ src/ ├── App.css ├── App.test.tsx ├── App.tsx ├── index.css ├── index.tsx ├── logo.svg ├── react-app-env.d.ts └── serviceWorker.ts $ npm start Material-UI UIはMaterial-UIでUIで作った。
$ npm install --save @material-ui/core @material-ui/icons public/index.htmlにRobotoフォントを入れた。
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;#34;&amp;gt; Unstated UnstatedはReact v16からのContext APIを使ったStateを管理するための薄いライブラリ。
$ npm install --save unstated Stateを持つContainerを作る。
class TodoContainer extends Container&amp;lt;TodoState&amp;gt; { state: TodoState = { newTodo: &amp;#34;&amp;#34;, todos: [], isCreating: false }; changeNewTodo(newTodo: string) { this.</description>
    </item>
    
    <item>
      <title>Chrome ExtensionsとChrome Apps</title>
      <link>https://www.sambaiz.net/article/209/</link>
      <pubDate>Tue, 19 Feb 2019 23:52:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/209/</guid>
      <description>Chrome Extrnsions ツールバーに表示され、ChromeのAPIを呼んで色々できる拡張機能で、manifestとhtml, js, cssなどから構成される。 開発中はディレクトリごとchrome://extensions/から読み込むとインストールでき、ツールバーにアイコンが表示される。
test-chrome-extension
manifest.json manifest_version, name, versionと、brower_actionかpage_actionのどちらかはRequired。
{ &amp;#34;manifest_version&amp;#34;: 2, &amp;#34;name&amp;#34;: &amp;#34;test-chrome-extension&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0&amp;#34;, &amp;#34;icons&amp;#34;: { &amp;#34;128&amp;#34;: &amp;#34;images/icon-128.png&amp;#34; }, &amp;#34;page_action&amp;#34;: { &amp;#34;default_icon&amp;#34;: { &amp;#34;32&amp;#34;: &amp;#34;images/icon-32.png&amp;#34; } }, &amp;#34;options_page&amp;#34;: &amp;#34;options.html&amp;#34;, &amp;#34;background&amp;#34;: { &amp;#34;scripts&amp;#34;: [ &amp;#34;background.js&amp;#34; ], &amp;#34;persistent&amp;#34;: false }, &amp;#34;permissions&amp;#34;: [ &amp;#34;declarativeContent&amp;#34;, &amp;#34;storage&amp;#34; ], &amp;#34;content_security_policy&amp;#34;: &amp;#34;script-src &amp;#39;self&amp;#39;; object-src &amp;#39;self&amp;#39;&amp;#34; }  page_action  常にツールバーに表示されているbrowser_actionに対して、限られたページでのみ有効なAction。 有効かどうかは declarativeContent.onPageChangedの conditionsや、tags.onUpdatedのリスナー内で制御する。
 options_page: &amp;ldquo;拡張機能のオプション&amp;quot;で表示されるページ background  インストール時や更新時など必要なときにロードされるスクリプト。イベントリスナーはここで設定する。
chrome.runtime.onInstalled.addListener(() =&amp;gt; { chrome.declarativeContent.onPageChanged.removeRules(undefined, () =&amp;gt; { chrome.</description>
    </item>
    
    <item>
      <title>同じ/異なるオリジンのiframeの中からできること</title>
      <link>https://www.sambaiz.net/article/194/</link>
      <pubDate>Wed, 24 Oct 2018 23:48:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/194/</guid>
      <description>同じ/異なるオリジンのiframeの中からできることを確認する。同じオリジンというのは ホストだけではなくプロトコルやポート番号も同じということ。
検証用ページ 3つのiframeがあるページを作った。 それぞれabout:blankで動的に書き込むのと、同じオリジンのhtmlを参照しているものと、異なるオリジンのhtmlを参照しているもの。
$ cat index.html &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; p{ width:100px; height:100px; background:#999; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;parent&amp;lt;/p&amp;gt; &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;#34;about:blank&amp;#34; id=&amp;#34;if1&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var parentValue = &amp;#34;PARENT&amp;#34;; window.addEventListener(&amp;#34;message&amp;#34;, (event) =&amp;gt; { console.log(`message from ${event.origin}: ${event.data}`); }, false); &amp;lt;/script&amp;gt; &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;#34;./iframe.html&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;#34;https://*****.ngrok.io/iframe.html&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;./index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 1つ目のiframeの中にscriptタグなどを書き込むJS。
$ cat index.js const el = document.getElementById(&amp;#34;if1&amp;#34;); const doc = el.contentDocument; const p = doc.createElement(&amp;#39;p&amp;#39;); p.textContent = &amp;#34;child&amp;#34;; doc.body.appendChild(p); var scriptTag = doc.</description>
    </item>
    
    <item>
      <title>WebSocketでの通信内容をWiresharkで見る</title>
      <link>https://www.sambaiz.net/article/177/</link>
      <pubDate>Tue, 10 Jul 2018 23:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/177/</guid>
      <description>Webで双方向通信するためのプロトコル、WebSocketでの通信内容をWiresharkで見る。
アプリケーション サーバー package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;golang.org/x/net/websocket&amp;#34; ) type Payload struct { A string } func Handler(ws *websocket.Conn) { ctx, cancel := context.WithCancel(context.Background()) go func() { var payload Payload for { err := websocket.JSON.Receive(ws, &amp;amp;payload) if err != nil { if err == io.EOF { fmt.Println(&amp;#34;connection closed&amp;#34;) } else { fmt.Println(err) } cancel() break } fmt.Println(payload.A) } }() websocket.JSON.Send(ws, Payload{A: &amp;#34;a&amp;#34;}) select { case &amp;lt;-ctx.Done(): } } func main() { http.</description>
    </item>
    
    <item>
      <title>DOMの(next/previous)SiblingとElementSiblingの値</title>
      <link>https://www.sambaiz.net/article/176/</link>
      <pubDate>Wed, 04 Jul 2018 23:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/176/</guid>
      <description>Siblingは兄弟姉妹という意味
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;#34;li2&amp;#34;&amp;gt;2&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;script&amp;gt; const el = document.querySelector(&amp;#34;li#li2&amp;#34;); &amp;lt;/script&amp;gt; Sibling elのpreviousSiblingを取ると&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;になると思いきや、その直前の空白や改行を含むtext nodeが返る。 それらが全くない場合隣のElementが返ることになる。
const el2 = el.previousSibling; console.log(`previousSibling: ${el2.nodeName}&amp;#34;${el2.textContent}&amp;#34;`); /* #text &amp;#34; &amp;#34; */ const el4 = el.nextSibling; console.log(`nextSibling: ${el4.nodeName}&amp;#34;${el4.textContent}&amp;#34;`); // LI &amp;#34;3&amp;#34; ElementSibling 多くの場合で意図した結果が返るのはこっち。
const el3 = el.previousElementSibling; console.log(`previousElementSibling: ${el3.nodeName}&amp;#34;${el3.textContent}&amp;#34;`); // LI &amp;#34;1&amp;#34;  const el5 = el.nextElementSibling; console.log(`nextElementSibling: ${el5.nodeName}&amp;#34;${el5.textContent}&amp;#34;`); // LI &amp;#34;3&amp;#34; firstChildとfirstElementChildなどの関係も同じ。存在を忘れていてひっかかった。
const el6 = document.querySelector(&amp;#34;ul&amp;#34;).firstChild; console.log(`firstChild: ${el6.nodeName}&amp;#34;${el6.textContent}&amp;#34;`); /* fistChild: #text &amp;#34; &amp;#34; */ </description>
    </item>
    
    <item>
      <title>ブラウザのwindow間の値渡し</title>
      <link>https://www.sambaiz.net/article/156/</link>
      <pubDate>Fri, 23 Feb 2018 02:01:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/156/</guid>
      <description>直接Windowを参照する オリジン(プロトコル+ポート+ホスト)が同じ場合は、親はopen()した返り値で、子はwindow.openerで相手のwindowが取れて、直接参照したりDOMを操作したりすることもできる。
同じ/異なるオリジンのiframeの中からできること - sambaiz-net
$ cat index.html &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;Open window&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;#34;btn2&amp;#34;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;view&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; let win2; const button = document.getElementById(&amp;#34;btn&amp;#34;); button.addEventListener(&amp;#34;click&amp;#34;, () =&amp;gt; { window.foo = &amp;#34;bar from window1&amp;#34;; win2 = window.open(&amp;#34;index2.html&amp;#34;); }, false); const button2 = document.getElementById(&amp;#34;btn2&amp;#34;); button2.addEventListener(&amp;#34;click&amp;#34;, () =&amp;gt; { if (win2) { win2.close(); } }, false); &amp;lt;/script&amp;gt; $ cat index2.html &amp;lt;button id=&amp;#34;btn&amp;#34;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;#34;view&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; console.log(window.aaa); const parentWindow = window.opener; const view = document.</description>
    </item>
    
    <item>
      <title>Chromeで任意のscriptを読み込まれる前に差し替える</title>
      <link>https://www.sambaiz.net/article/150/</link>
      <pubDate>Thu, 01 Feb 2018 21:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/150/</guid>
      <description>ChromeのDevToolsではSourcesからscriptを書き換えられるようになっているが、 一行目にbreakpointを挟んで更新するとそこで止まるので読み込まれる前に差し替えることができる。 ページの読み込み時に呼ばれるSDKやライブラリの影響範囲を調べたりデバッグしたりするのに便利。
確認用jsとhtml
console.log(&amp;#34;original&amp;#34;) &amp;lt;script src=&amp;#34;index.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 読み込み時に実行されるconsole.logの文章を変えた。</description>
    </item>
    
    <item>
      <title>JavaScriptのrequire/importの歴史</title>
      <link>https://www.sambaiz.net/article/143/</link>
      <pubDate>Sat, 11 Nov 2017 20:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/143/</guid>
      <description>scriptタグを並べる &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;a.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;b.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 先に書かれたa.jsで定義された内容はb.jsで読むことができる。
$ cat a.js const a = &amp;#39;a is defined&amp;#39;; const divA = document.createElement(&amp;#39;div&amp;#39;); divA.textContent = (typeof b !== &amp;#39;undefined&amp;#39;) ? b : &amp;#39;b is undefined&amp;#39;; document.body.appendChild(divA); $ cat b.js const b = &amp;#39;b is defined&amp;#39;; const divB = document.createElement(&amp;#39;div&amp;#39;); divB.textContent = (typeof a !== &amp;#39;undefined&amp;#39;) ? a : &amp;#39;a is undefined&amp;#39;; document.body.appendChild(divB); 依存が増えてくると順番を考えるのが大変。さらにグローバルな名前空間を汚染してしまう。
b is undefined a is defined AMDとCommonJS というのも、かつてのJSにはモジュールを読み込む仕組みがなかった。 そこで考えられたのがAMDやCommonJSというフォーマット。 AMD(Asynchronous module definition)はRequireJSによって提供されるrequire()で動的にscriptタグを埋める。CommonJSはNodeでもおなじみのrequire()で、これにWebpackを通して一つのファイルにまとめておく。同じ関数名が使われているが全くの別物。</description>
    </item>
    
    <item>
      <title>Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った</title>
      <link>https://www.sambaiz.net/article/132/</link>
      <pubDate>Sun, 10 Sep 2017 23:45:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/132/</guid>
      <description>PuppeteerでHeadless Chromeを動かすコードを Lambda上で動かすStarter Kitを作った。
puppeteer-lambda-starter-kit
Chromeの準備 Puppeteerのインストール時に落としてくるChromeをLambda上で動かそうとしても Lambdaにないshared libraryに依存しているため失敗する。
error while loading shared libraries: libpangocairo-1.0.so.0: cannot open shared object file: No such file or directory Lambda上でHeadless Chromeを動かす例がないか調べたらserverless-chromeというのがあって、 Headless用の設定でChromeをビルドしていた。 ほかにはchromelessというのもあるけど これはserverless-chromeに 依存している。 最小構成でPuppeteerを使いたかったので、今回はこれらを使わず一から作ることにした。
serverless-chromeにもビルドしたものが置いてあるが、少しバージョンが古いようだったので最新版でビルドした。 基本的には書いてある 通りやればうまくいく。他のプロセスとのshared memoryとして/dev/shmを使っているのを、/tmpに置き換える ようにしないと、実行時のpage.goto()でFailed Provisional Load: ***, error_code: -12になる。
ビルドしたheadless_shellには問題になった依存は含まれていないようだ。
$ ldd headless_shell linux-vdso.so.1 =&amp;gt; (0x00007ffcb6fed000) libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00007f5f17dbe000) libdl.so.2 =&amp;gt; /lib64/libdl.so.2 (0x00007f5f17bba000) librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00007f5f179b1000) libnss3.so =&amp;gt; /usr/lib64/libnss3.so (0x00007f5f17692000) libnssutil3.so =&amp;gt; /usr/lib64/libnssutil3.so (0x00007f5f17466000) libsmime3.so =&amp;gt; /usr/lib64/libsmime3.</description>
    </item>
    
    <item>
      <title>Headless Chromeでファイルをダウンロードする</title>
      <link>https://www.sambaiz.net/article/131/</link>
      <pubDate>Sun, 03 Sep 2017 18:51:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/131/</guid>
      <description>Chrome DevTools Protocolに ExperimentalだけどPage.setDownloadBehavior というのがあったので、これを呼んでファイルをダウンロードしてみた。
今回は公式のDevToolsのNode API、Puppeteerを使うけど、 setDownloadBehaviorを送るAPIはまだなく、直接clientを取ってsendするので他のライブラリでもやることは変わらないと思う。 Puppeteerのインストールの際にChromiumも入る。setDownloadBehaviorは現行Chromeの60では対応していないようだけど、62が入ったのでなんとかなりそう。
$ yarn add puppeteer $ find . -name &amp;#34;*chrome*&amp;#34; ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac/Chromium.app/Contents/Versions/62.0.3198.0/Chromium Framework.framework/Versions/A/Resources/chrome_100_percent.pak ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac/Chromium.app/Contents/Versions/62.0.3198.0/Chromium Framework.framework/Versions/A/Resources/chrome_200_percent.pak ちなみに、このChromeをLambda上で実行しようとすると失敗する。
Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った
 ChromeでChromeをダウンロードしてみる。
const puppeteer = require(&amp;#39;puppeteer&amp;#39;), fs = require(&amp;#39;fs&amp;#39;); const headless = true, downloadPath = &amp;#39;./Download&amp;#39;; (async () =&amp;gt; { const browser = await puppeteer.launch({headless: headless}); const page = await browser.newPage(); await page._client.send( &amp;#39;Page.setDownloadBehavior&amp;#39;, {behavior : &amp;#39;allow&amp;#39;, downloadPath: downloadPath} ); await page.goto(&amp;#39;https://www.google.co.jp/chrome/browser/desktop/index.html&amp;#39;, {waitUntil: &amp;#39;networkidle&amp;#39;}); await page.</description>
    </item>
    
    <item>
      <title>CloudflareでカスタムドメインのGitHub PagesにHTTPSでアクセスできるようにする</title>
      <link>https://www.sambaiz.net/article/127/</link>
      <pubDate>Mon, 21 Aug 2017 23:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/127/</guid>
      <description>このサイトはGitHub Pagesでカスタムドメインsambaiz.netを設定して、 Apex Domain(sambaiz.net)にAレコードを登録して運用していたのだけれど、これだとカスタムドメインの証明書を置けないのでHTTPSでアクセスすると警告が出てしまう。 いい加減HTTPだと許されない風潮になってきたのでCloudflareを前に挟んでHTTPSでアクセスできるようにした。 ついでにCNAMEを登録できないApex Domain(sambaiz.net)をやめてwww.sambaiz.netに向ける。
DNSの設定をする Cloudflareでドメインを入れると既存のDNS Recordsを読み込むので必要に応じて修正する。 CloudflareではCNAME FlatteningによってApex Domainにも設定上ではCNAMEを与えることができ、内部でAレコードに解決してくれる。 そのためApex Domainをそのまま使っても実は問題ないのだけど、今後のために変えておく。 www.sambaiz.netにGitHub PagesのCNAMEを設定し、sambaiz.net(@)にはwww.sambaiz.netをCNAMEとして設定した。
あとGitHub Pagesの方のカスタムドメインもwww.sambaiz.netにした。 wwwを設定するとApex Domainでアクセスしたときにリダイレクトするようになっているので 既存のリンクが切れたり混在することはない。
指示された*.ns.cloudflare.comのようなCloudflareのネームサーバーをドメインに設定する。 さくらの場合、Apex Domainのネームサーバーはゾーン表示ではなくWHOIS情報のところから変更できる。 設定してしばらくするとCloudflareを通してアクセスが飛び警告なくHTTPSでアクセスできるようになる。 証明書は共有のものになっている。
正常にアクセスできることを確認できたら今HTTPになっている画像やリンクもHTTPSにする。
$ find . -name &amp;#39;.git*&amp;#39; -prune -o -name &amp;#39;public&amp;#39; -prune -o -name &amp;#39;static&amp;#39; -prune -o -type d -o -print | xargs sed -i &amp;#34;&amp;#34; &amp;#34;s/http:\/\/sambaiz.net/https:\/\/www.sambaiz.net/g&amp;#34; Cloudflareの機能 Cloudflareにはいくつかプランがあって、今回はFreeプランにした。
Analytics  キャッシュされている/ないリクエスト数や帯域、それによる節約量 ブロックした脅威の数 何人/どこの国からアクセスが来たか コンテンツ(HTML/CSS/PNG)ごとのリクエストの割合  などがわかる。FreeだとWeb TrafficやGeographyが直近24時間より短いスパンで取れない。
Crypto SSLまわりの設定。
 Flexible: クライアントとCloudflareはHTTPS、CloudflareとオリジンサーバーはHTTPで通信する。 Full: デフォルト。Cloudflareとオリジンサーバーの通信もHTTPSで行うが、証明書の検証は行われない。 Full(Strict) 証明書の検証も行う。  から選択する。Business以上のPlanだと共有の証明書ではなく独自のものを上げることもできる。</description>
    </item>
    
    <item>
      <title>CSSのdisplayとposition</title>
      <link>https://www.sambaiz.net/article/98/</link>
      <pubDate>Sat, 06 May 2017 14:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/98/</guid>
      <description>display レンダリングに使うボックスを指定する。
outer display type pのようなブロックレベル要素やspanのようなインラインレベル要素に関わらず、指定したボックスにレンダリングする。
&amp;lt;style&amp;gt; .bg { background-color: #22ee22; width: 150px; height: 50px; } &amp;lt;/style&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;#34;display:none&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;none&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;p style=&amp;#34;display:inline&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;inline&amp;lt;/p&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;#34;display:block&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;block&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;#34;display:inline-block&amp;#34; class=&amp;#34;bg&amp;#34;&amp;gt;inline-block&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; flexbox displayでflexやinline-flexを指定すると領域に応じてサイズやレイアウトが柔軟に決定されるflexboxになる。 IE11もいくつかのバグのため挙動が異なることがあるがサポートはしている。 レスポンシブなデザインを実現する他の方法としては後述するgridや、@media screen and (min-width: 900px) {}のような メディアクエリによる条件付きスタイルがある。 メディアクエリは&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;のようにしてビューポートのサイズを指定しないと意図通りに動かない。
flex-flowは 表示する方向のflex-directionと 折り返しのflex-wrapのショートハンドプロパティ。
子要素のflexは 伸びるときの倍率のflex-grow(default: 0)と 縮むときの倍率のflex-shrink(default: 1)、 初期サイズのflex-basis(default: auto)の ショートハンドプロパティ。
&amp;lt;style&amp;gt; .bg { background-color: #22ee22; } .</description>
    </item>
    
    <item>
      <title>Firebaseをwebで使う(Hosting, Authentication, Realtime Database, Storage)</title>
      <link>https://www.sambaiz.net/article/94/</link>
      <pubDate>Sun, 16 Apr 2017 20:03:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/94/</guid>
      <description>Firebaseとは GoogleのmBaaS。Android/iOSアプリの開発に使う認証、データストア、クラッシュレポート、分析、通知、広告などなど全部入りサービス。 今年のGoogleI/Oでも毎時間のように Firebaseのセッションがあって大分推している印象。
基本的にはアプリで使うのだけれど、webで使える機能も結構ある。今回は
 Hosting Authentication Realtime Database Storage  を使ってみる。
料金 プランは無料のSPARKと25ドル/月のFLAME、従量課金のBLAZEがある。 試す分にはSPARKで十分だけど、Realtime Databaseの同時接続数が100なので注意。
セットアップ firebase-cliをインストール、ログインして初期化する。
$ npm install -g firebase-tools $ firebase login $ mkdir firebase-chat &amp;amp;&amp;amp; cd firebase-chat $ firebase init ... ? What Firebase CLI features do you want to setup for this folder? ❯◉ Database: Deploy Firebase Realtime Database Rules ◉ Functions: Configure and deploy Cloud Functions ◉ Hosting: Configure and deploy Firebase Hosting sites ?</description>
    </item>
    
    <item>
      <title>Cookieのメモ</title>
      <link>https://www.sambaiz.net/article/69/</link>
      <pubDate>Wed, 22 Feb 2017 20:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/69/</guid>
      <description>https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
レスポンスにSet-Cookieヘッダーが含まれていればブラウザはcookieに保存する。
HTTP/1.0 200 OK Content-type: text/html Set-Cookie: yummy_cookie=choco Set-Cookie: tasty_cookie=strawberry リクエスト時にはCookieヘッダーにcookieを入れて送る。
GET /sample_page.html HTTP/1.1 Host: www.example.org Cookie: yummy_cookie=choco; tasty_cookie=strawberry CookieにExpire(ある期間まで有効)またはMax-Age(特定の期間の間有効)を設定するとPermanent cookieとなる。 いずれも設定しなかった場合Session cookieとなり、ブラウザを閉じると削除されることになっているが、 ブラウザのセッション復元機能が有効になっていれば永続化される。
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secureを付けるとHTTPSでのみ送られる。 また、HttpOnlyはjsからdocument.cookieなどでアクセスすることができなくなる。 サイトにXSSの脆弱性があるとき、cookieが盗まれてしまうのを防ぐことができるので問題なければ設定するべき。
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly Domainを指定するとそのドメインとサブドメインへのリクエストのときに送られる。しないとそのドメインだけ。Pathも指定できる。
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Domain=example.com; Path=/ リクエストが飛び、Set-Cookieヘッダーを受け取ればCookieに書かれるので、アクセスしたサイトのドメイン以外のCookieが書かれることがある。 このようなCookieを3rd party cookieといって、広告のトラッキングによく使われるが、 Safariなどのデフォルト設定では書き込めなくなっている。</description>
    </item>
    
  </channel>
</rss>
