<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/web/</link>
    <description>Recent content in Web on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Wed, 24 Oct 2018 23:48:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/web/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>同じ/異なるオリジンのiframeの中からできること</title>
      <link>https://www.sambaiz.net/article/194/</link>
      <pubDate>Wed, 24 Oct 2018 23:48:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/194/</guid>
      <description>同じ/異なるオリジンのiframeの中からできることを確認する。同じオリジンというのは ホストだけではなくプロトコルやポート番号も同じということ。 Web広告ではCSSやJSのグローバルスコープといったページ全体に及ぶ影響を分離するためによく使われている。
検証用ページ 3つのiframeがあるページを作った。 それぞれabout:blankで動的に書き込むのと、同じオリジンのhtmlを参照しているものと、異なるオリジンのhtmlを参照しているもの。
$ cat index.html &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt; p{ width:100px; height:100px; background:#999; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;parent&amp;lt;/p&amp;gt; &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;quot;about:blank&amp;quot; id=&amp;quot;if1&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; var parentValue = &amp;quot;PARENT&amp;quot;; window.addEventListener(&amp;quot;message&amp;quot;, (event) =&amp;gt; { console.log(`message from ${event.origin}: ${event.data}`); }, false); &amp;lt;/script&amp;gt; &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;quot;./iframe.html&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;iframe src=&amp;quot;https://*****.ngrok.io/iframe.html&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  1つ目のiframeの中にscriptタグなどを書き込むJS。
$ cat index.js const el = document.getElementById(&amp;quot;if1&amp;quot;); const doc = el.contentDocument; const p = doc.createElement(&#39;p&#39;); p.textContent = &amp;quot;child&amp;quot;; doc.</description>
    </item>
    
    <item>
      <title>WebSocketでの通信内容をWiresharkで見る</title>
      <link>https://www.sambaiz.net/article/177/</link>
      <pubDate>Tue, 10 Jul 2018 23:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/177/</guid>
      <description>Webで双方向通信するためのプロトコル、WebSocketでの通信内容をWiresharkで見る。
アプリケーション サーバー package main import ( &amp;quot;context&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;golang.org/x/net/websocket&amp;quot; ) type Payload struct { A string } func Handler(ws *websocket.Conn) { ctx, cancel := context.WithCancel(context.Background()) go func() { var payload Payload for { err := websocket.JSON.Receive(ws, &amp;amp;payload) if err != nil { if err == io.EOF { fmt.Println(&amp;quot;connection closed&amp;quot;) } else { fmt.Println(err) } cancel() break } fmt.Println(payload.A) } }() websocket.JSON.Send(ws, Payload{A: &amp;quot;a&amp;quot;}) select { case &amp;lt;-ctx.</description>
    </item>
    
    <item>
      <title>DOMの(next/previous)SiblingとElementSiblingの値</title>
      <link>https://www.sambaiz.net/article/176/</link>
      <pubDate>Wed, 04 Jul 2018 23:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/176/</guid>
      <description>Siblingは兄弟姉妹という意味
&amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt; &amp;lt;li id=&amp;quot;li2&amp;quot;&amp;gt;2&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;script&amp;gt; const el = document.querySelector(&amp;quot;li#li2&amp;quot;); &amp;lt;/script&amp;gt;  Sibling elのpreviousSiblingを取ると&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;になると思いきや、その直前の空白や改行を含むtext nodeが返る。 それらが全くない場合隣のElementが返ることになる。
const el2 = el.previousSibling; console.log(`previousSibling: ${el2.nodeName} &amp;quot;${el2.textContent}&amp;quot;`); /* #text &amp;quot; &amp;quot; */ const el4 = el.nextSibling; console.log(`nextSibling: ${el4.nodeName} &amp;quot;${el4.textContent}&amp;quot;`); // LI &amp;quot;3&amp;quot;  ElementSibling 多くの場合で意図した結果が返るのはこっち。
const el3 = el.previousElementSibling; console.log(`previousElementSibling: ${el3.nodeName} &amp;quot;${el3.textContent}&amp;quot;`); // LI &amp;quot;1&amp;quot; const el5 = el.nextElementSibling; console.log(`nextElementSibling: ${el5.nodeName} &amp;quot;${el5.textContent}&amp;quot;`); // LI &amp;quot;3&amp;quot;  firstChildとfirstElementChildなどの関係も同じ。存在を忘れていてひっかかった。
const el6 = document.querySelector(&amp;quot;ul&amp;quot;).firstChild; console.log(`firstChild: ${el6.</description>
    </item>
    
    <item>
      <title>ブラウザのwindow間の値渡し</title>
      <link>https://www.sambaiz.net/article/156/</link>
      <pubDate>Fri, 23 Feb 2018 02:01:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/156/</guid>
      <description>直接Windowを参照する プロトコル、ポート、ドメインが全て同じ場合は、親はopen()した返り値で、子はwindow.openerで相手のwindowが取れて、直接参照したりDOMを操作したりすることもできる。
$ cat index.html &amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;Open window&amp;lt;/button&amp;gt; &amp;lt;button id=&amp;quot;btn2&amp;quot;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;quot;view&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; let win2; const button = document.getElementById(&amp;quot;btn&amp;quot;); button.addEventListener(&amp;quot;click&amp;quot;, () =&amp;gt; { window.foo = &amp;quot;bar from window1&amp;quot;; win2 = window.open(&amp;quot;index2.html&amp;quot;); }, false); const button2 = document.getElementById(&amp;quot;btn2&amp;quot;); button2.addEventListener(&amp;quot;click&amp;quot;, () =&amp;gt; { if (win2) { win2.close(); } }, false); &amp;lt;/script&amp;gt;  $ cat index2.html &amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;Close window&amp;lt;/button&amp;gt; &amp;lt;div id=&amp;quot;view&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; console.log(window.aaa); const parentWindow = window.opener; const view = document.getElementById(&amp;quot;view&amp;quot;); view.</description>
    </item>
    
    <item>
      <title>Chromeで任意のscriptを読み込まれる前に差し替える</title>
      <link>https://www.sambaiz.net/article/150/</link>
      <pubDate>Thu, 01 Feb 2018 21:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/150/</guid>
      <description>ChromeのDevToolsではSourcesからscriptを書き換えられるようになっているが、 一行目にbreakpointを挟んで更新するとそこで止まるので読み込まれる前に差し替えることができる。 ページの読み込み時に呼ばれるSDKやライブラリの影響範囲を調べたりデバッグしたりするのに便利。
確認用jsとhtml
console.log(&amp;quot;original&amp;quot;)  &amp;lt;script src=&amp;quot;index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  読み込み時に実行されるconsole.logの文章を変えた。</description>
    </item>
    
    <item>
      <title>JavaScriptのrequire/importの歴史</title>
      <link>https://www.sambaiz.net/article/143/</link>
      <pubDate>Sat, 11 Nov 2017 20:20:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/143/</guid>
      <description>scriptタグを並べる &amp;lt;body&amp;gt; &amp;lt;script src=&amp;quot;a.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;b.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt;  先に書かれたa.jsで定義された内容はb.jsで読むことができる。
$ cat a.js const a = &#39;a is defined&#39;; const divA = document.createElement(&#39;div&#39;); divA.textContent = (typeof b !== &#39;undefined&#39;) ? b : &#39;b is undefined&#39;; document.body.appendChild(divA); $ cat b.js const b = &#39;b is defined&#39;; const divB = document.createElement(&#39;div&#39;); divB.textContent = (typeof a !== &#39;undefined&#39;) ? a : &#39;a is undefined&#39;; document.body.appendChild(divB);  依存が増えてくると順番を考えるのが大変。さらにグローバルな名前空間を汚染してしまう。
b is undefined a is defined  AMDとCommonJS というのも、かつてのJSにはモジュールを読み込む仕組みがなかった。 そこで考えられたのがAMDやCommonJSというフォーマット。 AMD(Asynchronous module definition)はRequireJSによって提供されるrequire()で動的にscriptタグを埋める。CommonJSはNodeでもおなじみのrequire()で、これにWebpackを通して一つのファイルにまとめておく。同じ関数名が使われているが全くの別物。</description>
    </item>
    
    <item>
      <title>Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った</title>
      <link>https://www.sambaiz.net/article/132/</link>
      <pubDate>Sun, 10 Sep 2017 23:45:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/132/</guid>
      <description>PuppeteerでHeadless Chromeを動かすコードを Lambda上で動かすStarter Kitを作った。
puppeteer-lambda-starter-kit
Chromeの準備 Puppeteerのインストール時に落としてくるChromeをLambda上で動かそうとしても Lambdaにないshared libraryに依存しているため失敗する。
error while loading shared libraries: libpangocairo-1.0.so.0: cannot open shared object file: No such file or directory  Lambda上でHeadless Chromeを動かす例がないか調べたらserverless-chromeというのがあって、 Headless用の設定でChromeをビルドしていた。 ほかにはchromelessというのもあるけど これはserverless-chromeに 依存している。 最小構成でPuppeteerを使いたかったので、今回はこれらを使わず一から作ることにした。
serverless-chromeにもビルドしたものが置いてあるが、少しバージョンが古いようだったので最新版でビルドした。 基本的には書いてある 通りやればうまくいく。他のプロセスとのshared memoryとして/dev/shmを使っているのを、/tmpに置き換える ようにしないと、実行時のpage.goto()でFailed Provisional Load: ***, error_code: -12になる。
ビルドしたheadless_shellには問題になった依存は含まれていないようだ。
$ ldd headless_shell linux-vdso.so.1 =&amp;gt; (0x00007ffcb6fed000) libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00007f5f17dbe000) libdl.so.2 =&amp;gt; /lib64/libdl.so.2 (0x00007f5f17bba000) librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00007f5f179b1000) libnss3.so =&amp;gt; /usr/lib64/libnss3.so (0x00007f5f17692000) libnssutil3.so =&amp;gt; /usr/lib64/libnssutil3.so (0x00007f5f17466000) libsmime3.</description>
    </item>
    
    <item>
      <title>Headless Chromeでファイルをダウンロードする</title>
      <link>https://www.sambaiz.net/article/131/</link>
      <pubDate>Sun, 03 Sep 2017 18:51:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/131/</guid>
      <description>Chrome DevTools Protocolに ExperimentalだけどPage.setDownloadBehavior というのがあったので、これを呼んでファイルをダウンロードしてみた。
今回は公式のDevToolsのNode API、Puppeteerを使うけど、 setDownloadBehaviorを送るAPIはまだなく、直接clientを取ってsendするので他のライブラリでもやることは変わらないと思う。 Puppeteerのインストールの際にChromiumも入る。setDownloadBehaviorは現行Chromeの60では対応していないようだけど、62が入ったのでなんとかなりそう。
$ yarn add puppeteer $ find . -name &amp;quot;*chrome*&amp;quot; ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac/Chromium.app/Contents/Versions/62.0.3198.0/Chromium Framework.framework/Versions/A/Resources/chrome_100_percent.pak ./node_modules/puppeteer/.local-chromium/mac-497674/chrome-mac/Chromium.app/Contents/Versions/62.0.3198.0/Chromium Framework.framework/Versions/A/Resources/chrome_200_percent.pak  ちなみに、このChromeをLambda上で実行しようとすると失敗する。
Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った
ChromeでChromeをダウンロードしてみる。
const puppeteer = require(&#39;puppeteer&#39;), fs = require(&#39;fs&#39;); const headless = true, downloadPath = &#39;./Download&#39;; (async () =&amp;gt; { const browser = await puppeteer.launch({headless: headless}); const page = await browser.newPage(); await page._client.send( &#39;Page.setDownloadBehavior&#39;, {behavior : &#39;allow&#39;, downloadPath: downloadPath} ); await page.goto(&#39;https://www.google.co.jp/chrome/browser/desktop/index.html&#39;, {waitUntil: &#39;networkidle&#39;}); await page.</description>
    </item>
    
    <item>
      <title>CloudflareでカスタムドメインのGitHub PagesにHTTPSでアクセスできるようにする</title>
      <link>https://www.sambaiz.net/article/127/</link>
      <pubDate>Mon, 21 Aug 2017 23:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/127/</guid>
      <description>このサイトはGitHub Pagesでカスタムドメインsambaiz.netを設定して、 Apex Domain(sambaiz.net)にAレコードを登録して運用していたのだけれど、これだとカスタムドメインの証明書を置けないのでHTTPSでアクセスすると警告が出てしまう。 いい加減HTTPだと許されない風潮になってきたのでCloudflareを前に挟んでHTTPSでアクセスできるようにした。 ついでにCNAMEを登録できないApex Domain(sambaiz.net)をやめてwww.sambaiz.netに向ける。
DNSの設定をする Cloudflareでドメインを入れると既存のDNS Recordsを読み込むので必要に応じて修正する。 CloudflareではCNAME FlatteningによってApex Domainにも設定上ではCNAMEを与えることができ、内部でAレコードに解決してくれる。 そのためApex Domainをそのまま使っても実は問題ないのだけど、今後のために変えておく。 www.sambaiz.netにGitHub PagesのCNAMEを設定し、sambaiz.net(@)にはwww.sambaiz.netをCNAMEとして設定した。
あとGitHub Pagesの方のカスタムドメインもwww.sambaiz.netにした。 wwwを設定するとApex Domainでアクセスしたときにリダイレクトするようになっているので 既存のリンクが切れたり混在することはない。
指示された*.ns.cloudflare.comのようなCloudflareのネームサーバーをドメインに設定する。 さくらの場合、Apex Domainのネームサーバーはゾーン表示ではなくWHOIS情報のところから変更できる。 設定してしばらくするとCloudflareを通してアクセスが飛び警告なくHTTPSでアクセスできるようになる。 証明書は共有のものになっている。
正常にアクセスできることを確認できたら今HTTPになっている画像やリンクもHTTPSにする。
$ find . -name &#39;.git*&#39; -prune -o -name &#39;public&#39; -prune -o -name &#39;static&#39; -prune -o -type d -o -print | xargs sed -i &amp;quot;&amp;quot; &amp;quot;s/http:\/\/sambaiz.net/https:\/\/www.sambaiz.net/g&amp;quot;  Cloudflareの機能 Cloudflareにはいくつかプランがあって、今回はFreeプランにした。
Analytics  キャッシュされている/ないリクエスト数や帯域、それによる節約量 ブロックした脅威の数 何人/どこの国からアクセスが来たか コンテンツ(HTML/CSS/PNG)ごとのリクエストの割合  などがわかる。FreeだとWeb TrafficやGeographyが直近24時間より短いスパンで取れない。
Crypto SSLまわりの設定。
 Flexible: クライアントとCloudflareはHTTPS、CloudflareとオリジンサーバーはHTTPで通信する。 Full: デフォルト。Cloudflareとオリジンサーバーの通信もHTTPSで行うが、証明書の検証は行われない。 Full(Strict) 証明書の検証も行う。  から選択する。Business以上のPlanだと共有の証明書ではなく独自のものを上げることもできる。</description>
    </item>
    
    <item>
      <title>CSSのdisplayとposition</title>
      <link>https://www.sambaiz.net/article/98/</link>
      <pubDate>Sat, 06 May 2017 14:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/98/</guid>
      <description>display レンダリングに使うボックスを指定する。
outer display type pのようなブロックレベル要素やspanのようなインラインレベル要素に関わらず、指定したボックスにレンダリングする。
&amp;lt;style&amp;gt; .bg { background-color: #22ee22; width: 150px; height: 50px; } &amp;lt;/style&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;quot;display:none&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;none&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;p style=&amp;quot;display:inline&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;inline&amp;lt;/p&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;quot;display:block&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;block&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;this is &amp;lt;span style=&amp;quot;display:inline-block&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;inline-block&amp;lt;/span&amp;gt; desu&amp;lt;/div&amp;gt;  中央寄せ 中央寄せはblockにwidthを設定してmargin autoするか、 親要素でtext-align: centerしてinline(-block)にする。
&amp;lt;style&amp;gt; .bg { background-color: #22ee22; height: 80px; } &amp;lt;/style&amp;gt; &amp;lt;div style=&amp;quot;margin: 5 auto&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;block margin&amp;lt;/div&amp;gt; &amp;lt;div style=&amp;quot;margin: 5 auto; width: 100px&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;block margin width&amp;lt;/div&amp;gt; &amp;lt;div style=&amp;quot;margin: 5 auto; display: inline-block&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;inline-block margin&amp;lt;/div&amp;gt; &amp;lt;div style=&amp;quot;text-align: center&amp;quot;&amp;gt; &amp;lt;div style=&amp;quot;display: inline-block&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;inline-block align-center&amp;lt;/div&amp;gt; &amp;lt;div style=&amp;quot;width: 100px&amp;quot; class=&amp;quot;bg&amp;quot;&amp;gt;block align-center width&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;  flex displayでflexを指定するとflex containerになる。 flex-flowは 表示する方向のflex-directionと 折り返しのflex-wrapのショートハンドプロパティ。</description>
    </item>
    
    <item>
      <title>Firebaseをwebで使う(Hosting, Authentication, Realtime Database, Storage)</title>
      <link>https://www.sambaiz.net/article/94/</link>
      <pubDate>Sun, 16 Apr 2017 20:03:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/94/</guid>
      <description>Firebaseとは GoogleのmBaaS。Android/iOSアプリの開発に使う認証、データストア、クラッシュレポート、分析、通知、広告などなど全部入りサービス。 今年のGoogleI/Oでも毎時間のように Firebaseのセッションがあって大分推している印象。
基本的にはアプリで使うのだけれど、webで使える機能も結構ある。今回は
 Hosting Authentication Realtime Database Storage  を使ってみる。
料金 プランは無料のSPARKと25ドル/月のFLAME、従量課金のBLAZEがある。 試す分にはSPARKで十分だけど、Realtime Databaseの同時接続数が100なので注意。
セットアップ firebase-cliをインストール、ログインして初期化する。
$ npm install -g firebase-tools $ firebase login $ mkdir firebase-chat &amp;amp;&amp;amp; cd firebase-chat $ firebase init ... ? What Firebase CLI features do you want to setup for this folder? ❯◉ Database: Deploy Firebase Realtime Database Rules ◉ Functions: Configure and deploy Cloud Functions ◉ Hosting: Configure and deploy Firebase Hosting sites ?</description>
    </item>
    
    <item>
      <title>Cookieのメモ</title>
      <link>https://www.sambaiz.net/article/69/</link>
      <pubDate>Wed, 22 Feb 2017 20:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/69/</guid>
      <description>https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
レスポンスにSet-Cookieヘッダーが含まれていればブラウザはcookieに保存する。
HTTP/1.0 200 OK Content-type: text/html Set-Cookie: yummy_cookie=choco Set-Cookie: tasty_cookie=strawberry  リクエスト時にはCookieヘッダーにcookieを入れて送る。
GET /sample_page.html HTTP/1.1 Host: www.example.org Cookie: yummy_cookie=choco; tasty_cookie=strawberry  CookieにExpire(ある期間まで有効)またはMax-Age(特定の期間の間有効)を設定するとPermanent cookieとなる。 いずれも設定しなかった場合Session cookieとなり、ブラウザを閉じると削除されることになっているが、 ブラウザのセッション復元機能が有効になっていれば永続化される。
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;  Secureを付けるとHTTPSでのみ送られる。 また、HttpOnlyはjsからdocument.cookieなどでアクセスすることができなくなる。 サイトにXSSの脆弱性があるとき、cookieが盗まれてしまうのを防ぐことができるので問題なければ設定するべき。
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly  Domainを指定するとそのドメインとサブドメインへのリクエストのときに送られる。しないとそのドメインだけ。Pathも指定できる。
Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Domain=example.com; Path=/  リクエストが飛び、Set-Cookieヘッダーを受け取ればCookieに書かれるので、アクセスしたサイトのドメイン以外のCookieが書かれることがある。 このようなCookieを3rd party cookieといって、広告のトラッキングによく使われるが、 Safariなどのデフォルト設定では書き込めなくなっている。</description>
    </item>
    
  </channel>
</rss>