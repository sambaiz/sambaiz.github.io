<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ble on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/ble/</link>
    <description>Recent content in ble on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 04 Jun 2017 11:57:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/ble/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unity/UWPでBLEを扱うプラグインを作る</title>
      <link>https://www.sambaiz.net/article/105/</link>
      <pubDate>Sun, 04 Jun 2017 11:57:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/105/</guid>
      <description>コードはここ
この動画の 50:00あたりから説明があるように、 ビルドされたWSAが読むUWPのdllのほかに、 Unityエディタ上から読むための.NET Framework3.5のdllを用意する。 こうすることで実行環境ごとの違いをUnityコード上で気にしなくてもよくなる。
新しいプロジェクトで
  Visual C# から.NET Framework 3.5にしてクラスライブラリ(.NET Framework)
  Visual C# -&amp;gt; Windows -&amp;gt; ユニバーサルからクラスライブラリ(ユニバーサルWindows)
  の2つのプロジェクトを同じソリューションに作成する。 VS2017で.NET Frameworkのクラスライブラリプロジェクトを作成するためには Visual Studio Installerで.NET Coreのワークロードをインストールする必要がある。 また、これとは別に動作確認用のUWPアプリケーションプロジェクトを作成した。
UWPの方のプロジェクトにあるClass1.csを削除し、追加 -&amp;gt; 既存の項目から、 もう片方のClass1.csをリンクとして追加して、この共通のcsにUWPのコードを書いていくんだが、 そのまま書くと当然.NET Frameworkの方でビルドできないので 実装部分を#if WINDOWS_UWP ~ #endif で囲む。UWPの方のプロジェクトにはプロパティ -&amp;gt; ビルドの条件付きコンパイルにWINDOWS_UWPが含まれているので有効になる。
public void Start() { #if WINDOWS_UWP  ... #endif } UWPでBLEを扱うのは前書いた通り。 ただし、なぜかXAMLに依存しているようでD3Dビルドすると失敗する。
UWPでBLEデバイスとペアリングして値を取得する - sambaiz-net
ビルドするとdllができるので.NET Frameworkの方をAssets/Pluginsに置いてInspectorからEditorにだけチェックを入れる。 UWPの方はAssets/Plugins/WSAに置くとWSA Playerにだけチェックが入る。
あとは普通にusingして使うだけ。Edit-&amp;gt;Project Settings-&amp;gt;PlayerからBluetoothのcapabilityを有効にするのを忘れずに。 Package.appxmanifestは上書きされないようなので前にビルドしたやつがあったら一旦消す。
using UnityBLE; public class BLE : MonoBehaviour { string value = &amp;#34;no connection&amp;#34;; public GameObject text; private string serviceUUID = &amp;#34;***&amp;#34;; private string characteristicUUID = &amp;#34;***&amp;#34;; void Start() { var ble = new UnityBLE.</description>
    </item>
    
    <item>
      <title>UnityでAndroidのBLEを使うネイティブプラグインを作る</title>
      <link>https://www.sambaiz.net/article/27/</link>
      <pubDate>Sun, 23 Oct 2016 20:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/27/</guid>
      <description>UnityからBLEを使うためのネイティブプラグインを作る。
Android側 まず、Activityなしのプロジェクトを作って、New ModuleからAndroid Libraryを選択。 これらのパッケージ名がUnityで使うものと被らないようにする。
/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes/classes.jar をModuleの方のlibsに置く。
import com.unity3d.player.UnityPlayer; このjarは元々のやつとかぶってしまうので除外(build.gradleに追加)
android.libraryVariants.all { variant -&amp;gt; variant.outputs.each { output -&amp;gt; output.packageLibrary.exclude(&amp;#39;libs/classes.jar&amp;#39;) } } ActiviyはUnityPlayer.currentActivityで取得でき、 Unity側のメソッドを呼ぶのも UnityPlayer.UnitySendMessage(mGameObjName, mCallBackName, new String(characteristic.getValue())); のようにできる。
public class BLE { private final static String TAG = BLE.class.getSimpleName(); private static final int REQUEST_ENABLE_BT = 1; private static final int MY_PERMISSION_RESPONSE = 2; private static final String PERIPHERAL_LOCAL_NAME = &amp;#34;my-ble&amp;#34;; private static final UUID PERIPHERAL_SERIVCE_UUID = UUID.fromString(&amp;#34;BF9CB85F-620C-4A67-BDD2-1A64213F74CA&amp;#34;); private static final UUID PERIPHERAL_CHARACTERISTIC_UUID = UUID.</description>
    </item>
    
    <item>
      <title>iOS端末をBLEのPeripheralにする</title>
      <link>https://www.sambaiz.net/article/26/</link>
      <pubDate>Sun, 23 Oct 2016 01:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/26/</guid>
      <description>CoreBluetoothプログラミングガイド
流れ まず、CoreBluetooth.frameworkを追加する。
import CoreBluetooth CBPeripheralManagerを生成。
peripheralManager = CBPeripheralManager(delegate: self, queue: nil) stateが変化したらdelegateメソッドが呼ばれるので.poweredOnであることを確認できれば Managerの準備は完了。
public func peripheralManagerDidUpdateState(_ peripheral: CBPeripheralManager){ switch (peripheral.state){ case .poweredOn: print(&amp;#34;PeripheralManager state is ok&amp;#34;) ready = true default: print(&amp;#34;PeripheralManager state is ng:&amp;#34;, peripheral.state) ready = false } } Characteristicを作成。CBCharacteristicProperties.read.union(CBCharacteristicProperties.notify)で、 Centralが読みにくることも、通知を受け取ることもできるようにし、CBAttributePermissions.readableでreadのみ許可する。 このvalueをnilにしておかないと、キャッシュされあとで変更できなくなる。
characteristic = CBMutableCharacteristic( type: CHARACTERISTIC_UUID, properties: CBCharacteristicProperties.read.union(CBCharacteristicProperties.notify), value:nil, permissions:CBAttributePermissions.readable) このCharacteristicのServiceを作成し、Managerに登録する。
let service = CBMutableService(type: SERVICE_UUID, primary: true) service.characteristics = [characteristic] peripheralManager!.add(service) ready = true public func peripheralManager(_ peripheral: CBPeripheralManager, didAdd service: CBService, error: Error?</description>
    </item>
    
    <item>
      <title>android-BluetoothLeGattを読む</title>
      <link>https://www.sambaiz.net/article/25/</link>
      <pubDate>Fri, 21 Oct 2016 14:10:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/25/</guid>
      <description>BLEのサンプルコード。
https://github.com/googlesamples/android-BluetoothLeGatt
DeviceScanActivity BLEをサポートしているかチェックする。 BluetoothChatではBluetoothAdapterを取得するのに BluetoothAdapter.getDefaultAdapter()のようにしていたが、 BLEをサポートしているような新しいバージョンでは、BluetoothManagerのgetAdapter()を使うらしい。
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getActionBar().setTitle(R.string.title_devices); mHandler = new Handler(); // Use this check to determine whether BLE is supported on the device. Then you can  // selectively disable BLE-related features.  if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) { Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show(); finish(); } // Initializes a Bluetooth adapter. For API level 18 and above, get a reference to  // BluetoothAdapter through BluetoothManager.  final BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.</description>
    </item>
    
  </channel>
</rss>
