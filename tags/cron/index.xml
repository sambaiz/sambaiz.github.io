<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sambaiz.net</title>
    <link>http://sambaiz.net/tags/cron/index.xml</link>
    <language>ja</language>
    <author>sambaiz</author>
    <rights>(C) 2017</rights>
    <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Unixのパイプをmkfifo()で作ってdup2()で標準出力にコピーして書き込む</title>
          <link>http://sambaiz.net/article/87/</link>
          <pubDate>Fri, 24 Mar 2017 22:06:00 &#43;0900</pubDate>
          <author></author>
          <guid>http://sambaiz.net/article/87/</guid>
          <description>

&lt;h2 id=&#34;パイプとは&#34;&gt;パイプとは&lt;/h2&gt;

&lt;p&gt;Unixでプロセス間通信するためのもの。シェルで使う&lt;code&gt;|&lt;/code&gt;は無名パイプ。
&lt;code&gt;mkfifo()&lt;/code&gt;システムコールで名前付きパイプを作成でき、これを読み書きすることで任意のプロセス間でやりとりできる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkfifo hoge
$ ls -lh
$ prw-r--r-- ... 0B ... hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常のファイルと同様に読み書きすることができ、読み書きどちらかを行おうとすると待つことになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo hoge &amp;amp; # 読まれるまで待つ
$ cat hoge
aaaaa
[1]+  Done                    echo &amp;quot;aaaaa&amp;quot; &amp;gt; hoge

$ cat hoge &amp;amp; # 書かれるまで待つ
$ echo &amp;quot;bbbbb&amp;quot; &amp;gt; hoge
bbbbb
[1]+  Done                    cat hoge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルディスクリプタをコピーするシステムコール&lt;code&gt;dup2()&lt;/code&gt;でopenしたパイプを標準出力(1)にコピーしてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

int main(){
  int fd = open(&amp;quot;./hoge&amp;quot;, O_WRONLY);
  if(fd &amp;lt; 0){
    printf(&amp;quot;fail to open\n&amp;quot;);
    return 1;
  }

  printf(&amp;quot;OPEN %d \n&amp;quot;, fd);

  if(dup2(fd, 1) &amp;lt; 0){
    printf(&amp;quot;fail to dup2\n&amp;quot;);
    return 2;
  }

  printf(&amp;quot;WRITE\n&amp;quot;); // これがどこに書き込まれるか

  close(fd);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最後のprintfの内容は標準出力ではなく、パイプに書き込まれていることがわかる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./a.out &amp;amp;
$ echo &amp;quot;read `cat hoge` from pipe&amp;quot;
OPEN 3 
read WRITE from pipe
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%91%E3%82%A4%E3%83%97_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)#.E3.83.97.E3.83.AD.E3.82.B0.E3.83.A9.E3.83.A0.E3.81.AB.E3.82.88.E3.82.8B.E3.83.91.E3.82.A4.E3.83.97.E3.81.AE.E4.BD.9C.E6.88.90&#34;&gt;パイプ (コンピュータ) - Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/richmikan@github/items/bb660a58690ac01ec295&#34;&gt;mkfifoコマンドって使ってますか？ - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/stc1988/items/9354204d3c2ff210512b&#34;&gt;リダイレクトの挙動 - Qiita&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>crontabのメモ</title>
          <link>http://sambaiz.net/article/70/</link>
          <pubDate>Fri, 24 Feb 2017 21:40:00 &#43;0900</pubDate>
          <author></author>
          <guid>http://sambaiz.net/article/70/</guid>
          <description>

&lt;p&gt;各ユーザーごとのcron設定。&lt;code&gt;crontab -e&lt;/code&gt;でも編集できるけど、間違えて&lt;code&gt;-r&lt;/code&gt;にすると全部消えてしまうのでこういう風に一旦取り出してから編集すると安全。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ crontab -l &amp;gt; ~/crontab
$ echo &amp;quot;*/1 * * * * /hoge/fuga.sh&amp;quot; &amp;gt;&amp;gt; ~/crontab
$ crontab &amp;lt; ~/crontab
$ crontab -l
*/1 * * * * /hoge/fuga.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://vividcode.hatenablog.com/entry/man-cron-and-crontab&#34;&gt;cron 設定ファイル (crontab ファイル) の置き場所と書式について - ひだまりソケットは壊れない&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>logrotateでログをローテーションする</title>
          <link>http://sambaiz.net/article/33/</link>
          <pubDate>Wed, 09 Nov 2016 22:15:00 &#43;0900</pubDate>
          <author></author>
          <guid>http://sambaiz.net/article/33/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;https://github.com/Sirupsen/logrus&#34;&gt;logrus&lt;/a&gt;がローテーションする仕組みを持っていなかったので、
READMEに書いてあったlogrotateを使う。/etc/logrotate.dの中に設定ファイルを入れて、cronで回して使う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ubuntu:14.04

ADD logrotate /etc/logrotate.d/app
RUN echo &amp;quot;/usr/sbin/logrotate /etc/logrotate.conf&amp;quot; &amp;gt; /etc/cron.daily/logrotate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイル(logrotate)はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/var/log/app.log {
  daily
  rotate 4
  missingok
  delaycompress
  dateext
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;daily&lt;/code&gt;で1日に1回、&lt;code&gt;rotate 4&lt;/code&gt;で過去4日分残し、
&lt;code&gt;missingok&lt;/code&gt;でファイルがなくてもエラーにせず、&lt;code&gt;delaycompress&lt;/code&gt;で圧縮するのをローテーションした次の回にして、
&lt;code&gt;dateext&lt;/code&gt;でローテーションしたファイルの末尾を数字ではなく日付にする。&lt;/p&gt;

&lt;p&gt;実際に動かして確かめる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;logrotate&lt;/code&gt;を実行すると、&lt;code&gt;/var/lib/logrotate/status&lt;/code&gt;に過去に見た時間が入る。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;aaaaa&amp;quot; &amp;gt; /var/log/app.log
$ logrotate /etc/logrotate.conf
$ cat /var/lib/logrotate/status
logrotate state -- version 2
...
&amp;quot;/var/log/app.log&amp;quot; 2016-11-9-11:0:0
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;強制的にローテーションさせてみる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &amp;quot;aaaa&amp;quot; &amp;gt; /var/log/app.log
$ logrotate -f /etc/logrotate.conf
$ ls /var/log | grep app
app.log
app.log-20161109

$ cat /var/log/app.log-20161109
aaaaa
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    

  </channel>
</rss>
