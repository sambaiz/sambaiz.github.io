<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cron on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/cron/</link>
    <description>Recent content in cron on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Fri, 24 Mar 2017 22:06:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/cron/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unixのパイプをmkfifo()で作ってdup2()で標準出力にコピーして書き込む</title>
      <link>https://www.sambaiz.net/article/87/</link>
      <pubDate>Fri, 24 Mar 2017 22:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/87/</guid>
      <description>パイプとは Unixでプロセス間通信するためのもの。シェルで使う|は無名パイプ。 mkfifo()システムコールで名前付きパイプを作成でき、これを読み書きすることで任意のプロセス間でやりとりできる。
$ mkfifo hoge $ ls -lh $ prw-r--r-- ... 0B ... hoge 通常のファイルと同様に読み書きすることができ、読み書きどちらかを行おうとすると待つことになる。
$ echo hoge &amp;amp; # 読まれるまで待つ $ cat hoge aaaaa [1]+ Done echo &amp;quot;aaaaa&amp;quot; &amp;gt; hoge $ cat hoge &amp;amp; # 書かれるまで待つ $ echo &amp;quot;bbbbb&amp;quot; &amp;gt; hoge bbbbb [1]+ Done cat hoge ファイルディスクリプタをコピーするシステムコールdup2()でopenしたパイプを標準出力(1)にコピーしてみる。
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; int main(){ int fd = open(&amp;quot;./hoge&amp;quot;, O_WRONLY); if(fd &amp;lt; 0){ printf(&amp;quot;fail to open\n&amp;quot;); return 1; } printf(&amp;quot;OPEN %d \n&amp;quot;, fd); if(dup2(fd, 1) &amp;lt; 0){ printf(&amp;quot;fail to dup2\n&amp;quot;); return 2; } printf(&amp;quot;WRITE\n&amp;quot;); // これがどこに書き込まれるか close(fd); } 最後のprintfの内容は標準出力ではなく、パイプに書き込まれていることがわかる。</description>
    </item>
    
    <item>
      <title>crontabのメモ</title>
      <link>https://www.sambaiz.net/article/70/</link>
      <pubDate>Fri, 24 Feb 2017 21:40:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/70/</guid>
      <description>各ユーザーごとのcron設定。crontab -eでも編集できるけど、間違えて-rにすると全部消えてしまうのでこういう風に一旦取り出してから編集すると安全。
$ crontab -l &amp;gt; ~/crontab $ echo &amp;quot;*/1 * * * * /hoge/fuga.sh&amp;quot; &amp;gt;&amp;gt; ~/crontab $ crontab &amp;lt; ~/crontab $ crontab -l */1 * * * * /hoge/fuga.sh 参考 cron 設定ファイル (crontab ファイル) の置き場所と書式について - ひだまりソケットは壊れない</description>
    </item>
    
    <item>
      <title>logrotateでログをローテーションする</title>
      <link>https://www.sambaiz.net/article/33/</link>
      <pubDate>Wed, 09 Nov 2016 22:15:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/33/</guid>
      <description>logrusがローテーションする仕組みを持っていなかったので、 READMEに書いてあったlogrotateを使う。/etc/logrotate.dの中に設定ファイルを入れて、cronで回して使う。
FROM ubuntu:14.04 ADD logrotate /etc/logrotate.d/app RUN echo &amp;quot;/usr/sbin/logrotate /etc/logrotate.conf&amp;quot; &amp;gt; /etc/cron.daily/logrotate 設定ファイル(logrotate)はこんな感じ。
/var/log/app.log { daily rotate 4 missingok delaycompress dateext } dailyで1日に1回、rotate 4で過去4日分残し、 missingokでファイルがなくてもエラーにせず、delaycompressで圧縮するのをローテーションした次の回にして、 dateextでローテーションしたファイルの末尾を数字ではなく日付にする。
実際に動かして確かめる。
logrotateを実行すると、/var/lib/logrotate/statusに過去に見た時間が入る。
$ echo &amp;quot;aaaaa&amp;quot; &amp;gt; /var/log/app.log $ logrotate /etc/logrotate.conf $ cat /var/lib/logrotate/status logrotate state -- version 2 ... &amp;quot;/var/log/app.log&amp;quot; 2016-11-9-11:0:0 ... 強制的にローテーションさせてみる。
$ echo &amp;quot;aaaa&amp;quot; &amp;gt; /var/log/app.log $ logrotate -f /etc/logrotate.conf $ ls /var/log | grep app app.log app.log-20161109 $ cat /var/log/app.log-20161109 aaaaa </description>
    </item>
    
  </channel>
</rss>