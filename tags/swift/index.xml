<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/swift/</link>
    <description>Recent content in swift on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 25 Jan 2020 23:55:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SwiftでGCDのDispatchQueueに処理を投げて並列実行させる</title>
      <link>https://www.sambaiz.net/article/256/</link>
      <pubDate>Sat, 25 Jan 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/256/</guid>
      <description>GCD (Grand Central Dispatch)はmacOSやiOSのマルチコア環境で、 効率的に並列処理を実行するための仕組み。 OperationQueueというのもあるが、これもGCD上で動く。
DispatchQueue 処理をどのスレッドで実行するか管理するキュー。 どこからでも参照できるmainとglobalのキュー以外に新しくキューを作成することもできる。 labelは衝突しないようにreverse-DNS nameにすることが推奨されている。
DispatchQueue.main.async {} DispatchQueue.global(qos: .default).async {} DispatchQueue.global(qos: .background).async {} DispatchQueue(label: &amp;quot;net.sambaiz.serial_dispatch_queue&amp;quot;).async {} DispatchQueue(label: &amp;quot;net.sambaiz.concurrent_dispatch_queue&amp;quot;, attributes: .concurrent).async {} sync/async ブロッキングするsync()としないasync()。排他制御ではないのに注意。
DispatchQueue.global().async { print(&amp;quot;async&amp;quot;) DispatchQueue.main.sync { print(&amp;quot;sync&amp;quot;) } print(&amp;quot;done&amp;quot;) } print(&amp;quot;run&amp;quot;) run async sync done serial/concurrent 処理を単一のスレッドで行う(serial)か、複数のスレッドで行う(concurrent)かはキューによって決まり、 メインスレッドで動かすmainはserial、globalはconcurrentになっている。 自作のキューの場合は作成時に attributes: .concurrent を渡すとconcurrentになり、渡さないとserialになる。
まずはconcurrentの例から。
for i in 1...3 { DispatchQueue.global().async { print(&amp;quot;start concurrent \(i) thread: \(Thread.current)&amp;quot;) print(&amp;quot;return concurrent \(i) thread: \(Thread.current)&amp;quot;) } } print(&amp;quot;return thread: \(Thread.</description>
    </item>
    
    <item>
      <title>Objective-CでFrameworkを作りSwiftからimportする</title>
      <link>https://www.sambaiz.net/article/254/</link>
      <pubDate>Sun, 12 Jan 2020 17:41:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/254/</guid>
      <description>Frameworkの作成 New -&amp;gt; ProjectでFrameworkをLanguage Objective-Cで作成。
最低限の実装とHeaderを書いた。このHeaderはBuild PhasesのHeadersにPublicとして登録されている。
 TestObjcFramework.m  #import &amp;lt;Foundation/Foundation.h&amp;gt; void hello() { NSLog(@&amp;quot;hello&amp;quot;); };  TestObjcFramework.h  #import &amp;lt;UIKit/UIKit.h&amp;gt; //! Project version number for TestObjcFramework. FOUNDATION_EXPORT double TestObjcFrameworkVersionNumber; //! Project version string for TestObjcFramework. FOUNDATION_EXPORT const unsigned char TestObjcFrameworkVersionString[]; // In this header, you should import all the public headers of your framework using statements like #import &amp;lt;TestObjcFramework/PublicHeader.h&amp;gt; void hello(void); arm64(実機)/x86_64(Simulator)両方で使えるUniversal Frameworkをビルドするため、 New -&amp;gt; TargetでAggregateを作成し、Build PhasesのNew Run Script Phaseで、 各環境でxcodebuildしてlipoでUniversal Binaryにする次のスクリプトを追加する。</description>
    </item>
    
    <item>
      <title>SwiftのError enumとtry, if case</title>
      <link>https://www.sambaiz.net/article/249/</link>
      <pubDate>Sun, 24 Nov 2019 23:29:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/249/</guid>
      <description>Error Handling — The Swift Programming Language (Swift 5.1)
SwiftではErrorをenumで列挙でき、次の例でいうsomeParamのようにAssociated valuesを含めることもできる。 throwすると他の言語ではスタックトレースを作るので重い処理になるが、Swiftは作らないのでreturnするようにエラーを返せる。
import UIKit enum SampleError: Error { case ReasonFoo case ReasonBar(someParam: Int) } func errorFunc() throws -&amp;gt; String { throw SampleError.ReasonBar(someParam: 100) } throws付きの関数を呼ぶ際はdo-catchするtryか、nilが返るtry?、落ちるtry!のいずれかを付ける。 Associated valuesがある場合、==は使えず、if case .ReasonBar = errorのように比較する。
do { try errorFunc() } catch SampleError.ReasonFoo { print(&amp;quot;foo!&amp;quot;) } catch SampleError.ReasonBar(let someParam) { print(&amp;quot;bar! \(someParam)&amp;quot;) // =&amp;gt; bar! 100 } do { try errorFunc() } catch let error { if case .</description>
    </item>
    
    <item>
      <title>SwiftのXMLParser</title>
      <link>https://www.sambaiz.net/article/248/</link>
      <pubDate>Sun, 24 Nov 2019 23:12:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/248/</guid>
      <description>SwiftのXMLParserはイベント駆動のparser。
import UIKit class ParserSample: NSObject { private let parser: XMLParser init(data: Data) { parser = XMLParser(data: data) super.init() parser.delegate = self } func parse() { guard parser.parse() else { guard let err = parser.parserError else { print(&amp;quot;parse error but unknown reason&amp;quot;) return } print(&amp;quot;parse error: \(err.localizedDescription)&amp;quot;) return } print(&amp;quot;after parse()&amp;quot;) } } XMLParserDelegateでイベントを拾ってオブジェクトに詰めるなりする。全て実装する必要はなく、この例ではタグの開始と文字列、CDATA、エラー、パース終了時の関数を実装している。
extension ParserSample: XMLParserDelegate { func parser(_ parser: XMLParser, didStartElement elementName: String, namespaceURI: String?, qualifiedName qName: String?, attributes attributeDict: [String : String] = [:]) { print(&amp;quot;parsing &amp;lt;\(elementName)&amp;gt;&amp;quot;) if elementName == &amp;quot;ERROR&amp;quot; { self.</description>
    </item>
    
  </channel>
</rss>