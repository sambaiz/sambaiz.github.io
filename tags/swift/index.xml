<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/swift/</link>
    <description>Recent content in Swift on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 07 Jul 2020 21:01:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>iOSアプリとLLVMのbitcode</title>
      <link>https://www.sambaiz.net/article/286/</link>
      <pubDate>Tue, 07 Jul 2020 21:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/286/</guid>
      <description>&lt;p&gt;Objective-CやSwiftはLLVMを通して機械語にコンパイルされる。&#xA;Swiftの場合、フロントエンドのコンパイラによってASTが作られ&#xA;SIL(Swift Intermediate Language)という中間表現に変換された後、&#xA;LLVM IR(intermediate representation)に再度変換され、&#xA;これをLLVM Optimizerで最適化したものが&#xA;バックエンドのLLVMに渡りターゲットアーキテクチャの機械語に変換される流れになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのクラスをObjective-CのClass型に渡してinitしたときに落ちるパターン</title>
      <link>https://www.sambaiz.net/article/284/</link>
      <pubDate>Sun, 28 Jun 2020 23:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/284/</guid>
      <description>&lt;p&gt;Objective-Cのクラスは基本的に&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject&#34;&gt;NSObject&lt;/a&gt;をルートクラスに持ち、その&lt;code&gt;init()&lt;/code&gt;が継承またはオーバーライドされるが、&#xA;SwiftのクラスはNSObjectを継承していなかったり他のdesignated initializerが存在することで&lt;code&gt;init()&lt;/code&gt;が存在しないことや、default initializerのために明示的な&lt;code&gt;init()&lt;/code&gt;が存在しない場合がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのARCとweak、delegateが呼ばれなかったりObjective-Cで返り値が0やNOになる原因</title>
      <link>https://www.sambaiz.net/article/283/</link>
      <pubDate>Sat, 27 Jun 2020 23:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/283/</guid>
      <description>&lt;p&gt;SwiftやObjective-Cは&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html&#34;&gt;ARC (Automatic Reference Counting)&lt;/a&gt;という仕組みでメモリを管理していて、&#xA;インスタンスへの参照カウントが0になったときにそのメモリが開放される。昔は参照カウントの増減を手動でやっていたが今はARCが自動でやってくれる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのMetatypeとMetadata</title>
      <link>https://www.sambaiz.net/article/282/</link>
      <pubDate>Thu, 25 Jun 2020 20:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/282/</guid>
      <description>&lt;p&gt;Objcの&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/class?language=occ&#34;&gt;Class&lt;/a&gt;型のように&#xA;インスタンスではなくクラスそのものを取りたい場合、Swiftでは&lt;code&gt;Foo.Type&lt;/code&gt;で表せる&lt;a href=&#34;https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID455&#34;&gt;Metatype&lt;/a&gt;を用いる。&#xA;値はクラスからは&lt;code&gt;Foo.self&lt;/code&gt;で、インスタンスからは&lt;code&gt;type(of: Foo())&lt;/code&gt;で得られる。&#xA;初期化の際はサブクラスにも存在することが保証されるrequired initializerを呼ぶか、継承できないfinal classである必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swiftのassociatedtypeとtype erasure</title>
      <link>https://www.sambaiz.net/article/281/</link>
      <pubDate>Wed, 24 Jun 2020 23:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/281/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID189&#34;&gt;associatedtype&lt;/a&gt;はprotocolのジェネリクスのようなもので、複数の型に対応した定義を書くことができる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;P1&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    associatedtype T&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some&lt;/span&gt;(x: T)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some2&lt;/span&gt;(x: T)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;C1&lt;/span&gt;: P1 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some&lt;/span&gt;(x: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    // ambiguous inference of associated type &amp;#39;T&amp;#39;: &amp;#39;String&amp;#39; vs. &amp;#39;Int&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    func some2(x: String) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;        print(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some2&lt;/span&gt;(x: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;C2&lt;/span&gt;: P1 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some&lt;/span&gt;(x: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// OK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some2&lt;/span&gt;&amp;lt;T&amp;gt;(x: T) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通常、protocolは&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID275&#34;&gt;existential type&lt;/a&gt;として変数の型に指定できるが、&#xA;associatedtypeが含まれるとその型が不明なので指定できない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swiftのdesignated/convenience/required/default initializerと継承</title>
      <link>https://www.sambaiz.net/article/280/</link>
      <pubDate>Tue, 23 Jun 2020 21:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/280/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/Initialization.html&#34;&gt;Initialization — The Swift Programming Language (Swift 5.3)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;designated initializerはプライマリなinitializerで、全ての初期化されていないプロパティを初期化し、スーパークラスの&lt;code&gt;init()&lt;/code&gt;を呼んでチェーンを作る。&#xA;convenience initializerは利便性のためのinitializerで、他のinitializerを呼んで最終的にdesignated initializerが呼ばれるようにする。&#xA;required initializerは継承が必須なinitializerで、サブクラスにも存在することが保証される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのURLSession</title>
      <link>https://www.sambaiz.net/article/276/</link>
      <pubDate>Sun, 31 May 2020 02:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/276/</guid>
      <description>&lt;p&gt;Swiftの&lt;a href=&#34;https://developer.apple.com/documentation/foundation/urlsession&#34;&gt;URLSession&lt;/a&gt;は&#xA;ネットワーク通信を行う&lt;a href=&#34;https://developer.apple.com/documentation/foundation/urlsessiontask&#34;&gt;URLSessionTask&lt;/a&gt;を生成するオブジェクト。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;request&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; session: URLSession) -&amp;gt; () -&amp;gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Void&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;url&lt;/span&gt; = URL(string: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://api.publicapis.org/health&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;request&lt;/span&gt; = URLRequest(url: url)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        request.httpMethod = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        request.addValue(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;, forHTTPHeaderField: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;task&lt;/span&gt; = session.dataTask(with: request) { data, response, error &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;httpResponse&lt;/span&gt; = response &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt;? HTTPURLResponse &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;not http response &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;error&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; httpResponse.statusCode &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt; == &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bad status code: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;httpResponse.statusCode&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;data&lt;/span&gt; = data {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;str&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(data: data, encoding: .utf8) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(str) &lt;span style=&#34;color:#6272a4&#34;&gt;// =&amp;gt; {&amp;#34;alive&amp;#34;: true}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        task.resume()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;シングルトンのsharedのほか、コンストラクタに&#xA;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/urlsessionconfiguration&#34;&gt;URLSessionConfiguration&lt;/a&gt;&#xA;を渡して、&lt;code&gt;allowsCellularAccess&lt;/code&gt; といった設定やdelegateを持ったインスタンスを作ることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのJSONEncoder/DecoderとCodable protocol</title>
      <link>https://www.sambaiz.net/article/275/</link>
      <pubDate>Tue, 26 May 2020 01:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/275/</guid>
      <description>&lt;p&gt;Swiftの&lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt;/&lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;Decoder&lt;/a&gt;は&#xA;JSON文字列をCodable(Encodable &amp;amp; Decodable) protocolを実装したClassやStructにエンコード/デコードするオブジェクト。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftでGCDのDispatchQueueに処理を投げて並列実行させる</title>
      <link>https://www.sambaiz.net/article/256/</link>
      <pubDate>Sat, 25 Jan 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/256/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/DISPATCH&#34;&gt;GCD (Grand Central Dispatch)&lt;/a&gt;はmacOSやiOSのマルチコア環境で、&#xA;効率的に並列処理を実行するための仕組み。&#xA;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/operationqueue&#34;&gt;OperationQueue&lt;/a&gt;というのもあるが、これもGCD上で動く。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dispatchqueue&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/dispatch/dispatchqueue&#34;&gt;DispatchQueue&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;処理をどのスレッドで実行するか管理するキュー。&#xA;どこからでも参照できるmainとglobalのキュー以外に新しくキューを作成することもできる。&#xA;labelは衝突しないようにreverse-DNS nameにすることが推奨されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Objective-CでFrameworkを作りSwiftからimportする</title>
      <link>https://www.sambaiz.net/article/254/</link>
      <pubDate>Sun, 12 Jan 2020 17:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/254/</guid>
      <description>&lt;h2 id=&#34;frameworkの作成&#34;&gt;Frameworkの作成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;New -&amp;gt; Project&lt;/code&gt;でFrameworkをLanguage Objective-Cで作成。&lt;/p&gt;&#xA;&lt;p&gt;最低限の実装とHeaderを書いた。このHeaderはBuild PhasesのHeadersにPublicとして登録されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのError enumとtry, if case</title>
      <link>https://www.sambaiz.net/article/249/</link>
      <pubDate>Sun, 24 Nov 2019 23:29:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/249/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html&#34;&gt;Error Handling — The Swift Programming Language (Swift 5.1)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;SwiftではErrorをenumで列挙でき、次の例でいうsomeParamのようにAssociated valuesを含めることもできる。&#xA;throwすると他の言語ではスタックトレースを作るので重い処理になるが、Swiftは作らないのでreturnするようにエラーを返せる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのXMLParser</title>
      <link>https://www.sambaiz.net/article/248/</link>
      <pubDate>Sun, 24 Nov 2019 23:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/248/</guid>
      <description>&lt;p&gt;Swiftの&lt;a href=&#34;https://developer.apple.com/documentation/foundation/xmlparser&#34;&gt;XMLParser&lt;/a&gt;はイベント駆動のparser。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;UIKit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ParserSample&lt;/span&gt;: NSObject {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;parser&lt;/span&gt;: XMLParser&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;init&lt;/span&gt;(data: Data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        parser = XMLParser(data: data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;init&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        parser.delegate = &lt;span style=&#34;color:#ff79c6&#34;&gt;self&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parse&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; parser.parse() &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;err&lt;/span&gt; = parser.parserError &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parse error but unknown reason&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parse error: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;err.localizedDescription&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;after parse()&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/xmlparserdelegate&#34;&gt;XMLParserDelegate&lt;/a&gt;でイベントを拾ってオブジェクトに詰めるなりする。全て実装する必要はなく、この例ではタグの開始と文字列、CDATA、エラー、パース終了時の関数を実装している。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ParserSample&lt;/span&gt;: XMLParserDelegate {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser, didStartElement elementName: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;, namespaceURI: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;?, qualifiedName qName: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;?, attributes attributeDict: [&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt; : &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;] = [:]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parsing &amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;elementName&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; elementName == &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ERROR&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;self&lt;/span&gt;.parser.abortParsing() &lt;span style=&#34;color:#6272a4&#34;&gt;// test&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser, foundCharacters string: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;found &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;string&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                foundCDATA CDATABlock: Data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;data&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(bytes: CDATABlock, encoding: .utf8)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foundCDATA &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;data!&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser, parseErrorOccurred parseError: Error) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parser error: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;parseError.localizedDescription&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parserDidEndDocument&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parse done&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後まで正常にパースされる場合と、途中で中断される場合を実行する。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
