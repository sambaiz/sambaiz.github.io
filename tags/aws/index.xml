<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/aws/</link>
    <description>Recent content in Aws on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 10 May 2025 13:06:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kinesis Data Firehose で Iceberg テーブルにストリーミング書き込みを行う</title>
      <link>https://www.sambaiz.net/article/535/</link>
      <pubDate>Sat, 10 May 2025 13:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/535/</guid>
      <description>&lt;p&gt;ファイルを置くだけで読むことができる通常のテーブルと異なり、Iceberg テーブルはメタデータを更新するために INSERT する必要がある。これをバッチ処理で行うと最新のデータが読めるまでにラグが発生してしまうので、ラグを最小限にするため Kinesis Data Streams などを介して自前でストリーミング処理することもできるが、&lt;a href=&#34;https://docs.aws.amazon.com/firehose/latest/dev/apache-iceberg-destination.html&#34;&gt;Firehose の出力先として Iceberg テーブルを設定する&lt;/a&gt;と容易に書き込むことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FireLens で ECS の FluentBit サイドカーに設定を配置しログが転送されるようにする</title>
      <link>https://www.sambaiz.net/article/533/</link>
      <pubDate>Mon, 05 May 2025 18:56:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/533/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/blogs/containers/under-the-hood-firelens-for-amazon-ecs-tasks/&#34;&gt;FireLens&lt;/a&gt; は ECS のアプリケーションコンテナに &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/firelens-taskdef.html&#34;&gt;awsfirelens ログドライバー&lt;/a&gt;を指定し、Fluent Bit/Fluentd サイドカーコンテナに firelensConfiguration を設定すると、stdout/stderr を &lt;code&gt;/var/run/fluent.sock&lt;/code&gt; 経由でサイドカーコンテナに送信し、CloudWatch Logs や S3 などへの出力設定ファイルを自動生成してサイドカーコンテナ内に配置してくれる機能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EMR Serverless から S3 Tables に Iceberg テーブルを作成しデータを書き込んで Athena からクエリする</title>
      <link>https://www.sambaiz.net/article/528/</link>
      <pubDate>Tue, 18 Feb 2025 20:47:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/528/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables.html&#34;&gt;S3 Tables&lt;/a&gt; は re:Invent 2024 で&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/aws-weekly-20241202-1/&#34;&gt;発表された&lt;/a&gt; Iceberg テーブルに特化したストレージ。併せて発表されたオブジェクトの最終変更日時などのメタデータをクエリできる &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/metadata-tables-schema.html&#34;&gt;S3 Metadata&lt;/a&gt; も S3 Tables へ書き込む。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/523/&#34;&gt;Spark で Iceberg テーブルを作成しスキーマや write mode を変更してデータを書き込みメタデータの内容を確認する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>EMR Studio の Jupyter Notebook から EMR Serverless で Spark の MLlib を動かす</title>
      <link>https://www.sambaiz.net/article/527/</link>
      <pubDate>Tue, 11 Feb 2025 14:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/527/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-studio.html&#34;&gt;EMR Studio&lt;/a&gt; はEMR クラスタで実行される Jupyter Notebook ベースの IDE。クラスタや S3 の料金はかかるがこれ自体は無料。&lt;a href=&#34;https://aws.amazon.com/emr/serverless&#34;&gt;EMR Serverless&lt;/a&gt; で動かすことで常時クラスタを立てておくことなく手軽に使うことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Apps Script で IDトークンを取得し AWS の Role を Assume して S3 を読み書きする</title>
      <link>https://www.sambaiz.net/article/526/</link>
      <pubDate>Fri, 07 Feb 2025 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/526/</guid>
      <description>&lt;p&gt;マニフェストの &lt;a href=&#34;https://developers.google.com/apps-script/concepts/scopes&#34;&gt;oauthScopes&lt;/a&gt; に openid を追加し &lt;a href=&#34;https://developers.google.com/apps-script/reference/script/script-app#getIdentityToken%28%29&#34;&gt;ScriptApp.getIdentityToken()&lt;/a&gt; を呼ぶとユーザーの ID トークンが返る。これを用いることでアクセスキーを渡すことなく AWS の API を呼び出すことができる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/136/&#34;&gt;OpenID ConnectのIDトークンの内容と検証 - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Iceberg テーブルを Glue Data Catalog に登録して Athena や Snowflake からクエリする</title>
      <link>https://www.sambaiz.net/article/525/</link>
      <pubDate>Thu, 30 Jan 2025 20:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/525/</guid>
      <description>&lt;p&gt;Glue Data Catalog に Iceberg テーブルを登録すると、他のテーブルと同様に Athena や EMR などから参照できるほか、Snowflake ではスキーマを渡すことなく &lt;a href=&#34;https://docs.snowflake.com/en/user-guide/tables-iceberg&#34;&gt;ICEBERG TABLE&lt;/a&gt; を作成することができ、メタデータの二重管理を避けることができる。また自動で &lt;a href=&#34;https://docs.aws.amazon.com/glue/latest/dg/enable-compaction.html&#34;&gt;compaction したり&lt;/a&gt;、ジョブの失敗時に生まれるメタデータから参照されていない&lt;a href=&#34;https://docs.aws.amazon.com/glue/latest/dg/enable-orphan-file-deletion.html&#34;&gt;orphan files を掃除したり&lt;/a&gt;する機能まである。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCP の Workload Identity Federation を Terraform で設定してサービスアカウントのキーを作成せずに AWS から API を呼ぶ</title>
      <link>https://www.sambaiz.net/article/520/</link>
      <pubDate>Sat, 11 Jan 2025 14:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/520/</guid>
      <description>&lt;p&gt;GCP の &lt;a href=&#34;https://cloud.google.com/iam/docs/workload-identity-federation&#34;&gt;Workload Identity Federation&lt;/a&gt; は GCP 外のワークロードにサービスアカウントのキーを共有することなく一時的な権限を与えられる機能。&lt;/p&gt;&#xA;&lt;p&gt;なお、GCP から AWS は &lt;a href=&#34;https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken&#34;&gt;サービスアカウントの OIDC トークン&lt;/a&gt;による &lt;a href=&#34;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/assume-role-with-web-identity.html&#34;&gt;AssumeRoleWithWebIdentity&lt;/a&gt; が&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html&#34;&gt;行える&lt;/a&gt;。これによりインスタンスから&lt;a href=&#34;https://cloud.google.com/compute/docs/instances/verifying-instance-identity#request_signature&#34;&gt;メタデータサーバーにリクエストして&lt;/a&gt;トークンを取得し &lt;a href=&#34;https://aws.amazon.com/jp/blogs/security/access-aws-using-a-google-cloud-platform-native-workload-identity/&#34;&gt;AWS の API を呼んだり&lt;/a&gt;、&lt;a href=&#34;https://cloud.google.com/storage-transfer/docs/source-amazon-s3?hl=ja#federated_identity&#34;&gt;Cloud Storage Transfer Service&lt;/a&gt; など一部のマネージドサービスは &lt;a href=&#34;https://cloud.google.com/storage-transfer/docs/reference/rest/v1/TransferSpec#AwsS3Data&#34;&gt;Role の Arn を渡す&lt;/a&gt;だけで AWS にアクセスできるようになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Snowflake に S3 のデータをコピーしてクエリする</title>
      <link>https://www.sambaiz.net/article/518/</link>
      <pubDate>Tue, 31 Dec 2024 23:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/518/</guid>
      <description>&lt;p&gt;Snowflake はAWS、GCP、Azure上で動作するフルマネージドなデータプラットフォーム。カラムナフォーマットで&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/intro-key-concepts#database-storage&#34;&gt;データを持ち&lt;/a&gt;、各ノードが共有のデータセットの一部をローカルにキャッシュする&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/intro-key-concepts#snowflake-architecture&#34;&gt;ハイブリッドなシェアードナッシングアーキテクチャ&lt;/a&gt;でネットワークトラフィックを削減したり、自動で&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/tables-clustering-micropartitions&#34;&gt;マイクロパーティション&lt;/a&gt;に切ってきめ細かなプルーニングを行うことで効率的に大規模なクエリを実行できる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/386/&#34;&gt;カラムナフォーマットParquetの構造とReadの最適化 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Hadoop クラスタなどのインフラストラクチャの面倒を見る必要がないこと以外にも、BigQuery のような&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/data-time-travel&#34;&gt;タイムトラベル&lt;/a&gt;や、アカウント間で容易に&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/data-sharing-intro&#34;&gt;データを共有&lt;/a&gt;できる特長がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tableau Desktop を Athena に接続して年月日に分かれた日時やstructを含むテーブルを扱う</title>
      <link>https://www.sambaiz.net/article/499/</link>
      <pubDate>Mon, 14 Oct 2024 22:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/499/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.tableau.com/&#34;&gt;Tableau&lt;/a&gt; はローカルファイルや BigQuery など多様なデータソースに接続しカラムをドラッグするだけで可視化や分析ができる BI ツール。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/499/images/visualize.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/499/images/visualize_hu_fce30a754d11fb75.png&#34; width=&#34;600&#34; height=&#34;313&#34; alt=&#34;可視化&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;トレンドや予測値を追加して&lt;/p&gt;</description>
    </item>
    <item>
      <title>Agents for Bedrock で時間がかかったり重すぎたりする Actions を RETURN_CONTROL して Go クライアントでハンドリングする</title>
      <link>https://www.sambaiz.net/article/496/</link>
      <pubDate>Tue, 27 Aug 2024 20:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/496/</guid>
      <description>&lt;p&gt;Agents for Bedrock は Actions として Lambda 関数を登録して呼び出させることができる。ただ、その処理に時間がかる場合、Lambda のタイムアウトやリソース上限に当たったりすることが考えられる。また、重い処理を並列で実行したり、進行状況をユーザーに通知したりすることを考えると、Agent から呼び出すには都合が悪いことがある。それを解決するのが ReturnControls で Agent 側で Actions のハンドリングを行うのではなく、クライアントに呼び出すべき Action とその入力を返し、クライアントはその結果を Agent に渡すことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で Agents for Bedrock を作成し入力に基づいて Lambda 関数が呼び出されることを確認する</title>
      <link>https://www.sambaiz.net/article/495/</link>
      <pubDate>Tue, 27 Aug 2024 09:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/495/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/bedrock/agents/&#34;&gt;Agents for Amazon Bedrock&lt;/a&gt; は Bedrock の各種基盤モデルを用いて、複数のステップからなる処理を行う生成AIのエージェントを構築する機能。必要に応じて Lambda を呼び出したり、OpenSearch Serverless などと接続して RAG を行ったりできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubecost の Prometheus メトリクスから Pod のラベルごとのコストを算出する</title>
      <link>https://www.sambaiz.net/article/493/</link>
      <pubDate>Wed, 17 Jul 2024 19:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/493/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.kubecost.com/&#34;&gt;Kubecost&lt;/a&gt; は Kubernetes のコストを可視化し最適化するツール。&#xA;AWS が &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/cost-monitoring.html&#34;&gt;EKS optimized bundle&lt;/a&gt; を提供しており一部 Enterprise 相当の機能を使うことができる。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/493/images/eksoptimized.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/493/images/eksoptimized_hu_efea7aed583c611e.png&#34; width=&#34;600&#34; height=&#34;184&#34; alt=&#34;EKS Optimized license&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;Helm でインストールする。Promehteus はデフォルトでインストールされるが、すでにあるものを用いることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus を CDK でインストールして Recording rules で集計したデータを New Relic に Remote write することでデータ量を節約する</title>
      <link>https://www.sambaiz.net/article/487/</link>
      <pubDate>Thu, 23 May 2024 02:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/487/</guid>
      <description>&lt;p&gt;Prometheus の &lt;a href=&#34;https://prometheus.io/docs/prometheus/2.52/configuration/recording_rules/&#34;&gt;Recording rules&lt;/a&gt; は PromQL で既存のメトリクスから新たなメトリクスを作ることができる機能。これによって集計したデータを送ることで生のデータを送るのと比べて New Relic へのデータ送信量を節約することができるが、newrelic-bundle に含まれる newrelic-prometheus-configurator の Prometheus は Agent mode で動くので Recording rules に&lt;a href=&#34;https://github.com/prometheus/prometheus/blob/v2.52.0/config/config.go#L124&#34;&gt;対応していない&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Livy を EMR on EKS にインストールしSparkmagic でローカルの Jupyter Notebook から Spark のジョブを実行する</title>
      <link>https://www.sambaiz.net/article/486/</link>
      <pubDate>Wed, 22 May 2024 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/486/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://livy.apache.org/&#34;&gt;Apache Livy&lt;/a&gt; は Spark クラスタとやり取りするための REST API を提供し、&lt;a href=&#34;https://github.com/jupyter-incubator/sparkmagic&#34;&gt;Sparkmagic&lt;/a&gt; はこの API を呼ぶことで Jupyter Notebooks からリモートの Spark クラスタでジョブを実行する。Athena for Apache Spark でも使われていて、インタラクティブにジョブを実行し結果を確認できるのはデバッグやアドホックなクエリを実行したりするのに便利だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NewRelicのアラートをEventBridgeを通してLambdaで受ける</title>
      <link>https://www.sambaiz.net/article/480/</link>
      <pubDate>Tue, 23 Apr 2024 22:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/480/</guid>
      <description>&lt;p&gt;NewRelic のアラートの Destination には Slack や PagerDuty などがあり、Workflows でこれらを指定し NRQL で追加のデータを付加することもできる。ただアラート文面をカスタマイズしたり、別の処理を行ったりするには Lambda などでハンドリングする必要がある。Webhook &amp;amp; Custom header で受けることもできるが EventBridge だと外にエンドポイントを開く必要がない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでEKSクラスタにExternalDNSをインストールしてServiceやIngressで指定したホストをRoute53に登録する</title>
      <link>https://www.sambaiz.net/article/475/</link>
      <pubDate>Wed, 20 Mar 2024 15:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/475/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns&#34;&gt;ExternalDNS&lt;/a&gt; は Kubernetes の Service や Ingress の host と外部の DNS のレコードを同期するアプリケーション。Route53 のレコードの作成は CDK で行うこともできるが cluster.addManifest() してから非同期に作られ、Controller によって管理される ELB の扱いが難しい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでALBとS3をOriginとするCloudFrontのDistributionを作成する</title>
      <link>https://www.sambaiz.net/article/474/</link>
      <pubDate>Wed, 13 Mar 2024 23:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/474/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cloudfront/?nc1=h_ls&#34;&gt;Amazon CloudFront&lt;/a&gt; は CDN のサービスで、&#xA;エッジサーバーにレスポンスをキャッシュすることでレイテンシを改善させたりオリジンへの負荷を軽減させたりすることができる。&#xA;S3 などをオリジンとする静的ファイルの配信が主なユースケースではあるが、ALB などの前段に置くことで動的なレスポンスを返すこともできる。&#xA;その場合、キャッシュを無効にすることになるのでオリジンへのリクエスト数は減らないがコネクションを使い回せる分いくらか負荷が軽減されるのと、&#xA;エッジサーバーから先は AWS 内のネットワークを通るのでレイテンシの改善も期待できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKSクラスタにAWS Load Balancer ControllerをインストールしてALBのIngressを立てる</title>
      <link>https://www.sambaiz.net/article/471/</link>
      <pubDate>Mon, 26 Feb 2024 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/471/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/&#34;&gt;AWS Load Balancer Controller&lt;/a&gt; は Kubernetes のリソースに対応する ELB を作成し管理するコントローラー。&#xA;必要な &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.0/docs/install/iam_policy.json&#34;&gt;Policy&lt;/a&gt; を ServiceAccount に与えて &lt;a href=&#34;https://artifacthub.io/packages/helm/aws/aws-load-balancer-controller&#34;&gt;Helm Chart&lt;/a&gt; でインストールできるが、CDK でクラスタを作る場合は albController でバージョンを指定することでこれを&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/798ef6789c53fc1ba28ffefa480889d5b0c9b151/packages/aws-cdk-lib/aws-eks/lib/alb-controller.ts#L304&#34;&gt;やってくれる&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKのAwsCustomResourceでAWSのAPIを呼ぶ</title>
      <link>https://www.sambaiz.net/article/468/</link>
      <pubDate>Tue, 30 Jan 2024 22:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/468/</guid>
      <description>&lt;p&gt;CDKでリソース作成後にしか取得できない値を渡す必要があるとき Describe API を呼びたいことがある。通常、このような CloudFormation の管理外のことを行うには自前のLambdaを用意して CustomResource を作成することになるが、AWS の API を&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/v2.124.0/packages/%40aws-cdk/custom-resource-handlers/lib/custom-resources/aws-custom-resource-handler/aws-sdk-v3-handler.ts#L122&#34;&gt;呼ぶ&lt;/a&gt;だけだったら &lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources.AwsCustomResource.html&#34;&gt;AwsCustomResource&lt;/a&gt; を用いることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SGやネットワークACLによって拒否されたトラフィックをVPCフローログとCloudWatch Logs Insightで確認する</title>
      <link>https://www.sambaiz.net/article/467/</link>
      <pubDate>Mon, 22 Jan 2024 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/467/</guid>
      <description>&lt;p&gt;VPC内のトラフィックを許可/拒否する設定に、セキュリティグループとサブネットレベルの&lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html&#34;&gt;ネットワークACL&lt;/a&gt;がある。&#xA;セキュリティグループではインバウンドで許可されたリクエストに対するレスポンスはアウトバウンドの設定に関わらず許可されるが、ネットワークACLはリクエストとレスポンスそれぞれに対してステートレスに判定する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでEKSクラスタにnewrelic-bundleをインストールしてモニタリングする</title>
      <link>https://www.sambaiz.net/article/466/</link>
      <pubDate>Sat, 13 Jan 2024 21:07:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/466/</guid>
      <description>&lt;p&gt;NewRelic の &lt;a href=&#34;https://docs.newrelic.com/docs/kubernetes-pixie/kubernetes-integration/installation/kubernetes-integration-install-configure/&#34;&gt;Kubernetes Integration&lt;/a&gt; の各種コンポーネントをまとめた&#xA;&lt;a href=&#34;https://github.com/newrelic/helm-charts/tree/master/charts/nri-bundle&#34;&gt;nri-bundle&lt;/a&gt; という Helm Chart が提供されており、Guided install を進めると渡すパラメータが生成されるのでこれを CDK に書き写した。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/466/images/guided_install.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/466/images/guided_install_hu_6a5d885c1facb0c.png&#34; width=&#34;600&#34; height=&#34;228&#34; alt=&#34;Guided install&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;Chart を見ると認証情報はそのまま文字列で渡すほか Secret を指定することもできたので、External Secrets で SecretsManager から取り込む。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で External Secrets Operator をインストールし Secrets Manager のデータを Kubernetes の Secret として読めるようにする</title>
      <link>https://www.sambaiz.net/article/465/</link>
      <pubDate>Thu, 11 Jan 2024 20:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/465/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/external-secrets/external-secrets&#34;&gt;External Secrets Operator (ESO)&lt;/a&gt; は外部のサービスに保存されているシークレットを Kubernetes の Secret として読めるようにする Operator で、&#xA;deprecated になった &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;Kubernetes External Secrets (KES)&lt;/a&gt; の&lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets/issues/864&#34;&gt;後継&lt;/a&gt;。&#xA;今回はこれを CDK でインストールし、Secrets Manager のデータを含む Secret を作る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKSクラスタによるIPアドレスの枯渇とIPv6への移行</title>
      <link>https://www.sambaiz.net/article/460/</link>
      <pubDate>Fri, 15 Dec 2023 01:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/460/</guid>
      <description>&lt;p&gt;EKSクラスタである程度規模の大きいアプリケーションを動かしたところサブネットのIPアドレスが枯渇してしまった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ipアドレス枯渇の要因&#34;&gt;IPアドレス枯渇の要因&lt;/h2&gt;&#xA;&lt;p&gt;Pod の IP アドレスは &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s&#34;&gt;VPC CNI&lt;/a&gt; の ipamd (IP Address Management Daemon) によって割り当てられるが、これはインスタンスのセカンダリIPアドレスから払い出されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKで作成したEKSクラスタのノードにセキュリティグループを設定する</title>
      <link>https://www.sambaiz.net/article/459/</link>
      <pubDate>Tue, 05 Dec 2023 20:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/459/</guid>
      <description>&lt;p&gt;aws_eks.Clsuter を作る際に渡せる &lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks.Cluster.html#securitygroup&#34;&gt;securityGroup&lt;/a&gt; はノードでなくコントロールプレーンの ENI に紐づく SG となっている。&lt;/p&gt;&#xA;&lt;p&gt;Cluster に &lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks.Cluster.html#defaultcapacity-1&#34;&gt;defaultCapacity&lt;/a&gt; というフィールドがあるので、&#xA;ここから SG を追加しようとしたが何も起こらない。&#xA;EKS クラスタを作成する際、&lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks.Cluster.html#defaultcapacitytype&#34;&gt;DefaultCapacityType&lt;/a&gt; がデフォルトの NODEGROUP のとき、defaultCapacity の数のノードから構成され、EKS によって drain などが行われる&lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html&#34;&gt;マネージドノードグループ&lt;/a&gt;が作られるが、defaultCapacity は DefaultCapacityType が EC2 のときにしか値が入らないのだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Canvas の Custom models で AutoML のジョブをノーコードで実行する</title>
      <link>https://www.sambaiz.net/article/458/</link>
      <pubDate>Thu, 16 Nov 2023 23:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/458/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/sagemaker/canvas/&#34;&gt;SageMaker Canvas&lt;/a&gt; は&#xA;&lt;a href=&#34;https://aws.amazon.com/sagemaker/jumpstart/&#34;&gt;SageMaker JumpStart&lt;/a&gt; で提供されている学習済みモデルを利用できるインタフェースおよび、&#xA;AutoML の機能である &lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html&#34;&gt;SageMaker Autopilot&lt;/a&gt; を用いた学習ジョブを&#xA;ノーコードで実行できる機能を提供するサービス。&lt;/p&gt;</description>
    </item>
    <item>
      <title>パブリックIPv4アドレスを持たないEC2インスタンスがIPv6で外部と通信するために必要なリソースをCDKで作成する</title>
      <link>https://www.sambaiz.net/article/457/</link>
      <pubDate>Mon, 06 Nov 2023 09:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/457/</guid>
      <description>&lt;p&gt;まもなくEIP以外の&lt;a href=&#34;https://aws.amazon.com/jp/blogs/aws/new-aws-public-ipv4-address-charge-public-ip-insights/&#34;&gt;パブリックIPv4アドレスにも課金&lt;/a&gt;されるようになるためIPv6への移行を進めていきたい今日この頃、CDK で IPv6 環境を構築し、外部と通信する際に必要なリソースや挙動を確認してみた。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;(追記: 2024-01-29) &lt;a href=&#34;https://github.com/aws/aws-cdk/releases/tag/v2.122.0&#34;&gt;v2.122.0&lt;/a&gt; で ec2.Vpc に ipProtocol: ec2.IpProtocol.DUAL_STACK が追加され、これを指定することで IPv6 のためのリソースを自動で作ることができるようになった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で EKS クラスタに Karpenter をインストールし柔軟で高速なオートスケールを行う</title>
      <link>https://www.sambaiz.net/article/455/</link>
      <pubDate>Fri, 13 Oct 2023 20:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/455/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://karpenter.sh/&#34;&gt;Karpenter&lt;/a&gt; は AWS によって開発されている Kubernetes クラスタのノードを増減させる OSS。&#xA;標準の &lt;a href=&#34;https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md&#34;&gt;Cluster Autoscaler&lt;/a&gt; と比べて Auto Scaling Group を介さない柔軟で高速なプロビジョニングを行うことができる。&#xA;現状は EKS にしか対応していないが、他のクラウドについても&lt;a href=&#34;https://karpenter.sh/docs/faq/#what-cloud-providers-are-supported&#34;&gt;対応できるようになっている&lt;/a&gt;らしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerのHuggingFaceModelでOpenCALM-7BやELYZA-japanese-Llama-2-7bをTGIコンテナでデプロイし日本語の文章を生成する</title>
      <link>https://www.sambaiz.net/article/451/</link>
      <pubDate>Tue, 05 Sep 2023 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/451/</guid>
      <description>&lt;p&gt;最近 &lt;a href=&#34;https://www.cyberagent.co.jp/news/detail/id=28817&#34;&gt;CyberAgentによる&lt;/a&gt;商用利用可能な68億パラメータの日本語LLMである&#xA;&lt;a href=&#34;https://huggingface.co/cyberagent/open-calm-7b&#34;&gt;OpenCALM-7B&lt;/a&gt; や&#xA;東大松尾研発の&lt;a href=&#34;https://prtimes.jp/main/html/rd/p/000000034.000047565.html&#34;&gt;ELYZAによる&lt;/a&gt; Llama2 ベースの &lt;a href=&#34;https://huggingface.co/elyza/ELYZA-japanese-Llama-2-7b&#34;&gt;ELYZA-japanese-Llama-2-7b&lt;/a&gt; など日本語LLMがHugging Face に公開されてきている。&#xA;SageMaker SDK には HuggingFaceModel クラスがあり、これを用いるとモデルIDを指定してデプロイできる。&#xA;また、Hugging Face の Deploy ボタンを押すと SageMaker で最低限動かすためのコードを確認できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerのBatch Transformのパラメータの挙動をentrypointの関数の呼び出しと引数から確認する</title>
      <link>https://www.sambaiz.net/article/448/</link>
      <pubDate>Mon, 14 Aug 2023 18:16:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/448/</guid>
      <description>&lt;p&gt;SageMaker の &lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html&#34;&gt;Batch Transform&lt;/a&gt; は単発のバッチ推論ジョブを実行する機能。&#xA;その際推論エンドポイントなどの場合と同じく呼ばれる Model の entrypoint の関数とその引数から、ジョブのパラメータがどのようにはたらくかを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ssh-over-ssm を ProxyCommand に設定して libssh の ssh_connect() するとタイムアウトしてしまう原因と解決法</title>
      <link>https://www.sambaiz.net/article/450/</link>
      <pubDate>Sun, 30 Jul 2023 16:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/450/</guid>
      <description>&lt;p&gt;Private subnet の RDS に接続するにあたり、&#xA;Sandbox Mode で動く &lt;a href=&#34;https://sequel-ace.com/&#34;&gt;Sequel Ace&lt;/a&gt; では ssh-over-ssm を ProxyCommand とする SSH トンネリングを&lt;a href=&#34;https://github.com/Sequel-Ace/Sequel-Ace/issues/1450&#34;&gt;行えない&lt;/a&gt;ようだったので、&#xA;この Issue で紹介されている &lt;a href=&#34;https://tableplus.com/&#34;&gt;TablePlus&lt;/a&gt; を試してみたのだがこれでも接続できなかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ssh-over-ssm で Session Manager を通して EC2 インスタンスに SSH 接続する</title>
      <link>https://www.sambaiz.net/article/449/</link>
      <pubDate>Thu, 29 Jun 2023 07:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/449/</guid>
      <description>&lt;p&gt;Session Manager は単体でもコマンドを実行したりポートフォワーディングすることができるが &amp;ndash;document-name AWS-StartSSHSession を渡すことで &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started-enable-ssh-connections.html&#34;&gt;SSH接続&lt;/a&gt; することもできる。&#xA;このドキュメントの中身は AWS-StartPortForwardingSession と同じく sessionType Port となっており、SSM Agent は対象のポートと &lt;a href=&#34;https://github.com/aws/amazon-ssm-agent/blob/2b7ab82bbf39190dbb237a609e4d1dc048a686a1/agent/session/plugins/port/port.go#L110&#34;&gt;TCP コネクションを確立する&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Inference Recommender でコスト最適なインスタンスタイプの推論エンドポイントを立てる</title>
      <link>https://www.sambaiz.net/article/447/</link>
      <pubDate>Thu, 15 Jun 2023 09:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/447/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/inference-recommender.html&#34;&gt;SageMaker Inference Recommender&lt;/a&gt; は、&#xA;推論エンドポイントのインスタンスタイプや設定の候補を挙げてくれる機能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/290/&#34;&gt;SageMakerで学習したPyTorchのモデルをElastic Inferenceを有効にしてデプロイする - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;以前作成した MNIST の PyTorch モデルに対して Inference Recommender の Job を実行し、最もコストが低いインスタンスタイプで推論エンドポイントを立ててみる。&#xA;全体のコードは &lt;a href=&#34;https://github.com/sambaiz/sagemaker-inference-recommendation-test&#34;&gt;GitHub&lt;/a&gt; にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Processing で前処理を行って Training で学習したモデルのパラメータや精度を Experiments で記録する</title>
      <link>https://www.sambaiz.net/article/442/</link>
      <pubDate>Thu, 04 May 2023 19:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/442/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/experiments.html&#34;&gt;SageMaker Experiments&lt;/a&gt;は&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html&#34;&gt;Processing&lt;/a&gt; での前処理や&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/train-model.html&#34;&gt;Training&lt;/a&gt; での学習に用いたパラメータやモデルの精度を記録する機能。&#xA;今回は前処理から学習までの流れを Experiments の Run として追跡し、複数の結果を比較できることを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Task nodes で EMR クラスタのスケールインを高速化する</title>
      <link>https://www.sambaiz.net/article/445/</link>
      <pubDate>Sun, 19 Mar 2023 22:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/445/</guid>
      <description>&lt;p&gt;EMR クラスタは YARN の ResourceManager などが動く Master (primary) node と、 Core nodes および Task nodes から&lt;a href=&#34;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html&#34;&gt;構成される&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/427/&#34;&gt;Hadoop YARN によってアプリケーションにリソースが割り当てられる流れと割り当てられているリソース量の確認 - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>S3のバージョニングを有効にして誤って上書きや削除してしまったオブジェクトを復旧できるようにする</title>
      <link>https://www.sambaiz.net/article/444/</link>
      <pubDate>Wed, 15 Mar 2023 22:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/444/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html&#34;&gt;S3のバージョニング&lt;/a&gt;は S3 の Bucket に設定できる項目で、&#xA;有効にすると全ての PUT したデータがバージョンIDと共に残るようになり、DELETE した際も実際に削除はせず Delete marker が最新のバージョンとして書き込まれるようになる。&#xA;最新バージョンが削除マーカーのオブジェクトを GET するとオブジェクトがないときと同様に Not found になるが、Delete marker のバージョンを削除するとそのオブジェクトを再度取得できるようになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena for Apache Spark の Notebook で DataFrame.toPandas().plot() した際の日本語が文字化けしないようにする</title>
      <link>https://www.sambaiz.net/article/438/</link>
      <pubDate>Mon, 06 Feb 2023 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/438/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/athena/latest/ug/notebooks-spark.html&#34;&gt;Athena for Apache Spark&lt;/a&gt; は re:Invent 2022 で発表された マネージドでサーバーレスな Jupyter Notebook からインタラクティブに Spark による分析が行える機能。&#xA;Athena は アドホックに SQL を実行して分析できる手軽さと、サーバーレスによって使ってない時間帯は料金がかからない利点があったが、&#xA;重いクエリを実行すると scale factor やタイムアウトによって失敗することがあったので今回 Spark が動かせるようになり用途の幅の広がりを感じる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で EKS クラスタを立ち上げ EMR on EKS に登録し Spark のジョブを動かす</title>
      <link>https://www.sambaiz.net/article/434/</link>
      <pubDate>Mon, 02 Jan 2023 14:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/434/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/emr-eks.html&#34;&gt;EMR on EKS&lt;/a&gt; は EKS 上で Spark アプリケーションを動かすための API や&lt;a href=&#34;https://aws.amazon.com/jp/blogs/big-data/amazon-emr-on-eks-widens-the-performance-gap-run-apache-spark-workloads-5-37-times-faster-and-at-4-3-times-lower-cost/&#34;&gt;パフォーマンス最適化された&lt;/a&gt;ランタイム、History Serverなどを提供するマネージドサービス。&#xA;通常の EMR が Hadoop クラスタの管理も行うのに対して、EMR on EKS はコンテナの起動のみを担う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudTrail で AWS 上のリソースの操作記録を確認する</title>
      <link>https://www.sambaiz.net/article/431/</link>
      <pubDate>Tue, 06 Dec 2022 21:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/431/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cloudtrail&#34;&gt;AWS CloudTrail&lt;/a&gt; は AWS の API の呼び出しを記録するサービスで、セキュリティ監査や GuardDuty など他のサービスで用いられる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/430/&#34;&gt;GuardDuty, Inspector, Macie などによって検出されたセキュリティ上の問題を AWS Security Hub で確認する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>GuardDuty, Inspector, Macie などによって検出されたセキュリティ上の問題を AWS Security Hub で確認する</title>
      <link>https://www.sambaiz.net/article/430/</link>
      <pubDate>Sun, 04 Dec 2022 10:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/430/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt; は 各種サービスによって検出されたセキュリティ上の問題をまとめて確認できるサービス。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/430/images/findings.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/430/images/findings_hu_2810ff685600b2fc.png&#34; width=&#34;600&#34; height=&#34;279&#34; alt=&#34;findings&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;h2 id=&#34;セキュリティ標準&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/securityhub/latest/userguide/standards-available.html&#34;&gt;セキュリティ標準&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Security Hub は次のセキュリティ標準をサポートしており、有効にすると &lt;a href=&#34;https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html&#34;&gt;AWS Config&lt;/a&gt; にルールが作成される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で Amazon Managed Workflow for Apache Airflow (MWAA) の環境を作成しワークフローを実行する</title>
      <link>https://www.sambaiz.net/article/428/</link>
      <pubDate>Mon, 28 Nov 2022 19:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/428/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/managed-workflows-for-apache-airflow&#34;&gt;Amazon Managed Workflow for Apache Airflow (MWAA)&lt;/a&gt; は&#xA;&lt;a href=&#34;https://airflow.apache.org/&#34;&gt;Apache Airflow&lt;/a&gt; のマネージドサービス。&#xA;サーバーレスの Step Functions とは異なりインスタンス時間のコストが&lt;a href=&#34;https://aws.amazon.com/managed-workflows-for-apache-airflow/pricing/&#34;&gt;かかる&lt;/a&gt;が、&#xA;Airflow の豊富な機能や、AWSを含むサードパーティの &lt;a href=&#34;https://airflow.apache.org/docs/#providers-packagesdocsapache-airflow-providersindexhtml&#34;&gt;Providers packages&lt;/a&gt; が利用できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Compose の service に AWS のクレデンシャルを渡す</title>
      <link>https://www.sambaiz.net/article/426/</link>
      <pubDate>Wed, 23 Nov 2022 15:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/426/</guid>
      <description>&lt;p&gt;ローカルで Docker コンテナを動かす際に AWS のクレデンシャルを渡すため ~/.aws を&lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;マウント&lt;/a&gt;することがあるが、&#xA;Docker Compose でも &lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes&#34;&gt;volumes&lt;/a&gt; で同様のことができる。&#xA;また、&lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#secrets&#34;&gt;secrets&lt;/a&gt; というのもあって、&#xA;&lt;a href=&#34;https://docs.docker.com/engine/swarm/secrets/&#34;&gt;ドキュメント&lt;/a&gt; によると Swarm 前提の機能に見えるが、実際は&lt;a href=&#34;https://github.com/docker/compose/issues/8707&#34;&gt;スタンドアロンで動く&lt;/a&gt;。&#xA;ただし、これは開発用のためのもので実際はただ bind しているだけのようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>New RelicでAWSのコストをモニタリングする</title>
      <link>https://www.sambaiz.net/article/424/</link>
      <pubDate>Sun, 13 Nov 2022 15:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/424/</guid>
      <description>&lt;h2 id=&#34;billingのメトリクスの可視化&#34;&gt;Billingのメトリクスの可視化&lt;/h2&gt;&#xA;&lt;p&gt;Billing のメトリクスは CloudWatch にあるので、&lt;strong&gt;us-east-1&lt;/strong&gt; の全てのメトリクスを CloudWatch Metric Streams で送っていれば次のようなクエリで参照できる。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/424/images/billing_metrics.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/424/images/billing_metrics_hu_fbef121af60b76f9.png&#34; width=&#34;600&#34; height=&#34;257&#34; alt=&#34;Billingのメトリクス&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.EstimatedCharges&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.EstimatedCharges&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; daily_usage&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Metric&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; aws.Namespace &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;AWS/Billing&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;metricName&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aws.billing.EstimatedCharges&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.ServiceName&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FACET monthOf(&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;), &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.ServiceName&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TIMESERIES &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;day&lt;/span&gt; SLIDE &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;day&lt;/span&gt; SINCE &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt; week ago&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;入っている値が月の累積値なので &lt;a href=&#34;https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/nrql-query-tutorials/create-smoother-charts-sliding-windows/&#34;&gt;Sliding window&lt;/a&gt; で一日前との差分を取ることで日のコストを出している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Cost Management でコストをモニタリングし最適化する</title>
      <link>https://www.sambaiz.net/article/422/</link>
      <pubDate>Thu, 10 Nov 2022 21:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/422/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/cost-management/latest/userguide/what-is-costmanagement.html&#34;&gt;AWS Cost Management&lt;/a&gt;は&#xA;コストのモニタリングや予測、最適化のための機能群。&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-what-is.html&#34;&gt;Billing&lt;/a&gt; にもレポートなど類似の機能があるが、&#xA;Billing が 現在のコストを管理するための機能群なのに対して、Cost Management は将来のコストをターゲットとしているようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub ActionsからOIDCでassumeできるRoleをCDKで作成する</title>
      <link>https://www.sambaiz.net/article/421/</link>
      <pubDate>Sun, 30 Oct 2022 02:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/421/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/aws-actions/configure-aws-credentials&#34;&gt;aws-actions/configure-aws-credentials&lt;/a&gt; は AWS の Role を assume する Actionで、&#xA;Access Key による認証もサポートしているが、&lt;a href=&#34;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect&#34;&gt;GitHub の OIDC Provider&lt;/a&gt;&#xA;が発行した JWT を用いることで認証情報を持つことなくセキュアにAPIを呼ぶことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ScalaでSparkのアプリケーションを開発してGitHub ActionsでデプロイしEMRでリモートデバッグする</title>
      <link>https://www.sambaiz.net/article/420/</link>
      <pubDate>Fri, 21 Oct 2022 23:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/420/</guid>
      <description>&lt;p&gt;Spark は開発で用いられている Scala に加えて Java や Python のAPIを提供しており、技術スタックや他コンポーネントとの兼ね合いなどによって選択することができる。&lt;/p&gt;&#xA;&lt;p&gt;Python は データ分析や機械学習のスキルセットとの親和性の高さや Glue Studio 上で編集して実行できる手軽さがある一方、エラーが分かりづらく JVM と Python Worker 間でデータをやり取りする必要があるのでパフォーマンスの点でも不利。&#xA;また、JVM の制御の外である Python インタプリタが YARN などのリソースマネージャによって割り当てられた以上のメモリを確保してしまうと executor が kill されてしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spark SQLのJOIN時に余分なパーティションが読まれる例とDynamic Partition Pruning (DPP)</title>
      <link>https://www.sambaiz.net/article/417/</link>
      <pubDate>Sun, 11 Sep 2022 16:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/417/</guid>
      <description>&lt;h2 id=&#34;クエリの例&#34;&gt;クエリの例&lt;/h2&gt;&#xA;&lt;p&gt;Spark 3.1.1 ベースの Glue 3.0 で、TPC-DS (scale=1000) の sales テーブルと sales のIDでパーティションを切った store_sales テーブルを JOIN する次のクエリを実行すると 10 DPS で 1分4秒 かかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EMRクラスタで動かしたSparkのログをFluent BitでNew Relicに集約する</title>
      <link>https://www.sambaiz.net/article/416/</link>
      <pubDate>Sun, 04 Sep 2022 14:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/416/</guid>
      <description>&lt;p&gt;Cluster modeでSpark jobを動かすとログが step/ 下に出力されないためコンソール上でもログを確認しづらいのでNew Relicに集約してみる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/409/&#34;&gt;AWS CLIでEMRクラスタを立ち上げSparkのアプリケーションを実行する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena v2でparquetをソースとしmapフィールドを持つテーブルのクエリが成功したり失敗したりする原因</title>
      <link>https://www.sambaiz.net/article/415/</link>
      <pubDate>Tue, 16 Aug 2022 21:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/415/</guid>
      <description>&lt;p&gt;次のようなmapのフィールドを含むログをjsonなどで出力し、Glue Studioでparquetに変換してAthenaでクエリを実行すると、ものによってクエリが成功したり失敗したりする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EMRでSparkを動かす際の設定</title>
      <link>https://www.sambaiz.net/article/414/</link>
      <pubDate>Sat, 13 Aug 2022 19:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/414/</guid>
      <description>&lt;p&gt;AWSでSparkのアプリケーションを動かすマネージドサービスにはEMRとGlueがあって、&#xA;Glueがサーバーレスで手軽にETLジョブを動かすことができる一方、EMRはリソースやパラメータを細かくチューニングすることができる。&#xA;裏を返せば設定が適切でないとリソースをフル活用できず、特にメモリについては余っているにもかかわらずOOMで失敗してしまうことがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CopilotでECS on Fargate上にコンテナをデプロイしECS Execによるコマンドの実行やSession Managerによるポートフォワーディングを行う</title>
      <link>https://www.sambaiz.net/article/410/</link>
      <pubDate>Sat, 23 Jul 2022 13:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/410/</guid>
      <description>&lt;p&gt;リモートマシンで動作中のアプリケーションを調査する際に、非コンテナ環境であればsshdが動いていることが多いのでSSH接続してコマンドを実行することがあるが、&#xA;コンテナでは大抵動いていないので中に入れない。どうしても必要であれば動かすという手もあるがポートの開放や鍵の管理の点でなるべく避けたい。&#xA;今回はECS on Fargateのコンテナでsshdを動かすことなくコマンドの実行やポートフォワーディングを行う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CLIでEMRクラスタを立ち上げSparkのアプリケーションを実行する</title>
      <link>https://www.sambaiz.net/article/409/</link>
      <pubDate>Wed, 22 Jun 2022 00:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/409/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/emr/&#34;&gt;Amazon EMR&lt;/a&gt;はEC2やEKS上にSparkやHive, Prestoのクラスタを構築するサービス。&#xA;SparkのマネージドサービスであるGlueと比べると、Glueはサーバーレスで手軽にSparkによるETL処理をを行えるのに対して、EMRはスポットインスタンスなどを利用したコストパフォーマンスの良さと詳細なチューニングを行うことができるという特長があるが、&lt;a href=&#34;https://aws.amazon.com/jp/emr/serverless/&#34;&gt;EMR Serverless&lt;/a&gt;がリリースされたのでその差は少し縮まっているように感じる。Glueにはスキーマを指定する必要がない&lt;a href=&#34;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-crawler-pyspark-extensions-dynamic-frame.html&#34;&gt;DynamicFrame&lt;/a&gt;や前の続きから実行できるBookmarkといった便利な機能もあるが、重い処理を立て続けに実行するとコストが嵩んだりDPUなどのクォータに引っかかることもあるので適宜使い分けていきたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athenaで他アカウントのテーブルを参照するために必要な設定</title>
      <link>https://www.sambaiz.net/article/405/</link>
      <pubDate>Tue, 17 May 2022 23:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/405/</guid>
      <description>&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/405/images/structure.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/405/images/structure_hu_6504d01ea0a575e6.png&#34; width=&#34;600&#34; height=&#34;197&#34; alt=&#34;構成&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/392/&#34;&gt;Redshift Serverlessと他のサーバーレス集計サービス、Glue Data Catalogのテーブルへのクエリ実行 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;クエリを実行するBorrower Accountから、Data Catalogやデータが存在するOwner Accountのリソースにアクセスする必要がある。&#xA;他アカウントのリソースにアクセスする手段としてはアクセストークンやAssumeRoleによるものもあるが、&#xA;今回の場合クエリの実行に用いるRoleにBorrower AccountのAthenaの権限も必要なので、1つのRoleで両方のアカウントのリソースにアクセスできるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athenaのデータソースコネクタとユーザー定義関数(UDF)を実装する</title>
      <link>https://www.sambaiz.net/article/402/</link>
      <pubDate>Sat, 23 Apr 2022 18:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/402/</guid>
      <description>&lt;p&gt;AthenaにはLambdaをコネクタとしてS3以外のデータソースにアクセスできるFederate Queryという機能があって、&lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation&#34;&gt;公式のリポジトリ&lt;/a&gt;でBigQueryやSnowflakeなど様々なデータソースのコネクタが提供されているが自作することもできる。&#xA;今回は&lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation/tree/master/athena-example&#34;&gt;Example Connector&lt;/a&gt;を参考にしながら最低限のコネクタを実装しその動作を確認する。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/athena-connector-udf-example&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudWatch Logsを介さずにLambdaのテレメトリを行うnewrelic-lambda-extensionとその仕組み</title>
      <link>https://www.sambaiz.net/article/401/</link>
      <pubDate>Fri, 08 Apr 2022 12:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/401/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/get-started/monitoring-aws-lambda-serverless-monitoring&#34;&gt;New RelicにLambdaのログを転送する&lt;/a&gt;には、CloudWatch Logsに出力したものをサブスクライブして送るLambda function &lt;a href=&#34;https://github.com/newrelic/aws-log-ingestion&#34;&gt;aws-log-ingestion&lt;/a&gt;を用いる従来の方法のほかに、Lambda layer &lt;a href=&#34;https://github.com/newrelic/newrelic-lambda-extension&#34;&gt;newrelic-lambda-extension&lt;/a&gt;を用いる方法があって、トレースログなどをCloudWatc Logsに出力することなく送れるのでコストを最小限に抑えられる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Relicでインフラやアプリケーションをモニタリングする</title>
      <link>https://www.sambaiz.net/article/399/</link>
      <pubDate>Wed, 30 Mar 2022 19:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/399/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://newrelic.com/&#34;&gt;New Relic&lt;/a&gt;はインフラやアプリケーションをモニタリングするSaaSで、同種のサービスとしてはDatadogがある。&#xA;2020年に製品や&lt;a href=&#34;https://newrelic.com/pricing&#34;&gt;課金体系&lt;/a&gt;が&lt;a href=&#34;https://newrelic.com/jp/blog/nerdlog/new-relic-one-observability-made-simple&#34;&gt;変わり&lt;/a&gt;、転送量とユーザー数に対して課金されるようになったようだ。&#xA;ホストや機能に対して&lt;a href=&#34;https://www.datadoghq.com/ja/pricing/&#34;&gt;課金&lt;/a&gt;されるDatadogと比べると、少人数で多くのインスタンスを管理している場合に有利ということになる。また、Datadogの課金体系はやや複雑で頻繁に台数が増減する環境では請求がどの程度になるか読みづらいところがあるが、こちらは分かりやすい。新しい機能を使っても単価が上がることもないのでいろいろと試しやすいのも良いと思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redshift ServerlessとAthenaの性能をTPC-DSのクエリで比較する</title>
      <link>https://www.sambaiz.net/article/397/</link>
      <pubDate>Sun, 20 Feb 2022 01:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/397/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/392/&#34;&gt;Redshift Serverlessと他のサーバーレス集計サービス、Glue Data Catalogのテーブルへのクエリ実行 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;現在PreviewのRedshift ServerlessとAthenaでデータベースのベンチマークであるTPC-DSのクエリを実行し性能を比較する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GlueのTPC-DS Connectorでデータを生成する</title>
      <link>https://www.sambaiz.net/article/393/</link>
      <pubDate>Tue, 18 Jan 2022 21:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/393/</guid>
      <description>&lt;p&gt;AthenaのTPC-DS Connectorで250GBのデータを生成してS3に出力しようとしたところ最大までLambdaのリソースを上げてもタイムアウトしてしまったのでGlueで行う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redshift Serverlessと他のサーバーレス集計サービス、Glue Data Catalogのテーブルへのクエリ実行</title>
      <link>https://www.sambaiz.net/article/392/</link>
      <pubDate>Sun, 26 Dec 2021 22:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/392/</guid>
      <description>&lt;h2 id=&#34;redshift-serverless&#34;&gt;Redshift Serverless&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/redshift/redshift-serverless/&#34;&gt;Redshift Serverless&lt;/a&gt;は今年のre:Inventで&lt;a href=&#34;https://www.youtube.com/watch?v=x0xmqJrAVM8&#34;&gt;発表された&lt;/a&gt;、インスタンスを立てることなく従量課金でペタバイトスケールのDWHであるRedshiftを使える機能。&#xA;S3のデータを直接参照できる&lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/c-using-spectrum.html&#34;&gt;Redshift Spectrum&lt;/a&gt;やRDSへの&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/federated-overview.html&#34;&gt;Federated Query&lt;/a&gt;、機械学習の&lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/machine_learning.html&#34;&gt;Redshift ML&lt;/a&gt;も使える。&#xA;分析のような不定期に発生する需要のためにインスタンスを立てておくのはコストの上でハードルが高かったのでこのアップデートは嬉しい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AthenaのFederated QueryでTPC-DS Connectorを用いてデータを生成する</title>
      <link>https://www.sambaiz.net/article/391/</link>
      <pubDate>Sat, 25 Dec 2021 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/391/</guid>
      <description>&lt;p&gt;Athenaの&lt;a href=&#34;https://docs.aws.amazon.com/athena/latest/ug/connect-to-a-data-source.html&#34;&gt;Federated Query&lt;/a&gt;は&#xA;データソースコネクタとなるLambdaを通してDynamoDBやRDSといったS3以外のデータソースにクエリを実行できる機能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SparkのWeb UIでJobのStageとExecutorによるTask分散、SQLのplanを確認する</title>
      <link>https://www.sambaiz.net/article/382/</link>
      <pubDate>Thu, 30 Sep 2021 13:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/382/</guid>
      <description>&lt;p&gt;Spark の &lt;a href=&#34;https://spark.apache.org/docs/latest/web-ui.html&#34;&gt;Web UI&lt;/a&gt; は Job や Executor をモニタリングするためのツール。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws-samples/aws-glue-samples/tree/b76ad0583bdc66e9e5a903f9da3a953c9f6aac4f&#34;&gt;aws-glue-samples&lt;/a&gt;から maven:3.6-amazoncorretto-8 ベースでSparkを動かすDockerfileを持ってきて、&#xA;&lt;a href=&#34;https://spark.apache.org/docs/latest/monitoring.html&#34;&gt;History Server&lt;/a&gt;を&lt;a href=&#34;https://docs.aws.amazon.com/glue/latest/dg/monitor-spark-ui-history.html#monitor-spark-ui-history-local&#34;&gt;起動する&lt;/a&gt;。Glue で出力された EventLog のパスと認証情報を渡している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Glue DataBrewでデータを可視化して分析するProjectと機械学習の前処理を行うJobをCDKで作成する</title>
      <link>https://www.sambaiz.net/article/381/</link>
      <pubDate>Mon, 27 Sep 2021 16:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/381/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/glue/features/databrew/&#34;&gt;Glue DataBrew&lt;/a&gt;は、データを可視化してパラメータ間の相関を見たり、カテゴリー変数のエンコードや、欠損値や外れ値を置換する処理をコードなしで実行できるマネージドサービス。Kaggleの&lt;a href=&#34;https://www.kaggle.com/c/house-prices-advanced-regression-techniques&#34;&gt;House Prices Competiton&lt;/a&gt;の学習データで試してみる。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/cdk-databrew-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでAmazon Forecastに時系列データをimportしPredictorを作成して予測結果をS3にexportする</title>
      <link>https://www.sambaiz.net/article/380/</link>
      <pubDate>Mon, 20 Sep 2021 23:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/380/</guid>
      <description>&lt;p&gt;以前コンソール上で実行したAmazon Forecastでの時系列データの学習、予測をGoで行う。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/go-aws-forecast-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/327/&#34;&gt;Amazon Forecastで時系列データの予測を行う - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでCloudWatch Dashboardsを作成しコンソール上からAWSアカウントを持たない外部ユーザーに公開する</title>
      <link>https://www.sambaiz.net/article/379/</link>
      <pubDate>Sat, 18 Sep 2021 14:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/379/</guid>
      <description>&lt;p&gt;CloudWatch Dashboardsは、CloudWatchのメトリクスの値やグラフを配置できるダッシュボードで、&#xA;次のようにCDKで作成できる。&lt;code&gt;metricName&lt;/code&gt; と &lt;code&gt;namespace&lt;/code&gt;、&lt;code&gt;dimensions&lt;/code&gt; はコンソール上で確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでECS(EC2)上にLocust masterとworkerのServiceをデプロイしCloud Mapで名前解決させる</title>
      <link>https://www.sambaiz.net/article/378/</link>
      <pubDate>Tue, 17 Aug 2021 02:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/378/</guid>
      <description>&lt;p&gt;以前、EKS上にLocustをインストールしたが、使わないときにクラスタを落としていたりすると起動を待つ必要があったり、K8sのバージョンアップに追従する必要があったりと少し不便な所があった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでALBとECS(EC2)クラスタを作成し、ecs-cliでDocker Composeの構成をデプロイする</title>
      <link>https://www.sambaiz.net/article/377/</link>
      <pubDate>Sun, 15 Aug 2021 16:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/377/</guid>
      <description>&lt;p&gt;以前、CloudFormationでLBなしのECS(EC2)最小構成を構築したが、今回はALBのTargetGroupまでをCDKで作成し、Serviceのデプロイをecs-cliで行う。&#xA;EC2をECSクラスタに登録する際の &lt;code&gt;echo ECS_CLUSTER=&amp;lt;cluster_name&amp;gt; &amp;gt;&amp;gt; /etc/ecs/ecs.config&lt;/code&gt; といった処理は&#xA;クラスタの&lt;code&gt;AsgCapacityProvider&lt;/code&gt;にASGを指定すると&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/v1.118.0/packages/@aws-cdk/aws-ecs/lib/cluster.ts#L377&#34;&gt;追加される&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS X-rayでアプリケーションのリクエストをトレースし可視化する</title>
      <link>https://www.sambaiz.net/article/376/</link>
      <pubDate>Thu, 05 Aug 2021 02:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/376/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/xray/&#34;&gt;AWS X-ray&lt;/a&gt;はリクエストをトレースして、タイムラインやサービスマップを可視化、分析できるサービス。&#xA;サービスの数が増えると見えづらくなる、どこにどれくらいのトラフィックがあって、どこで問題が起きているのかといったことを一目で確認できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Studioの使っていないKernelを自動でシャットダウンするsagemaker-studio-auto-shutdown-extension</title>
      <link>https://www.sambaiz.net/article/373/</link>
      <pubDate>Sun, 18 Jul 2021 23:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/373/</guid>
      <description>&lt;p&gt;SageMaker Studioを使っているとインスタンスを明示的に立ち上げることがないので、シャットダウンするのを忘れて&#xA;無駄なインスタンスコストを発生させ続けてしまうことがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GlueのカスタムコネクタでBigQueryに接続する</title>
      <link>https://www.sambaiz.net/article/372/</link>
      <pubDate>Tue, 13 Jul 2021 21:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/372/</guid>
      <description>&lt;p&gt;GlueはConnectorによって様々なデータソースに対応していて、RDSやMongoDBなど標準で提供されているもの以外にも&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/about-aws/whats-new/2020/12/aws-glue-launches-aws-glue-custom-connectors/&#34;&gt;カスタムコネクタ&lt;/a&gt;を用いることで接続できる。今回はMarketplaceで提供されているBigQueryのカスタムコネクタを用いてBigQueryのテーブルの内容をS3に出力するJobを作成する。&lt;/p&gt;&#xA;&lt;p&gt;GlueのETL JobをGUIで構築したりモニタリングできるサービス、Glue StudioからMarketplaceに飛んで&#xA;&lt;a href=&#34;https://aws.amazon.com/marketplace/pp/prodview-w2ranrogj3xmm?ref_=beagle&amp;amp;applicationId=GlueStudio&#34;&gt;AWS Glue Connector for Google BigQuery&lt;/a&gt;をSubscribeする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena(Presto)とGlue(Spark)で同じクエリを実行した際に異なる値が返る原因</title>
      <link>https://www.sambaiz.net/article/370/</link>
      <pubDate>Sat, 03 Jul 2021 23:13:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/370/</guid>
      <description>&lt;p&gt;AWSではSQL-likeなクエリで集計を行うマネージドなサービスが複数あり、&#xA;アドホックな集計はGlueのデータカタログでテーブルを共有して手軽にクエリを実行できるPrestoベースのAthena、&#xA;重いバッチ集計はリソースや時間の制約を回避できるSparkベースのGlueといったように併用することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SDK for Java 2.x のUnable to load an HTTP implementationとクライアント変更によるlambda実行高速化</title>
      <link>https://www.sambaiz.net/article/366/</link>
      <pubDate>Thu, 10 Jun 2021 22:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/366/</guid>
      <description>&lt;p&gt;AWS SDK for Java 2.x では内部で使う&lt;a href=&#34;https://aws.amazon.com/jp/blogs/developer/aws-sdk-for-java-2-x-released/&#34;&gt;HTTP Clientを変更できる&lt;/a&gt;ようになっている。現在サポートされているのは次の4つ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- synchronous --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apache-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;url-connection-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- asynchronous --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;netty-nio-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;aws-crt-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.16.79-PREVIEW&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;system propertyでデフォルトクライアントを指定でき、クライアントごとに変えることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS App Runnerの特徴と料金、CloudFormationのResource</title>
      <link>https://www.sambaiz.net/article/361/</link>
      <pubDate>Sun, 30 May 2021 03:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/361/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/apprunner/&#34;&gt;AWS App Runner&lt;/a&gt;は最低限の設定でロードバランシングやオートスケール、ログやメトリクス、ドメインや証明書などを備えた、&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/blogs/aws/app-runner-from-code-to-scalable-secure-web-apps/&#34;&gt;リクエストベースのステートレスな&lt;/a&gt;コンテナアプリケーションを動かすことができるマネージドサービス。&#xA;Elastic BeanstalkのようにEC2やALB、AutoScaling Groupなどのリソースを作成するのではなく内部に持つ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでGlue Data CatalogのDatabase,Table,Partition,Crawlerを作成する</title>
      <link>https://www.sambaiz.net/article/357/</link>
      <pubDate>Sun, 09 May 2021 01:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/357/</guid>
      <description>&lt;p&gt;CDKでGlue Data CatlogのDatabase,Table,Partition,Crawlerを作成する。&#xA;PartitionやCrawlerはまだL2 constructが&lt;a href=&#34;https://github.com/aws/aws-cdk/issues/8863&#34;&gt;存在しない&lt;/a&gt;。&lt;code&gt;storageDescriptor&lt;/code&gt;の設定は&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/v1.102.0/packages/@aws-cdk/aws-glue/lib/table.ts#L267&#34;&gt;Tableの実装&lt;/a&gt;を参考にした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでKinesis Data Analytics上にPyFlinkのコードをデプロイして動かす</title>
      <link>https://www.sambaiz.net/article/334/</link>
      <pubDate>Sat, 24 Apr 2021 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/334/</guid>
      <description>&lt;p&gt;KDAが&lt;a href=&#34;https://aws.amazon.com/jp/about-aws/whats-new/2021/03/amazon-kinesis-data-analytics-now-supports-python-with-apache-flink-v1-11/&#34;&gt;PyFlinkをサポート&lt;/a&gt;したのでCDKで構築して動かしてみる。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/cdk-kda-pyflink-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/302/&#34;&gt;Kinesis Data AnalyticsのSQL, Lambdaへの出力とCDKによるリソースの作成 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今回動かすのは次の、KDSから流れてきたデータにクエリを実行し、その結果をS3に書き込む簡単なコード。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS GlueのJobのBookmarkを有効にして前回の続きから処理を行う</title>
      <link>https://www.sambaiz.net/article/333/</link>
      <pubDate>Fri, 16 Apr 2021 20:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/333/</guid>
      <description>&lt;p&gt;GlueのJobの&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/glue/latest/dg/monitor-continuations.html&#34;&gt;Bookmark&lt;/a&gt;は&#xA;どこまで処理したかを記録し、次回はその続きから実行できるようにする機能。&#xA;1.0以前は対応していなかったParquetやORCも今は対応している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでStep Functionsによるワークフローを構築する</title>
      <link>https://www.sambaiz.net/article/332/</link>
      <pubDate>Sat, 10 Apr 2021 21:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/332/</guid>
      <description>&lt;p&gt;Step FunctionsはLambdaやGlueのJobなどからなるワークフローを構築できるサービス。今回はCDKで構築する。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/cdk-stepfunctions-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Application Auto Scalingのcustom-resourceによるKinesis Data Streamsのオートスケール設定</title>
      <link>https://www.sambaiz.net/article/331/</link>
      <pubDate>Sun, 21 Mar 2021 23:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/331/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html&#34;&gt;Application Auto Scaling&lt;/a&gt;は、Auto Scaling groupによる&lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html&#34;&gt;EC2のオートスケール&lt;/a&gt;のようなことを他のリソースでも行えるようにするサービスで、&#xA;DynamoDBのキャパシティやECSのServiceなどコンソール上から設定できるものだけではなく、自前のAPIでハンドリングすることで任意のリソースをこの仕組みに乗せることができる。これを用いてKinesis Data Streamsのオートスケールを行う手法を紹介しているのが次の記事。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのio packageのReader/Writer/Closer/Seeker interfaceとストリーム処理</title>
      <link>https://www.sambaiz.net/article/330/</link>
      <pubDate>Thu, 11 Mar 2021 20:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/330/</guid>
      <description>&lt;p&gt;Goのio packageにはデータの読み書きに関わるインタフェース、&lt;code&gt;Reader/Writer/Closer/Seeker&lt;/code&gt; およびこれらを組み合わせた &lt;code&gt;ReadSeeker&lt;/code&gt; などが定義されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena(Presto)でWindow関数を用いた集計を行う</title>
      <link>https://www.sambaiz.net/article/328/</link>
      <pubDate>Wed, 24 Feb 2021 22:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/328/</guid>
      <description>&lt;p&gt;Athena(Presto)で&lt;code&gt;SUM()&lt;/code&gt;や&lt;code&gt;AVG()&lt;/code&gt;といった集計関数に&lt;code&gt;OVER&lt;/code&gt;を付けてWindow集計を行う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://prestodb.io/docs/current/functions/window.html&#34;&gt;Window Functions — Presto 0.247 Documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;次のテストデータを使う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amazon Forecastで時系列データの予測を行う</title>
      <link>https://www.sambaiz.net/article/327/</link>
      <pubDate>Sun, 21 Feb 2021 01:04:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/327/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/forecast/&#34;&gt;Amazon Forecast&lt;/a&gt;は機械学習によって時系列データの予測を行うマネージドサービス。&#xA;ドメインやアルゴリズムを選んでデータを投入すればそれらしい出力が得られる。&#xA;まずこれで予測してみて、その結果をベースラインとしてSageMakerなどで自作したモデルを評価するといった使い方もできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kinesis Data Analyticsによる集計遅延箇所の特定</title>
      <link>https://www.sambaiz.net/article/324/</link>
      <pubDate>Sun, 07 Feb 2021 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/324/</guid>
      <description>&lt;p&gt;Kinesis Data Analytics (KDA)はマッピングしたカラムに加えて、Kinesis Data Streams (KDS)に入った時間 &lt;code&gt;APPROXIMATE_ARRIVAL_TIME&lt;/code&gt; とKDAのin-app STREAMに入った時間 &lt;code&gt;ROWTIME&lt;/code&gt; をソースに含める。これらとログのタイムスタンプを合わせることで集計遅延が起きた際にどこが原因になっているかを特定することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでCognito UserPoolとClientを作成しトリガーやFederationを設定する</title>
      <link>https://www.sambaiz.net/article/318/</link>
      <pubDate>Sun, 06 Dec 2020 18:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/318/</guid>
      <description>&lt;p&gt;CloudFormationでCognito UserPoolを作成すると、以前はドメインやFederationの設定などを手作業で行う必要があったが、&#xA;去年の10月に諸々のリソースが&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/ReleaseHistory.html&#34;&gt;追加され&lt;/a&gt;、その必要がなくなった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKSにKubeflowをインストールする</title>
      <link>https://www.sambaiz.net/article/316/</link>
      <pubDate>Sun, 29 Nov 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/316/</guid>
      <description>&lt;p&gt;Kubernetes上で機械学習を行うためのツールキット&lt;a href=&#34;https://www.kubeflow.org/&#34;&gt;Kubeflow&lt;/a&gt;を&#xA;EKSに&lt;a href=&#34;https://www.kubeflow.org/docs/aws/deploy/install-kubeflow/&#34;&gt;インストール&lt;/a&gt;する。&#xA;m5.large * 4のクラスタをCDKで作成した。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/297/&#34;&gt;CDKでEKSクラスタの作成からHelm ChartでのLocustのインストールまでを一気に行う - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでAthenaのクエリを実行する</title>
      <link>https://www.sambaiz.net/article/309/</link>
      <pubDate>Sat, 14 Nov 2020 16:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/309/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/segmentio/go-athena&#34;&gt;segmentio/go-athena&lt;/a&gt;を使う。&lt;code&gt;database/sql&lt;/code&gt;のドライバーとして提供されていて、&#xA;&lt;a href=&#34;https://github.com/segmentio/go-athena/blob/dfa5f18189303b39c4ccc2f0c292947540214e63/conn.go#L60&#34;&gt;StartQueryExecution()&lt;/a&gt;と&#xA;&lt;a href=&#34;https://github.com/segmentio/go-athena/blob/dfa5f18189303b39c4ccc2f0c292947540214e63/conn.go#L86&#34;&gt;stateのポーリング&lt;/a&gt;、&#xA;&lt;a href=&#34;https://github.com/segmentio/go-athena/blob/dfa5f18189303b39c4ccc2f0c292947540214e63/value.go#L40&#34;&gt;値のキャスト&lt;/a&gt;を行う。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;database/sql&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/service/sts&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_ &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/segmentio/go-athena&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outputLocation&lt;/span&gt;() (&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;svc &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; sts.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(session.&lt;span style=&#34;color:#50fa7b&#34;&gt;Must&lt;/span&gt;(session.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewSession&lt;/span&gt;()))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;result, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; svc.&lt;span style=&#34;color:#50fa7b&#34;&gt;GetCallerIdentity&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sts.GetCallerIdentityInput{})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; result.Account &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; svc.Config.Region &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;account or region is nil&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;s3://aws-athena-query-results-%s-%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;result.Account, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;svc.Config.Region), &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(query &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;sql.Rows, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;loc, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outputLocation&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;db, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; sql.&lt;span style=&#34;color:#50fa7b&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;athena&amp;#34;&lt;/span&gt;, fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;db=default&amp;amp;output_location=%s&amp;#34;&lt;/span&gt;, loc))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; db.&lt;span style=&#34;color:#50fa7b&#34;&gt;Query&lt;/span&gt;(query)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;rows, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SELECT 1 as v, 2 as w FROM hoge.fuga&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; rows.&lt;span style=&#34;color:#50fa7b&#34;&gt;Next&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; v, w &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;rows.&lt;span style=&#34;color:#50fa7b&#34;&gt;Scan&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;w)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v, w)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>VSCodeのdevcontainerにSAM CLIをインストールしlocal invokeする</title>
      <link>https://www.sambaiz.net/article/301/</link>
      <pubDate>Mon, 12 Oct 2020 09:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/301/</guid>
      <description>&lt;p&gt;VSCodeのdevcontainerにAWS SAM CLIをインストールしてDockerを用いたlocal invokeもできるようにする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/289/&#34;&gt;VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElastiCacheでRedisクラスタを作成する際の設定</title>
      <link>https://www.sambaiz.net/article/303/</link>
      <pubDate>Fri, 09 Oct 2020 00:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/303/</guid>
      <description>&lt;h2 id=&#34;cacheclusterとreplicationgroup&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/jp/elasticache/redis/faqs/&#34;&gt;CacheClusterとReplicationGroup&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;コンソールでは意識することがないが、CloudFormationでElastiCacheクラスターを構築する場合は&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-elasticache-cache-cluster.html&#34;&gt;CacheCluster&lt;/a&gt;と&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-replicationgroup.html&#34;&gt;ReplicationGroup&lt;/a&gt;という概念が存在する。&#xA;プライマリノードとリードレプリカノードは別のCacheClusterに作成され、それらをカプセル化したのがReplicationGroup。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kinesis Data AnalyticsのSQL, Lambdaへの出力とCDKによるリソースの作成</title>
      <link>https://www.sambaiz.net/article/302/</link>
      <pubDate>Sat, 03 Oct 2020 19:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/302/</guid>
      <description>&lt;p&gt;Kinesis Data Analyticsで&lt;a href=&#34;https://docs.aws.amazon.com/kinesisanalytics/latest/dev/streaming-sql-concepts.html&#34;&gt;Streaming SQL&lt;/a&gt;を実行し、&#xA;Lambdaに送る。ほかの接続先としてData StreamやFirehoseがあり、フォーマットはJSONとCSVから選べる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKS上のLocustから負荷をかける際のリソースの割り当てやインスタンスタイプの調整</title>
      <link>https://www.sambaiz.net/article/299/</link>
      <pubDate>Sun, 20 Sep 2020 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/299/</guid>
      <description>&lt;p&gt;EKS上にLocustをインストールしたのだが、ユーザーを増やしてもRPSが大して伸びない。リソースを調整してなるべく効率的に負荷をかけられるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudWatch Container InsightsでEKSのメトリクスを取得する</title>
      <link>https://www.sambaiz.net/article/300/</link>
      <pubDate>Fri, 18 Sep 2020 19:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/300/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/ContainerInsights.html&#34;&gt;CloudWatch Container Insights&lt;/a&gt;は&#xA;EKS/EC2上で動くK8sクラスタおよびECSの&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics.html&#34;&gt;メトリクス&lt;/a&gt;を取得する機能。今回はEKSで使う。&lt;/p&gt;&#xA;&lt;p&gt;CDKでクラスタを作成する場合、ECSでは&lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.Cluster.html#containerinsights&#34;&gt;containerInsights&lt;/a&gt;をtrueにすることでセットアップされるが、EKSにはまだ存在しないため手動で行う。&lt;a href=&#34;https://github.com/aws/aws-cdk/issues/7160&#34;&gt;PR&lt;/a&gt;は上がっている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/297/&#34;&gt;CDKでEKSクラスタの作成からHelm ChartでのLocustのインストールまでを一気に行う - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでEKSクラスタの作成からHelm ChartでのLocustのインストールまでを一気に行う</title>
      <link>https://www.sambaiz.net/article/297/</link>
      <pubDate>Wed, 16 Sep 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/297/</guid>
      <description>&lt;p&gt;以前、Helm で locust をインストールしたが、今回は EKS に CDK でインストールする。CDK だとクラスタの作成からできるので cdk deploy で一気に環境が整う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/161/&#34;&gt;KubernetesにHelmでLocustによる分散負荷試験環境を立てる - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm run cdk -- --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.62.0 (build 8c2d7fc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まず VPC と Cluster を作成する。mastersRole をユーザーが assume して kubectl コマンドを実行できるように Principal に AWS アカウントも入れている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Organizaionsで複数のアカウントを一元管理する</title>
      <link>https://www.sambaiz.net/article/298/</link>
      <pubDate>Tue, 15 Sep 2020 23:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/298/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/organizations/&#34;&gt;AWS Organizations&lt;/a&gt;は複数のAWSアカウントを一元管理する機能。&#xA;既存のアカウントを一元管理できるだけではなく新規アカウントを簡単に作成することができるので、&#xA;セキュリティの向上やコストの分離、クォータなどアカウント全体に及ぶ影響の局所化などのためにサービスや環境ごとにアカウントを分けるハードルが下がる。&#xA;引き続きアカウントごとのコストも確認できるが、請求は一括で行われるので支払いの管理が楽になるし、ボリュームディスカウントの使用量が合算されRIも共有できるのでコストの上でも不利にならない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCodeのDocker開発コンテナでJupyter Notebookを開いてAthenaのクエリを実行し可視化する</title>
      <link>https://www.sambaiz.net/article/294/</link>
      <pubDate>Fri, 04 Sep 2020 19:34:04 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/294/</guid>
      <description>&lt;p&gt;ローカルでJupyter Notebookを動かすために以前は&lt;a href=&#34;https://hub.docker.com/r/jupyter/datascience-notebook/&#34;&gt;jupyter/datascience-notebook&lt;/a&gt;のイメージを立ち上げていた。&#xA;Notebookはエディタとしての機能に乏しいため通常のコードを書くのが大変だったのだが、&#xA;VSCodeのPython extensionにはJupyter notebookサポートが入っていてそのまま開けて実行できるのを知ったので移行することにした。&#xA;今回はVSCodeのDocker開発コンテナからNotebookを開いてAthenaのクエリを実行し可視化する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerでTensorFlowのモデルを学習させる</title>
      <link>https://www.sambaiz.net/article/293/</link>
      <pubDate>Mon, 10 Aug 2020 13:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/293/</guid>
      <description>&lt;p&gt;以前PyTorchのモデルを学習させたが、そのTensorFlow版。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/287/&#34;&gt;SageMakerでPyTorchのモデルを学習させる - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;コード&#34;&gt;コード&lt;/h2&gt;&#xA;&lt;p&gt;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/sagemaker-tensorflow-titanic&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;h3 id=&#34;モデル&#34;&gt;モデル&lt;/h3&gt;&#xA;&lt;p&gt;モデルはTitanicのを使う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/291/&#34;&gt;TensorFlow2のKeras APIでTitanicのモデルを作る - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerで学習したPyTorchのモデルをElastic Inferenceを有効にしてデプロイする</title>
      <link>https://www.sambaiz.net/article/290/</link>
      <pubDate>Sun, 26 Jul 2020 02:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/290/</guid>
      <description>&lt;p&gt;学習させたモデルをSageMakerのホスティングサービスにデプロイする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/287/&#34;&gt;SageMakerでPyTorchのモデルを学習させる - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;推論時に呼ばれる関数&#34;&gt;推論時に呼ばれる関数&lt;/h2&gt;&#xA;&lt;p&gt;推論時には次の関数が&lt;a href=&#34;https://sagemaker.readthedocs.io/en/stable/frameworks/pytorch/using_pytorch.html#serve-a-pytorch-model&#34;&gt;呼ばれる&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;model_fn(model_dir): モデルをロードする&lt;/li&gt;&#xA;&lt;li&gt;input_fn(request_body, request_content_type): リクエストボディのデシリアライズ&lt;/li&gt;&#xA;&lt;li&gt;predict_fn(input_data, model): モデルで推論する&lt;/li&gt;&#xA;&lt;li&gt;output_fn(prediction, content_type): Content-Typeに応じたシリアライズ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;input_fn()&lt;/code&gt; と &lt;code&gt;output_fn()&lt;/code&gt; はJSON, CSV, NPYに対応した実装が、&lt;code&gt;predict_fn()&lt;/code&gt; はモデルを呼び出す実装が&lt;a href=&#34;https://github.com/aws/sagemaker-pytorch-inference-toolkit/blob/4894d509f60ecd43d34356c9c571b9fb9e8b97ad/src/sagemaker_pytorch_serving_container/default_pytorch_inference_handler.py&#34;&gt;デフォルト&lt;/a&gt;として用意されていて、&#xA;&lt;code&gt;model_fn()&lt;/code&gt; も後述するElastic Inferenceを使う場合&lt;code&gt;model.pt&lt;/code&gt;というファイルをロードするデフォルト実装が使われる。&#xA;ただしその場合モデルが&lt;code&gt;torch.jit.save()&lt;/code&gt;で&lt;a href=&#34;https://pytorch.org/docs/stable/jit.html&#34;&gt;TorchScript&lt;/a&gt;として保存してある&lt;a href=&#34;https://sagemaker.readthedocs.io/en/stable/frameworks/pytorch/using_pytorch.html#save-the-model&#34;&gt;必要がある&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerでPyTorchのモデルを学習させる</title>
      <link>https://www.sambaiz.net/article/287/</link>
      <pubDate>Fri, 24 Jul 2020 22:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/287/</guid>
      <description>&lt;p&gt;AWSの機械学習サービス&lt;a href=&#34;https://aws.amazon.com/jp/sagemaker/&#34;&gt;SageMaker&lt;/a&gt;でPyTorchのモデルを学習させる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コード&#34;&gt;コード&lt;/h2&gt;&#xA;&lt;p&gt;まず学習させるモデルとそれを呼び出すエントリーポイントになるコードを書く。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/sagemaker-pytorch-mnist&#34;&gt;GitHub&lt;/a&gt;にある。&#xA;実際の環境と同じSageMakerのコンテナをローカルで動かしてVSCodeのRemote Developmentで接続して開発すると入っていないパッケージは警告が出たりして良い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する</title>
      <link>https://www.sambaiz.net/article/289/</link>
      <pubDate>Sun, 19 Jul 2020 19:34:04 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/289/</guid>
      <description>&lt;p&gt;SageMakerで学習させるモデルを開発するにあたって、Notebooks上ではコードを書きづらいのでVS Codeで書いているのだが、ローカルに依存パッケージをインストールして実行しているため&#xA;エディタ上では警告が出ていなくても、実際の環境にはパッケージがなかったりすることがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PoetryでPythonの依存パッケージを管理する</title>
      <link>https://www.sambaiz.net/article/288/</link>
      <pubDate>Sat, 18 Jul 2020 21:23:04 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/288/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/python-poetry/poetry&#34;&gt;Poetry&lt;/a&gt;は比較的新しいPythonの依存管理ツールで、&#xA;&lt;a href=&#34;https://github.com/pypa/pipenv&#34;&gt;pipenv&lt;/a&gt;の&lt;a href=&#34;https://github.com/python-poetry/poetry#what-about-pipenv&#34;&gt;依存解決に失敗することがある&lt;/a&gt;問題を解消したり、ライブラリを開発しやすくしたものらしい。&#xA;まだスターはpipenvの半分ほどだがバージョンもv1.0.0に到達したしpipenvよりも速くて安定しているという話もあるので使ってみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPCエンドポイント</title>
      <link>https://www.sambaiz.net/article/274/</link>
      <pubDate>Sat, 23 May 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/274/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/vpc-endpoints.html&#34;&gt;VPCエンドポイント&lt;/a&gt;は&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/privatelink/&#34;&gt;PrivateLink&lt;/a&gt;対応のサービスおよび、S3やDynamoとAWSネットワーク内で接続するためのエンドポイント。&#xA;インターネットに出ない分セキュアでゲートウェイへの負荷も抑えられる。&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/privatelink/pricing/&#34;&gt;料金&lt;/a&gt;は時間あたりとトラフィック量による。&lt;/p&gt;&#xA;&lt;p&gt;VPCエンドポイントを使うためにアプリケーション側に手を入れる必要はなく、&#xA;S3とDynamoがサポートしているGatewayのエンドポイントではルートテーブルによって、&#xA;その他多くのサービスがサポートしているInterfaceのエンドポイントでは名前解決の時点で向き先が変わるようになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DAX (DynamoDB Accelerator)の特性と挙動確認</title>
      <link>https://www.sambaiz.net/article/260/</link>
      <pubDate>Wed, 26 Feb 2020 23:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/260/</guid>
      <description>&lt;h2 id=&#34;daxとは&#34;&gt;DAXとは&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/dynamodb/dax/&#34;&gt;DAX&lt;/a&gt;はDynamoDBの前段に置かれるマネージドなインメモリキャッシュで、&#xA;Read速度の向上(数ms-&amp;gt;数百μs)とテーブルのRead Capacityの節約に効果がある。&lt;/p&gt;&#xA;&lt;p&gt;DynamoDBとSDKのAPIの互換性があるため置き換えるだけで使えるようになっている。&#xA;クライアントの実装としてはHTTPではない独自のプロトコルで&lt;a href=&#34;https://github.com/aws/aws-dax-go/blob/19b34c5c99ea4b76610dcbae7d87fd572de012df/dax/internal/client/single.go#L278&#34;&gt;通信している&lt;/a&gt;点が異なる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ECSでアプリケーションを動かすBoilerplateを作った</title>
      <link>https://www.sambaiz.net/article/259/</link>
      <pubDate>Mon, 24 Feb 2020 16:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/259/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/ecs-boilerplate&#34;&gt;https://github.com/sambaiz/ecs-boilerplate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ECS上でアプリケーションを動かすBoilerplateを作った。CDKでデプロイする。以前Digdagを動かしたときのを汎用的にしたもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LA,ディズニーランドからre:Inventに参加しグランドキャニオンへドライブしてきた</title>
      <link>https://www.sambaiz.net/article/250/</link>
      <pubDate>Sun, 22 Dec 2019 23:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/250/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/103/&#34;&gt;一昨年&lt;/a&gt;、&lt;a href=&#34;https://www.sambaiz.net/article/164/&#34;&gt;去年&lt;/a&gt;と参加したGoogle I/Oのチケットが今年は当たらなかったので、前から行ってみたかったAWSのre:Inventに参加することにした。&#xA;会場はラスベガスで、会期は12/2-6。前後の土日ともう2日つなげて現地時間10日間の旅程にした。&#xA;去年、カナダのバンクーバーから西海岸のシアトル、ポートランド、サンフランシスコは巡ったので、今回はまだ訪れていないロサンゼルスからスタートすることにした。会期後はグランドキャニオンまで足を伸ばす。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ECS(EC2)のCloudFormation最小構成</title>
      <link>https://www.sambaiz.net/article/247/</link>
      <pubDate>Fri, 15 Nov 2019 20:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/247/</guid>
      <description>&lt;p&gt;EC2でECSのServiceを動かすCFnテンプレートを書く。以前Fargateで動かしたものを一部再利用する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/221/&#34;&gt;ECS FargateでSidecarのFluentdでログをS3に送る構成をCloudFormationで構築する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda環境でできない処理をECSで実行する</title>
      <link>https://www.sambaiz.net/article/245/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/245/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;https://github.com/sambaiz/cdkbot&#34;&gt;cdkbot&lt;/a&gt;というツールを出した。これはGitHubのPRからCDKのデプロイなどを実行できるツールでlambda上で動いていた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/235/&#34;&gt;PR上でCDKのレビューやデプロイを行うツールcdkbotを作った - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;npmやgitといった外部コマンドを実行するため、layerにバイナリを詰めて上げていた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/233/&#34;&gt;Lambda上でnpm installできるLayerを作った - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>PR上でCDKのレビューやデプロイを行うツールcdkbotを作った</title>
      <link>https://www.sambaiz.net/article/235/</link>
      <pubDate>Thu, 29 Aug 2019 22:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/235/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/cdkbot&#34;&gt;sambaiz/cdkbot&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;PRのコメントで&lt;code&gt;/diff&lt;/code&gt;や&lt;code&gt;/deploy&lt;/code&gt;と打つと&lt;code&gt;cdk diff&lt;/code&gt;や&lt;code&gt;cdk deploy&lt;/code&gt;が走る。&#xA;diffを見てレビューし、良ければ&lt;code&gt;/deploy&lt;/code&gt;でデプロイし完了するとmergeされる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでECS&#43;Fargate上にDigdagを立ててCognito認証を挟む</title>
      <link>https://www.sambaiz.net/article/234/</link>
      <pubDate>Wed, 31 Jul 2019 03:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/234/</guid>
      <description>&lt;p&gt;AWSでワークフローエンジン&lt;a href=&#34;https://www.digdag.io/&#34;&gt;Digdag&lt;/a&gt;を立てるにあたりスケールを見越してECS+Fargateで動かす。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/digdag-cdk-ecs-fargate&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/196/&#34;&gt;FargateでECSを使う - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;リソースはCDKで作る。最近GAになったので高レベルのクラスを積極的に使っている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/222/&#34;&gt;AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda上でnpm installできるLayerを作った</title>
      <link>https://www.sambaiz.net/article/233/</link>
      <pubDate>Tue, 23 Jul 2019 23:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/233/</guid>
      <description>&lt;p&gt;Lambda上でnpm installするためにnpmとnode, npmrc入りのLambda Layerを作った。&#xA;&lt;a href=&#34;https://github.com/sambaiz/npm-lambda-layer&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/232/&#34;&gt;Lambda Layerでバイナリやライブラリを切り出す - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda Layerでバイナリやライブラリを切り出す</title>
      <link>https://www.sambaiz.net/article/232/</link>
      <pubDate>Mon, 22 Jul 2019 21:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/232/</guid>
      <description>&lt;p&gt;Lambdaで実行したい外部コマンドがある場合、通常バイナリをパッケージに含めることになりデプロイに時間がかかってしまう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;os/exec&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handler&lt;/span&gt;(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cmd &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; exec.&lt;span style=&#34;color:#50fa7b&#34;&gt;Command&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;clone&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://github.com/sambaiz/foobar.git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/tmp/repo&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;output, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; cmd.&lt;span style=&#34;color:#50fa7b&#34;&gt;CombinedOutput&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; events.APIGatewayProxyResponse{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;Body:       fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%s %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(output), err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;()),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;StatusCode: &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; events.APIGatewayProxyResponse{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Body:       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(output),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;StatusCode: &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;lambda.&lt;span style=&#34;color:#50fa7b&#34;&gt;Start&lt;/span&gt;(handler)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exec: &amp;#34;git&amp;#34;: executable file not found in $PATH&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-layers.html&#34;&gt;Lambda Layer&lt;/a&gt;を使うと&#xA;ライブラリやバイナリを切り出すことができ、複数Functionで共有することもできる。&#xA;ディレクトリをzipにしてLayerに指定すると中身が&lt;code&gt;/opt&lt;/code&gt;に展開され、&lt;code&gt;/opt/bin&lt;/code&gt;にはPATHが、&lt;code&gt;/opt/lib&lt;/code&gt;にはLD_LIBRARY_PATHが通るほか、&#xA;言語ごとのパッケージ置き場がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SAMとGoでPRのコメントに対して返事を返すGitHub Appを作る</title>
      <link>https://www.sambaiz.net/article/231/</link>
      <pubDate>Fri, 19 Jul 2019 21:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/231/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.github.com/apps/&#34;&gt;GitHub App&lt;/a&gt;はリポジトリにインストールできるアプリケーションで、&#xA;Access TokenやOAuth Appと&lt;a href=&#34;https://developer.github.com/apps/differences-between-apps/&#34;&gt;異なり&lt;/a&gt;&#xA;ユーザーとは独立した権限を与えて実行することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cognito UserPoolのPreSignUp時に呼ばれるLambdaで登録ユーザーを制限する</title>
      <link>https://www.sambaiz.net/article/228/</link>
      <pubDate>Sun, 07 Jul 2019 17:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/228/</guid>
      <description>&lt;p&gt;サードパーティのIdPからCognitoにSignUpできるようにする場合、特定のドメインのメールアドレスといったような制限をかけたいことがある。&#xA;PreSignUp時のLambdaでこれを弾いてやることでUserPoolに入らないようにすることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LambdaとALBでCognito認証をかけて失敗したらログイン画面に飛ばす</title>
      <link>https://www.sambaiz.net/article/227/</link>
      <pubDate>Wed, 03 Jul 2019 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/227/</guid>
      <description>&lt;p&gt;ALBのTargetとしてLambdaが&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/lambda-functions-as-targets-for-application-load-balancers/&#34;&gt;選択できるようになり&lt;/a&gt;、&#xA;若干の時間課金が発生する代わりに柔軟にルーティングできるAPI Gatewayのように使えるようになった。&#xA;ActionとしてCognito認証を入れて認証に失敗したらログイン画面を表示させる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>API GatewayでCognitoの認証をかけて必要ならログイン画面に飛ばす処理をGoで書く</title>
      <link>https://www.sambaiz.net/article/226/</link>
      <pubDate>Wed, 03 Jul 2019 20:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/226/</guid>
      <description>&lt;p&gt;ブラウザから直接API GatewayのエンドポイントにアクセスしたときにCognitoのTokenで認証し、失敗したらログイン画面を表示させる。&#xA;API GatewayでCognitoの認証をかける場合、AuthorizerでUserPoolを指定するのが最も簡単なパターンだが、&#xA;これだとHeaderにTokenを付けてアクセスする必要があり認証に失敗するとUnauthorizedが返る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS DeepRacerを始める</title>
      <link>https://www.sambaiz.net/article/224/</link>
      <pubDate>Mon, 10 Jun 2019 23:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/224/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/deepracer/&#34;&gt;AWS DeepRacer&lt;/a&gt;は自走する1/18スケールのレーシングカーで、&#xA;SageMakerやRoboMaker&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/deepracer/latest/developerguide/deepracer-dependent-aws-services.html&#34;&gt;など&lt;/a&gt;を使って強化学習し、実機を走らせたりバーチャルのDeepRacerリーグで競うことができる。&#xA;カメラの画像の処理や、強化学習のアルゴリズムの実装の必要はなく、報酬関数だけで動いてくれるので敷居が低い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>&lt;p&gt;AWS CDKでリソースを記述し、PullRequestに対して自動で&lt;code&gt;cdk diff&lt;/code&gt;で変更があるものを表示して、mergeしたときに&lt;code&gt;cdk deploy&lt;/code&gt;する。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/aws-cdk-circleci-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする</title>
      <link>https://www.sambaiz.net/article/222/</link>
      <pubDate>Sun, 19 May 2019 01:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/222/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/latest/&#34;&gt;AWS CDK&lt;/a&gt;(Cloud Development Kit)はTypeScriptやJavaなどのコードから&#xA;CloudFormationのテンプレートを生成して差分を確認しデプロイできる公式のツール。まだdeveloper preview。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ECS FargateでSidecarのFluentdでログをS3に送る構成をCloudFormationで構築する</title>
      <link>https://www.sambaiz.net/article/221/</link>
      <pubDate>Thu, 09 May 2019 23:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/221/</guid>
      <description>&lt;p&gt;DAEMONを動かすことは&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ecs_services.html#service_scheduler&#34;&gt;できず&lt;/a&gt;、&#xA;fluentd logdriverも&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html&#34;&gt;サポートされていない&lt;/a&gt;Fargateで、&#xA;サイドカーとしてFluentdのコンテナを動かしてアプリケーションのログをS3に送る。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/ecs-fargate-fluentd-sidecar&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DatadogのAWS integrationとAlertの設定をTerraformで行う</title>
      <link>https://www.sambaiz.net/article/219/</link>
      <pubDate>Sat, 04 May 2019 19:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/219/</guid>
      <description>&lt;p&gt;DatadogのAWS integrationとAlertの設定をTerraformで行い、バージョン管理やレビューできるようにする。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/datadog-terraform-sample&#34;&gt;GitHub&lt;/a&gt;に置いてある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker NotebookでGitリポジトリにSSHでpush/pullできるようにする</title>
      <link>https://www.sambaiz.net/article/211/</link>
      <pubDate>Mon, 04 Mar 2019 22:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/211/</guid>
      <description>&lt;p&gt;Sagemaker NotebookはAWSの機械学習のワークフローを提供する&lt;a href=&#34;https://aws.amazon.com/jp/sagemaker/&#34;&gt;SageMaker&lt;/a&gt;の一部である&#xA;マネージドなJupyter Notebooksで、可視化などはもちろん、ここから複数インタンスでの学習ジョブを実行したりすることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SAMでLambdaの関数をデプロイしServerless Application Repositoryに公開する</title>
      <link>https://www.sambaiz.net/article/207/</link>
      <pubDate>Sun, 10 Feb 2019 16:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/207/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/what-is-sam.html&#34;&gt;AWS SAM (Serverless Application Model)&lt;/a&gt;はAWS公式の&#xA;サーバーレスアプリケーションのビルドツール。&#xA;CloudFormationのテンプレートを設定ファイルに書くことでLambda関数と共にイベントトリガーや他のリソースも含めてデプロイでき、&#xA;その点で&lt;a href=&#34;https://serverless.com/&#34;&gt;Serverless Framework&lt;/a&gt;と立ち位置が近いが、向こうがLambda以外のサーバーレス環境にも対応していたり、&#xA;プラグインによって機能拡張できるようになっている一方、こちらは比較的薄いツールになっている。&#xA;ただ、&lt;a href=&#34;https://aws.amazon.com/jp/serverless/serverlessrepo/&#34;&gt;Serverless Application Repository&lt;/a&gt;で公開するにはSAMの形式にする必要があり、&#xA;Serverless FrameworkにもSAMのテンプレートを出力する&lt;a href=&#34;https://github.com/SAPessi/serverless-sam&#34;&gt;プラグイン&lt;/a&gt;がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudFormationでVPCを作成してLambdaをデプロイしAurora Serverlessを使う</title>
      <link>https://www.sambaiz.net/article/206/</link>
      <pubDate>Sun, 03 Feb 2019 17:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/206/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/rds/aurora/serverless/&#34;&gt;Aurora Serverless&lt;/a&gt;はオートスケールするAuroraで、&#xA;使ったAurora Capacity Unit (ACU)によって&lt;a href=&#34;https://aws.amazon.com/jp/rds/aurora/pricing/&#34;&gt;料金&lt;/a&gt;が発生するため、&#xA;使用頻度が少なかったり変動するアプリケーションにおいて安くRDBを使うことができる。&#xA;インスタンスを立てると最低でも月3000円くらいかかるが、Serverlessだとほとんどストレージ分から運用することができて趣味でも使いやすい。&#xA;ただしLambdaと同様に常に同等のリソースを使っている状態だとインスタンスと比べて割高になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Systems Manager (SSM)のParameter Storeに認証情報を置き参照する</title>
      <link>https://www.sambaiz.net/article/204/</link>
      <pubDate>Mon, 07 Jan 2019 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/204/</guid>
      <description>&lt;p&gt;DBのパスワードやAPIトークンといった認証情報をバージョン管理するコードや設定ファイル上に書くとOSS化など公開範囲を広げるときにやや困るし漏れるリスクが高まるのでなるべく避けたい。&#xA;そこでSSMのParameter Storeに値を置き、実行時やデプロイ時に参照する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS GlueでCSVを加工しParquetに変換してパーティションを切りAthenaで参照する</title>
      <link>https://www.sambaiz.net/article/203/</link>
      <pubDate>Tue, 01 Jan 2019 17:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/203/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/glue/&#34;&gt;AWS Glue&lt;/a&gt;はマネージドなETL(Extract/Transform/Load)サービスで、&lt;a href=&#34;https://spark.apache.org/&#34;&gt;Spark&lt;/a&gt;を使ってS3などにあるデータを読み込み加工して変換出力したり、AthenaやRedshift Spectrumで参照できるデータカタログを提供する。&#xA;今回はS3のCSVを読み込んで加工し、列指向フォーマットParquetに変換しパーティションを切って出力、その後クローラを回してデータカタログにテーブルを作成してAthenaで参照できることを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FargateでECSを使う</title>
      <link>https://www.sambaiz.net/article/196/</link>
      <pubDate>Fri, 09 Nov 2018 00:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/196/</guid>
      <description>&lt;p&gt;ECSはAWSのコンテナオーケストレーションサービス。&#xA;クラスタは&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/launch_types.html#launch-type-ec2&#34;&gt;EC2上に立てる&lt;/a&gt;こともできるが、その場合Auto Scalingグループの設定や&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/how-to-automate-container-instance-draining-in-amazon-ecs/&#34;&gt;スケールイン時のdrain&lt;/a&gt;などを考慮する必要がある。&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/launch_types.html#launch-type-fargate&#34;&gt;Fargate&lt;/a&gt;で起動するとサーバーレスで実行でき、バックエンドの管理が必要がなくなる。&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/fargate/pricing/&#34;&gt;料金&lt;/a&gt;は割り当てたvCPUとメモリによって、最低1分の1秒単位で課金される。&#xA;Lambdaと同じくリソースあたりでいうとオンデマンドのEC2と比較して高くなっているが、柔軟にリソースが指定できる分いくらか差は縮まるかもしれない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macでの開発環境構築メモ</title>
      <link>https://www.sambaiz.net/article/163/</link>
      <pubDate>Sat, 14 Apr 2018 14:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/163/</guid>
      <description>&lt;p&gt;新しいMBPを買ったので開発環境の構築でやったことを残しておく&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;アクセシビリティから3本指スクロールを有効にする&lt;/li&gt;&#xA;&lt;li&gt;ホットコーナーの左上にLaunchPad、右上にデスクトップを割り当てている&lt;/li&gt;&#xA;&lt;li&gt;画面をなるべく広く使うためにDockは左に置いて自動的に隠す&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bash_profile&#34;&gt;bash_profile&lt;/h2&gt;&#xA;&lt;p&gt;パッケージマネージャ以外で持ってきたバイナリは ${HOME}/bin に置くことにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cognito UserPoolとAPI Gatewayで認証付きAPIを立てる</title>
      <link>https://www.sambaiz.net/article/157/</link>
      <pubDate>Sun, 25 Feb 2018 23:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/157/</guid>
      <description>&lt;p&gt;UserPoolを作成。デフォルト設定はこんな感じ。&#xA;必須項目や、確認メールの文面などを自由にカスタマイズでき、&#xA;登録時などのタイミングでLambdaを発火させることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless FrameworkでLambdaをデプロイする</title>
      <link>https://www.sambaiz.net/article/155/</link>
      <pubDate>Sun, 11 Feb 2018 23:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/155/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/serverless/serverless&#34;&gt;Serverless Framework&lt;/a&gt;でLambda Functionをデプロイする。&#xA;Apexが基本的にFunction自体のデプロイしかしないのに対して、こちらはeventの設定なども諸々やってくれて強い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DatadogのLambda Integrationで気象データを送ってアラートを飛ばす</title>
      <link>https://www.sambaiz.net/article/152/</link>
      <pubDate>Mon, 05 Feb 2018 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/152/</guid>
      <description>&lt;p&gt;最近朝が寒くて布団から出るのがつらい。雨や雪が降っていたら尚更のこと、それならそれで現状を把握する必要がある。&#xA;そこで、無料から使える気象API &lt;a href=&#34;http://openweathermap.org/&#34;&gt;OpenWeatherMap&lt;/a&gt;のデータをdatadogに送って、特に寒い日や雨雪が降るような朝にはアラートを飛ばすことにした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athenaのmigrationやpartitionするathena-adminを作った</title>
      <link>https://www.sambaiz.net/article/145/</link>
      <pubDate>Sun, 24 Dec 2017 23:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/145/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/athena-admin&#34;&gt;https://github.com/sambaiz/athena-admin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;AthenaはS3をデータソースとするマネージドなデータ分析基盤。Prestoベースで標準SQLを実行できる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/athena/pricing/&#34;&gt;料金&lt;/a&gt;はスキャンしたデータ量にかかり、$5/TB。1MB切り上げで、10MB以下のクエリは10MBになる。&#xA;データ量に対してかなり安く使えるものの、フルスキャンしてしまうとBigQueryと同様にお金が溶けてしまうので、大抵はパーティションを切ることになるのだが都度locationを指定して ADD PARTITION を実行するのは大変。さらにスキーマを変更するのにも ALTER TABLE ADD COLUMNS などはないのでテーブルを作り直すことになるが、当然パーティションも全部作り直すことになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ApexでデプロイしたLambdaのトリガーをTerraformで管理する</title>
      <link>https://www.sambaiz.net/article/144/</link>
      <pubDate>Sun, 12 Nov 2017 22:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/144/</guid>
      <description>&lt;p&gt;Apexでfunctionをデプロイするとトリガーが登録されないのであとで追加することになる。&#xA;これを手作業で行うこともできるのだが、せっかくなのでアプリケーションと一緒に管理したい。&#xA;そんなときのためにterraformコマンドをラップした&lt;a href=&#34;http://apex.run/#managing-infrastructure&#34;&gt;apex infra&lt;/a&gt;が用意されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redashでデータを可視化する</title>
      <link>https://www.sambaiz.net/article/141/</link>
      <pubDate>Mon, 23 Oct 2017 23:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/141/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/getredash/redash&#34;&gt;Redash&lt;/a&gt;はOSSのデータ可視化ツール。&#xA;BIツールのようにパラメータを変えながら指標を探っていくというよりは、分かっている指標を見るのに使うイメージ。&#xA;比較的機能が少ない分処理がわかりやすく、&#xA;クエリが自動生成されないため時間がかかるものを実行する前にある程度気づけるのが良いと思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ApexでLambdaをデプロイする</title>
      <link>https://www.sambaiz.net/article/140/</link>
      <pubDate>Sun, 22 Oct 2017 16:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/140/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/apex/apex&#34;&gt;Apex&lt;/a&gt;でLambdaをデプロイする。&#xA;とても簡単に使えるし、変なこともしないので良い感じ。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Serverless Frameworkだとeventの設定までカバーできてより便利。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/155/&#34;&gt;Serverless FrameworkでLambdaをデプロイする - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った</title>
      <link>https://www.sambaiz.net/article/132/</link>
      <pubDate>Sun, 10 Sep 2017 23:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/132/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChrome/puppeteer&#34;&gt;Puppeteer&lt;/a&gt;でHeadless Chromeを動かすコードを&#xA;Lambda上で動かすStarter Kitを作った。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/puppeteer-lambda-starter-kit&#34;&gt;puppeteer-lambda-starter-kit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;chromeの準備&#34;&gt;Chromeの準備&lt;/h2&gt;&#xA;&lt;p&gt;Puppeteerのインストール時に落としてくるChromeをLambda上で動かそうとしても&#xA;Lambdaにないshared libraryに依存しているため失敗する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TerraformでVPCを管理するmoduleを作る</title>
      <link>https://www.sambaiz.net/article/121/</link>
      <pubDate>Sun, 23 Jul 2017 02:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/121/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install terraform&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ terraform -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Terraform v0.9.11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;terraformの設定要素&#34;&gt;Terraformの設定要素&lt;/h2&gt;&#xA;&lt;h3 id=&#34;provider&#34;&gt;&lt;a href=&#34;https://www.terraform.io/docs/providers/index.html&#34;&gt;provider&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;IaaS(e.g. AWS)、PaaS(e.g. Heroku)、SaaS(e.g. CloudFlare)など。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/docs/providers/aws/&#34;&gt;AWS Provider&lt;/a&gt;はこんな感じ。&#xA;ここに直接access_keyやsecret_keyを書くこともできるが、誤って公開されてしまわないように環境変数か&#xA;variableで渡す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdのAggregatorをELBで負荷分散し、Blue/Green Deploymentする</title>
      <link>https://www.sambaiz.net/article/113/</link>
      <pubDate>Sun, 25 Jun 2017 00:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/113/</guid>
      <description>&lt;p&gt;デプロイやスループットの調整を簡単にするため、BeanstalkでAggregatorを立ち上げた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;負荷分散&#34;&gt;負荷分散&lt;/h2&gt;&#xA;&lt;p&gt;TCPの24224(設定による)が通るようにEC2,ELBのSGとリスナーの設定をする必要があって、&#xA;ELBのSGのアウトバウンドの設定が見落とされがち。ELBのクロスゾーン分散は有効になっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdでKinesis streamsに送るときの性能確認</title>
      <link>https://www.sambaiz.net/article/108/</link>
      <pubDate>Mon, 05 Jun 2017 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/108/</guid>
      <description>&lt;h2 id=&#34;localでのstreamsとproducerのbenchmark&#34;&gt;localでのstreamsとproducerのbenchmark&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis&#34;&gt;aws-fluent-plugin-kinesis&lt;/a&gt;の&#xA;make benchmark はlocalにDummyServerを&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis/blob/v1.1.3/benchmark/task.rake#L18&#34;&gt;立ち上げて&lt;/a&gt;送っている。&lt;/p&gt;&#xA;&lt;p&gt;空でもいいのでroleをつけておく必要がある。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/awslabs/aws-fluent-plugin-kinesis.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd aws-fluent-plugin-kinesis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum install -y ruby-devel gcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &amp;#39;gem &amp;#34;io-console&amp;#34;&amp;#39; &amp;gt;&amp;gt; Gemfile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make benchmark&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;RATEを指定しなければデフォルトで&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis/blob/v1.1.3/benchmark/task.rake#L19&#34;&gt;秒間1000レコード&lt;/a&gt;が送られる設定。&#xA;fluentdを起動してから10秒後にプロセスをkillし、そのレコード数などを出力している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BeanstalkでのパッケージのバージョンがAMIでのバージョンと異なる原因</title>
      <link>https://www.sambaiz.net/article/106/</link>
      <pubDate>Sun, 04 Jun 2017 23:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/106/</guid>
      <description>&lt;h2 id=&#34;user-dataとは&#34;&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/user-data.html&#34;&gt;User-Dataとは&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;EC2インスタンス起動時に、シェルスクリプトを走らせたりcloud-initディレクティブを適用できる機能。&#xA;コンソールではインスタンスの詳細の設定の、高度な詳細のところから設定できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.jsでの文字コードの変換</title>
      <link>https://www.sambaiz.net/article/89/</link>
      <pubDate>Tue, 28 Mar 2017 21:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/89/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/bnoordhuis/node-iconv&#34;&gt;node-iconv&lt;/a&gt;を使う。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install iconv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SHIFT_JISからUTF-8への変換はこんな感じ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Iconv  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;iconv&amp;#39;&lt;/span&gt;).Iconv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; before &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Buffer([&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x8b&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0x8d&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x8e&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0x4d&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x26&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x82&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0xb2&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x94&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0xd1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; iconv &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Iconv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SHIFT_JIS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`before: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;before.toString(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;before.toString()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; after &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; iconv.convert(before);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`after:  &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;after.toString(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;after.toString()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;before: 8b8d8e4d2682b294d1 ���M&amp;amp;����&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;after:  e7899be79abf26e38194e9a3af 牛皿&amp;amp;ご飯&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文字コードによっては変換後に表せないことがある。&#xA;例えば、UTF-8からSHIFT_JISへの変換でサロゲートペア🍚を渡すと変換できず、エラーになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FluentdとKPL(Kinesis Producer Library)でログをまとめてスループットを稼ぐ</title>
      <link>https://www.sambaiz.net/article/84/</link>
      <pubDate>Wed, 15 Mar 2017 23:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/84/</guid>
      <description>&lt;h2 id=&#34;kplkinesis-producer-libraryとは&#34;&gt;KPL(Kinesis Producer Library)とは&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/streams/latest/dev/developing-producers-with-kpl.html&#34;&gt;Developing Amazon Kinesis Streams Producers Using the Amazon Kinesis Producer Library - Amazon Kinesis Streams&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kinesisに送るとき、自動リトライしてくれたり、レコードをまとめてスループットを向上してくれたりするアプリケーション。Protobufを使っている。&#xA;普通に送るとどんなに小さくてもシャード*1000レコード/秒しか最大でPUTできないのを、KPLを使ってまとめることで増やすことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdでKinesis Streamsに送ってLambdaで読んでS3に保存する</title>
      <link>https://www.sambaiz.net/article/73/</link>
      <pubDate>Sun, 26 Feb 2017 18:56:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/73/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis&#34;&gt;aws-fluent-plugin-kinesis&lt;/a&gt;でKinesis Streamsに送り、Lambdaで読んでS3に保存する。&#xA;要するにFirehoseのようなことをやりたいのだけれどTokyoリージョンにまだ来ないので自分でやる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWSのAssumeRole</title>
      <link>https://www.sambaiz.net/article/72/</link>
      <pubDate>Sat, 25 Feb 2017 20:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/72/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html&#34;&gt;AWS Security Token Service&lt;/a&gt;による、&#xA;RoleArn(&lt;code&gt;arn:aws:iam::&amp;lt;account id&amp;gt;:role/&amp;lt;role name&amp;gt;&lt;/code&gt;)から一時的なCredentialを取得する仕組み。&#xA;前もって発行したAPIキーとは違い、有効期限が存在するため続けて呼ぶ場合は失効する前に再発行する必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ELBのスケーリングとsurge queue</title>
      <link>https://www.sambaiz.net/article/68/</link>
      <pubDate>Tue, 21 Feb 2017 19:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/68/</guid>
      <description>&lt;p&gt;バックエンドだけではなくELB自体もスケーリングし、内部node数はdigで調べることができる。&#xA;このnode数は自分ではコントロールできず、基本的に意識することはない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kinesis Streams/Firehose/Analyticsを試す</title>
      <link>https://www.sambaiz.net/article/67/</link>
      <pubDate>Mon, 20 Feb 2017 21:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/67/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/kinesis/&#34;&gt;https://aws.amazon.com/jp/kinesis/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;リアルタイムのストリーミングデータを扱うサービス群。&#xA;いまのところTokyoリージョンではKinesis Streamsしか使えない。&lt;/p&gt;&#xA;&lt;h3 id=&#34;kinesis-firehose&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/jp/kinesis/firehose/&#34;&gt;Kinesis Firehose&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;AWSのデータストアに送るストリーム。自分でデータを読む処理を書かなくてよく、スケーリングも勝手にやってくれるので簡単に使える。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでDynamoDBを使う</title>
      <link>https://www.sambaiz.net/article/63/</link>
      <pubDate>Sun, 12 Feb 2017 23:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/63/</guid>
      <description>&lt;h2 id=&#34;テーブルを作成する&#34;&gt;テーブルを作成する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;プライマリキー&#34;&gt;プライマリキー&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/GuidelinesForTables.html&#34;&gt;テーブルの操作のガイドライン - Amazon DynamoDB&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;プライマリキーとしてパーティションキー(ハッシュキー)とオプションのソートキー(レンジキー)を設定する。&#xA;DynamoDBはこのパーティションキーに基づいて、複数のパーティションに分散して保存する。&#xA;テーブルにプロビジョニングされたスループット性能はパーティション間で均等に使われるので、&#xA;ソートキーを設定する場合にこれを最大限に活用するためには、&#xA;あるパーティションにリクエストが集中しないよう、パーティションキーに特定の値ばかり集中しないようなフィールドを&#xA;選ぶ必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EC2のインスタンスストア</title>
      <link>https://www.sambaiz.net/article/58/</link>
      <pubDate>Mon, 06 Feb 2017 21:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/58/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/InstanceStorage.html&#34;&gt;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/InstanceStorage.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;EC2ではインスタンスタイプによってはEBSに加えてインスタンスストアが使える。しかも追加料金なし。&#xA;対象はストレージが&amp;quot;EBSのみ&amp;quot;でないもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>複数EC2インスタンスを立ち上げてvegetaで負荷試験する</title>
      <link>https://www.sambaiz.net/article/43/</link>
      <pubDate>Sun, 18 Dec 2016 20:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/43/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/tsenart/vegeta&#34;&gt;vegeta&lt;/a&gt;で負荷をかける。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インスタンスを立ち上げるスクリプト&#34;&gt;インスタンスを立ち上げるスクリプト&lt;/h2&gt;&#xA;&lt;p&gt;コードはここ。 &lt;a href=&#34;https://github.com/sambaiz/loadtest&#34;&gt;sambaiz/loadtest&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まずキーペアを作成し、EC2インスタンスを立ち上げて、全てのインスタンスが使えるようになるまで待つ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 create-key-pair --key-name LoadTestKeyPare --query &amp;#39;KeyMaterial&amp;#39; --output text &amp;gt; LoadTestKeyPare.pem&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod 400 LoadTestKeyPare.pem&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 run-instances --image-id $AMI_ID --count $INSTANCE_NUM --instance-type t2.micro --key-name LoadTestKeyPare --security-group-ids $SECURITY_GROUP_IDS --subnet-id $SUBNET_ID&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 wait instance-status-ok --instance-ids $INSTANCE_IDS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このAMIは事前にPackerでつくったもの。vegetaをインストールしてファイルディスクリプタの上限を増やしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PackerでAMIを作る</title>
      <link>https://www.sambaiz.net/article/24/</link>
      <pubDate>Tue, 18 Oct 2016 22:37:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/24/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.packer.io/&#34;&gt;https://www.packer.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;いろんなプラットフォームのイメージを作ることができるツール。&#xA;これでfluentdのログサーバーのAMIを作る。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install packer # mac&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ packer -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0.10.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;設定ファイルはこんな感じ。&lt;code&gt;variables&lt;/code&gt;の値は&lt;code&gt;{{user ... }}&lt;/code&gt;のところで使われる。&#xA;&lt;code&gt;builders&lt;/code&gt;に作るイメージの情報を書いて、&lt;code&gt;provisioners&lt;/code&gt;で環境を作る。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
