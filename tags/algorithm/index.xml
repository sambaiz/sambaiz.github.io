<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/algorithm/</link>
    <description>Recent content in algorithm on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 29 May 2022 19:18:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Segment TreeとBineary Indexed Tree (BIT)で部分和を求める</title>
      <link>https://www.sambaiz.net/article/406/</link>
      <pubDate>Sun, 29 May 2022 19:18:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/406/</guid>
      <description>Segment Tree 配列の各区間での計算結果をノードに持つことで任意の区間での計算をO(log n)で行えるようにした完全二分木。 以下の例では和を持っているが最小値にすればRange Minimum Query (RMQ)を解くことができる。値を更新する際は下から順に再計算していく。
 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; template &amp;lt;typename S, typename T&amp;gt; class SegmentTree { T default_value; int leaf_num = 1; vector&amp;lt;S&amp;gt; nodes; /* [0] / \ [1] [2] / \ / \ [3][4][5][6] */ function&amp;lt;int(int, int)&amp;gt; calc; public: SegmentTree(vector&amp;lt;S&amp;gt; data, T default_value, function&amp;lt;T(S, S)&amp;gt; calc) { while (leaf_num &amp;lt; data.size()) leaf_num *= 2; this-&amp;gt;calc = calc; this-&amp;gt;default_value = default_value; nodes = vector&amp;lt;S&amp;gt;(2 * data.</description>
    </item>
    
    <item>
      <title>Union-Find木で無向グラフに閉路があるかを判定する</title>
      <link>https://www.sambaiz.net/article/390/</link>
      <pubDate>Sun, 12 Dec 2021 16:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/390/</guid>
      <description>Union-Find木 Union-Find木はいくつかの素集合の木を持つデータ構造で、 2つの集合を結合するUnionと、要素の含まれる集合を特定し2つの要素が同じ集合に含まれるかを判定できるFindを、 ならし計算量 O(α(n)) (α(n)はアッカーマン間数A(n,n)の逆関数でlog(n)よりも小さい)で行うことができる。
Unionはなるべく木が平衡になるようrankが小さい方の木が下に来るように辺を張る。1要素の木のrankは0で、同じrankの木を結合すると上にした木のrankが1増える。 Findは根の値を比較した後、辿ったノードから根へ辺を張り直して次回以降の処理を効率的に行えるようにする。
 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; class union_find_tree { unordered_map&amp;lt;int, int&amp;gt; parent; unordered_map&amp;lt;int, int&amp;gt; rank; public: union_find_tree(vector&amp;lt;int&amp;gt; values) { for(int i = 0; i &amp;lt; values.size(); i++) { parent[values[i]] = values[i]; rank[values[i]] = 0; } } int find(int x) { if (parent[x] == x) return x; int root = find(parent[x]); parent[x] = root; return root; } void unite(int x, int y) { x = find(x); y = find(y); if (x == y) return; if (rank[x] &amp;gt; rank[y]) { parent[y] = x; } else { parent[x] = y; if (rank[x] == rank[y]) rank[y]++; } } bool same(int x, int y) { return find(x) == find(y); } }; int main() { auto tree = new union_find_tree({1,2,3,4,5,6}); tree-&amp;gt;unite(2, 3); tree-&amp;gt;unite(1, 2); tree-&amp;gt;unite(4, 5); tree-&amp;gt;unite(5, 6); cout &amp;lt;&amp;lt; tree-&amp;gt;same(2, 5) &amp;lt;&amp;lt; endl; // 0  tree-&amp;gt;unite(2, 5); cout &amp;lt;&amp;lt; tree-&amp;gt;same(2, 5) &amp;lt;&amp;lt; endl; // 1 } Union-Find木による無向グラフの閉路の判定 無向グラフの辺をUnion-Find木に入れると、すでに到達可能なノードは同じ集合に属することになるので、 辺を張った時に閉路ができるかを判定できる。</description>
    </item>
    
    <item>
      <title>ラビン-カープアルゴリズムをC&#43;&#43;で実装する</title>
      <link>https://www.sambaiz.net/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/387/</guid>
      <description>ラビン-カープアルゴリズムはローリングハッシュを用いて部分文字列を探索するアルゴリズム。 ローリングハッシュは前のハッシュから先頭の要素を取り除き、次の要素を追加することによってO(1)で次のハッシュが得られる。 これを満たせるハッシュ関数としては様々なものが考えられるが、例えば文字コードを単に足し合わせる場合、同じ文字が含まれているだけでハッシュが衝突してしまうので、通常は次のように文字列を数値化したものが用いられる。剰余を取れば長い文字列でもオーバーフローを回避できる。
剰余を取った値の四則演算 - sambaiz-net
#include&amp;lt;bits/stdc++.h&amp;gt;using namespace std; class rolling_hash { const int base = 256; const int mod = pow(10, 9) + 7; // prime modulus  string str; int window_length; long tail_p; // = pow(base,window_length)  long current_hash = 0; int head_idx = 0; public: rolling_hash(string str, int window_length) { this-&amp;gt;str = str; this-&amp;gt;window_length = window_length; long p = 1; for (int i = window_length - 1; i&amp;gt;= 0; i--) { current_hash = (current_hash + ((str[i] * p) % mod)) % mod; if (i !</description>
    </item>
    
    <item>
      <title>Adaptive Replacement Cache (ARC) とは</title>
      <link>https://www.sambaiz.net/article/383/</link>
      <pubDate>Thu, 07 Oct 2021 03:14:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/383/</guid>
      <description>Adaptive Replacement Cache (ARC) は4つのLRU Cacheを用いることでチューニングを自動で行いヒット率を向上させたメモリのページ置換のアルゴリズム。 PostgreSQLでバッファ管理のため一時期用いられていたが、IBMの特許を回避するため今は使われていない。
ARC: A SELF-TUNING, LOW OVERHEAD REPLACEMENT CACHE, Nimrod Megiddo and Dharmendra S. Modha
それぞれ次のデータを保持する。
 T1: 最近アクセスしたもの T2: 2回以上参照したもの B1: T1から追い出されたもののキー B2: T2から追い出されたもののキー  次の図では中央が各LRU Cacheの先頭で、!がT1の先頭、^がT1のサイズを表す。 新規データは!の左に格納され、既にT1またはB1に存在するデータは!の右に格納される。
...(B1)...[...(T1)...!...^...(T2)...]...(B2)... ghost listと呼ばれるB1とB2によってrecencyとfrequencyに応じたリソースの調整が自動で行われる。 B1でヒットした場合^を右に動かしてT1のサイズを増やし、T2の末尾のデータはB2に追い出される。 B2でヒットした場合^を左に動かしてT2のサイズを増やし、T1の末尾のデータはB1に追い出される。 いずれもヒットしなかった場合は!を^に近づける。
...(B1)...[...(T1)..!...→^.(T2)...]...(B2)... ...(B1)...[...(T1)..!..^←..(T2)...]...(B2)... ...(B1)...[...(T1)..→!..^..(T2)...]...(B2)... 参考 Adaptive replacement cache - Wikipedia
IBM patent sparks open source code rewrite | ZDNet</description>
    </item>
    
    <item>
      <title>偽陽性を許容して空間効率良くキーの存在を確認するBloom filterとCuckoo filter</title>
      <link>https://www.sambaiz.net/article/326/</link>
      <pubDate>Wed, 17 Feb 2021 02:53:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/326/</guid>
      <description>例えばデータストアへのアクセス抑制のためにキーの存在を確認する際、 全てのキーを保持して探索すれば100%正しく判定できるが、キーが長く数が膨大になるとメモリの使用量が問題になることがある。 もし偽陽性が許容できるなら、次のフィルタを使うことで空間効率良くキーの存在を確認できる。
Bloom filter 1970年に考案されたフィルタで、 LevelDBやCassandraで使われている。
GoogleのkvsライブラリLevelDBを使う - sambaiz-net
初期値0のビット配列と、そのいずれかのビットにデータをマッピングするk個のハッシュ関数を定義し、 含めるデータを各ハッシュ関数に通して、マッピングされたビットを1に更新していく。 これにより、いずれかのハッシュ関数によって0のビットにマッピングされるデータは、必ずフィルタに含まれないことが分かる。 また、ビット配列のANDを取れば和集合のフィルタになる。
データの追加と存在の確認を、いずれも要素数に依存しないO(k)で行うことができるが、削除はできない。 0/1ではなくインクリメントしていくCounting filterという実装にすると空間効率は劣るが、デクリメントすることで削除できるようになる。
偽陽性率はビット配列長を大きくすると低くなり、データの数が増えると高くなる。 kはビット配列の情報量を最大化させる、つまり半分のビットが1になるように最適化する。
自己情報量、エントロピー、KL情報量、交差エントロピーと尤度関数 - sambaiz-net
Goのwillf/bloomで作成したBloom filterにデータを追加し存在を確認しているのが次のコード。 ハッシュ関数にはpybloomfiltermmap3などと同じくMurmurHash3が用いられている。
package main import ( &amp;#34;encoding/binary&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;github.com/willf/bitset&amp;#34; &amp;#34;github.com/willf/bloom&amp;#34; ) func bits(filter *bloom.BloomFilter) []uint64 { r, w := io.Pipe() ret := []uint64{} wg := &amp;amp;sync.WaitGroup{} wg.Add(1) go func() { var m, k uint64 if err := binary.Read(r, binary.BigEndian, &amp;amp;m); err != nil { panic(err) } if err := binary.</description>
    </item>
    
    <item>
      <title>剰余を取った値の四則演算</title>
      <link>https://www.sambaiz.net/article/321/</link>
      <pubDate>Sat, 16 Jan 2021 18:03:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/321/</guid>
      <description>競プロの64bit整数でもオーバーフローする大きな値が出てくる問題では、言語による差が出ないよう \(10^9+7\) といった数で割ったときの余りが要求される。
四則演算の内、割り算以外は各項の剰余を取ってから計算してもその剰余の値は変わらないので、都度剰余を取ってオーバーフローを回避できる。
#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int mod(int a, int n) { int x = a % n; if (x &amp;gt;= 0) { return x; } else { return n + x; } } int main() { int X = 7; int Y = 9; int Z = 5; // (AZ + B) + (CZ + D) = (A+C)Z + (B+D) ≡ B+D (mod Z)  cout &amp;lt;&amp;lt; mod(X + Y, Z) &amp;lt;&amp;lt; endl; // 1  cout &amp;lt;&amp;lt; mod(X, Z) + mod(Y, Z) &amp;lt;&amp;lt; endl; // 6  cout &amp;lt;&amp;lt; mod(mod(X, Z) + mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 1  // (AZ + B) - (CZ + D) = (A-C)Z + (B-D) ≡ B-D (mod Z)  cout &amp;lt;&amp;lt; mod(X - Y, Z) &amp;lt;&amp;lt; endl; // 3  cout &amp;lt;&amp;lt; mod(X, Z) - mod(Y, Z) &amp;lt;&amp;lt; endl; // -1  cout &amp;lt;&amp;lt; mod(mod(X, Z) - mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 3  // (AZ + B) * (CZ + D) = (ACZ+AD+BC)Z + (BD) ≡ BD (mod Z)  cout &amp;lt;&amp;lt; mod(X * Y, Z) &amp;lt;&amp;lt; endl; // 2  cout &amp;lt;&amp;lt; mod(X, Z) + mod(Y, Z) &amp;lt;&amp;lt; endl; // 6  cout &amp;lt;&amp;lt; mod(mod(X, Z) * mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 3  return 0; } 割り算は \(b^{-1}b \equiv 1 \mod n\) となるようなモジュラ逆数\(b^{-1}\)があれば、\(\frac{a}{b} \equiv (a \mod n)(b^{-1} \mod n) \mod n\)が成り立つ。bとnが互いに素(\(gcd(b,n)=1\))であることが必要十分条件で、\(bx - ny = gcd(b, n) = 1\)の\(x\)を拡張されたユークリッドの互除法で求める。</description>
    </item>
    
    <item>
      <title>個数制限がある場合の重複組合せの総数を動的計画法で求める</title>
      <link>https://www.sambaiz.net/article/306/</link>
      <pubDate>Mon, 02 Nov 2020 15:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/306/</guid>
      <description>個数制限がない場合 n種から制限なく重複を許してr個選ぶ組合せの総数nHrはn+r-1個の枠に入れるn-1個の種類を分ける区切りの場所の組合わせの総数と等しいので、 (n+r-1)C(n-1) = (n+r-1)Crで求められる。
int factorial(int n) { int x = 1; for (int i = n; i &amp;gt; 0; i--) { x *= i; } return x; } int H(int n, int r) { // (n+r-1)Cr  return factorial(n + r - 1) / (factorial(r) * factorial(n - 1)); } 個数制限がある場合 nHrは
 n種類目が少なくとも1つ選ばれる場合： nH(r-1) (それぞれの組み合わせにn種類目が1つ加わる) n種類目が1つも選ばれない場合: (n-1)Hr (残りのn-1種類からr個選ぶ)  の和として表すこともでき、 漸化式　H(n, r) = H(n, r-1) + H(n-1, r) が成り立つ。</description>
    </item>
    
    <item>
      <title>ベルマンフォード法とダイクストラ法とワーシャルフロイド法で最短経路問題を解く</title>
      <link>https://www.sambaiz.net/article/267/</link>
      <pubDate>Wed, 01 Apr 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/267/</guid>
      <description>ベルマンフォード法とダイクストラ法ワーシャルフロイド法で最短経路問題を解く。
ベルマンフォード法 始点の距離が0、それ以外の頂点の距離が無限大な初期状態から、 全辺を見て各辺を通るとしたときに現在の距離を下回るなら更新する、というのを繰り返すアルゴリズム。 辺の重みは負でも問題ないが、総和が負の値になる閉路が存在する場合、そこで無限ループしてしまうので決まらない。 その場合を除けば、頂点の数を|V|、辺の数を|E|とすると、繰り返しは|V|-1回で終わり、計算量はO(|V||E|)になる。
ダイクストラ法 同じく始点の距離が0、それ以外の頂点の距離が無限大な初期状態から、 まだ選ばれていない頂点の中から最小の距離のものを1つ選んでその最短距離を確定させ、そこから伸びている辺を見て更新していく、というのを繰り返す。 ベルマンフォード法が全ての頂点から同時に探索するのに対してこちらは始点から着実に進んでいくイメージ。 頂点を選ぶ/取り除くのにO(log|V|)かかる二分ヒープのpriority queueで実装すると計算量はO((|E|+|V|)log|V|)となる。 ベルマンフォード法より高速だが、負の重みがあると選んだ頂点の現在の距離が最短であることが確定しないので適用できない。
ワーシャルフロイド法 2点間ではなく全ての頂点間の最短経路を求めるアルゴリズム。 i→j間の最短経路上に頂点kがあると仮定した場合その経路はi→kの最短経路とk→jの最短経路を繋げたものになることを利用し、 ある2点間の最短経路上に各頂点があるとした場合を総当たりする。 計算量はO(|V|^3)とかなり遅いが次のように単純な3重ループで実装できる。
for (int k = 0; k &amp;lt; n; k++) for (int i = 0; i &amp;lt; n; i++) for (int j = 0; j &amp;lt; n; j++) costs[i][j] = min(cost[i][j], cost[i][k] + cost[k][j]); Cheapest Flights Within K Stops - LeetCode 乗継K回以内のフライトの最安値を返す問題。
There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.</description>
    </item>
    
    <item>
      <title>貪欲法(Greedy algorithm)で問題を解く</title>
      <link>https://www.sambaiz.net/article/255/</link>
      <pubDate>Mon, 13 Jan 2020 21:17:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/255/</guid>
      <description>貪欲法(Greedy algorithm)は問題を分割し、それぞれにおいて貪欲に最適な選択をしていくアルゴリズムの総称。 必ずしも最適解になるとは限らないが、うまくいけば簡潔に計算量を減らすことができる。
Best Time to Buy and Sell Stock II - LeetCode 配列で株価が与えられ、売買して得られる最大の利益を返す問題。
Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>動的計画法(DP)で計算結果を再利用して計算量を減らす</title>
      <link>https://www.sambaiz.net/article/251/</link>
      <pubDate>Mon, 30 Dec 2019 19:28:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/251/</guid>
      <description>動的計画法(DP, Dynamic Programming)は、 例えばフィボナッチ数列の項f(x)を記録しておいたf(x-1)とf(x-2)から計算するように、 計算結果を記録し帰納的に求められるより大きな計算で利用するアルゴリズムの総称。
いくつか問題を解いてみる。
Longest Common Subsequence 最長共通部分列問題。
Given two strings text1 and text2, return the length of their longest common subsequence. Example 1: Input: text1 = &amp;#34;abcde&amp;#34;, text2 = &amp;#34;ace&amp;#34; Output: 3 Explanation: The longest common subsequence is &amp;#34;ace&amp;#34; and its length is 3. 単純に毎回一から探索するとO(n^3)になるが、text1のi番目までとtext2のj番目までの共通部分列の長さをDP[i-1][j-1]に記録しておくと、 ヒントにあるように、それぞれの文字列に1文字足したときに それが同じ文字ならその分伸ばした DP[i - 1][j - 1] + 1 となり 違う文字ならそのまま max(DP[i - 1][j], DP[i][j - 1]) となる ことに気付けると毎回探索しなくてよくなりO(n^2)にできる。
class Solution { public: int longestCommonSubsequence(string text1, string text2) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; DP(text1.</description>
    </item>
    
    <item>
      <title>単調性のある式の解を二分法で数値的に求める</title>
      <link>https://www.sambaiz.net/article/246/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/246/</guid>
      <description>AtCoder Beginner Contest 144の D - Water Bottleをやってみた。
高橋君は、底面が1辺 a cm の正方形であり、高さが b cm であるような直方体型の水筒を持っています。(水筒の厚みは無視できます。) この水筒の中に体積 x cm^3 の水を入れ、底面の正方形の1辺を軸として、この水筒を徐々に傾けます。 水を溢れさせずに水筒を傾けることができる最大の角度を求めてください。 水を溢れさせずに水筒を傾けることができる最大の角度を度数法で出力せよ。 出力は、ジャッジの出力との絶対誤差または相対誤差が10^6以下のとき正解と判定される。 水が溢れるパターンは次の2通りあって、水が入っている、または入ってない部分の三角柱を除いた部分の体積がxになるようなθをatanで出せる。
解説を見ると、これに加えて二分法を使って数値的に求める解法も紹介されていた。 二分法というのは解が含まれる区間の中間での値を求め、その値が解より小さいか大きいかによって二分したどちらかの区間を選ぶ操作を繰り返すことで区間の幅を狭めて解を求めるアルゴリズム。収束条件として式に単調性がある必要があるが、θに対してこぼれる限界の水の体積の式は単調減少するので用いることができる。 解説にもコードが付いていたがまずは見ずに書いてみた。
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cmath&amp;gt;#include &amp;lt;iomanip&amp;gt;using namespace std; double waterVolume(int a, int b, double rad) { if (rad &amp;lt; atan(1.0 * b / a)) { return a * a * b - (a * (a * tan(rad)) / 2 * a); } else { return b * (b * tan(M_PI / 2 - rad)) / 2 * a; } } int main() { double a, b, x; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; x; double min = 0, max = M_PI / 2; while (true) { double m = (min + max) / 2; double vol = waterVolume(a, b, m); if (abs(vol - x) &amp;lt; pow(10, -6)) { cout &amp;lt;&amp;lt; setprecision(8) &amp;lt;&amp;lt; m / M_PI * 180 &amp;lt;&amp;lt; endl; return 0; } else if (vol &amp;gt; x) { min = m; } else { max = m; } } } 解説のコードでは、パターンの判定でa * tan(theta) &amp;lt;= bを使っているのと、有限回のループでxを上回らない最大のθを探すようになっていた。</description>
    </item>
    
  </channel>
</rss>
