<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/algorithm/</link>
    <description>Recent content in Algorithm on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Mon, 11 Mar 2024 23:55:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分散KVS etcdの CAP/PACELC 定理における立ち位置と合意アルゴリズムRaft</title>
      <link>https://www.sambaiz.net/article/473/</link>
      <pubDate>Mon, 11 Mar 2024 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/473/</guid>
      <description>&lt;p&gt;etcd は Kubernetes でも使われている分散KVS。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/356/&#34;&gt;Raspberry PiでおうちKubernetesクラスタを構築する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kubernetes のドキュメントには etcd is a consistent and highly-available key value store と&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/&#34;&gt;書いてあり&lt;/a&gt;、であれば CAP 定理の P (Partition tolerance) を妥協しているのかと考えてしまうが、分散システムのネットワークが分断された場合 CA を維持するのは難しい気がする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>平衡二分探索木 AVL木 を Go で実装して高さが最小限に保たれることを確認する</title>
      <link>https://www.sambaiz.net/article/439/</link>
      <pubDate>Sat, 25 Feb 2023 00:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/439/</guid>
      <description>&lt;p&gt;AVL木は二分探索木の一種である平衡二分探索木の一つで、高さを最小限に保つことで操作の計算量を抑えることができる。&#xA;変更があるたびに左右の部分木のバランスを見て高さに2以上の差がある場合、回転してリバランスする。&#xA;他の平衡二分探索木としては赤黒木などがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hadoop YARN でリソースの割り当てを行う Scheduler と Dominant Resource Fairness (DRF)</title>
      <link>https://www.sambaiz.net/article/433/</link>
      <pubDate>Sat, 24 Dec 2022 22:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/433/</guid>
      <description>&lt;p&gt;YARN の ResourceManager はクライアントからアプリケーションを受け取って ApplicationMaster を立ち上げる ApplicationsManager と、&#xA;ApplicationMaster からリクエストを受けリソースの割り当てを行う &lt;a href=&#34;https://github.com/apache/hadoop/blob/release-3.3.5-RC0/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/YarnScheduler.java&#34;&gt;Scheduler&lt;/a&gt; から構成される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>最大フロー問題と最小カット問題とFord-Fulkersonのアルゴリズム</title>
      <link>https://www.sambaiz.net/article/407/</link>
      <pubDate>Sun, 05 Jun 2022 18:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/407/</guid>
      <description>&lt;h2 id=&#34;最大フロー問題&#34;&gt;最大フロー問題&lt;/h2&gt;&#xA;&lt;p&gt;最大フロー問題は容量を持つパスで構成されるネットワークでのソースからシンクまでのフローを最大化する問題。&#xA;各パスを流れるフローがその容量を超えず各ノードに入る量と出る量が乖離しないようにソースからシンクまで全量を送る必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Segment TreeとBineary Indexed Tree (BIT)で部分和を求める</title>
      <link>https://www.sambaiz.net/article/406/</link>
      <pubDate>Sun, 29 May 2022 19:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/406/</guid>
      <description>&lt;h2 id=&#34;segment-tree&#34;&gt;Segment Tree&lt;/h2&gt;&#xA;&lt;p&gt;配列の各区間での計算結果をノードに持つことで任意の区間での計算をO(log n)で行えるようにした完全二分木。&#xA;以下の例では和を持っているが最小値にすれば&lt;a href=&#34;https://en.wikipedia.org/wiki/Range_minimum_query&#34;&gt;Range Minimum Query (RMQ)&lt;/a&gt;を解くことができ、ソートした列を持てばマージソートになる。値を更新する際は下から順に再計算していく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Union-Find木で無向グラフに閉路があるかを判定する</title>
      <link>https://www.sambaiz.net/article/390/</link>
      <pubDate>Sun, 12 Dec 2021 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/390/</guid>
      <description>&lt;h2 id=&#34;union-find木&#34;&gt;Union-Find木&lt;/h2&gt;&#xA;&lt;p&gt;Union-Find木はいくつかの素集合の木を持つデータ構造で、&#xA;2つの集合を結合するUnionと、要素の含まれる集合を特定し2つの要素が同じ集合に含まれるかを判定できるFindを、&#xA;ならし計算量 O(α(n)) (α(n) は&lt;a href=&#34;https://en.wikipedia.org/wiki/Ackermann_function&#34;&gt;アッカーマン間数&lt;/a&gt; A(n,n) の逆関数で log(n) よりも小さい)で行うことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ラビン-カープアルゴリズムをC&#43;&#43;で実装する</title>
      <link>https://www.sambaiz.net/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/387/</guid>
      <description>&lt;p&gt;ラビン-カープアルゴリズムはローリングハッシュを用いて部分文字列を探索するアルゴリズム。&#xA;ローリングハッシュは前のハッシュから先頭の要素を取り除き、次の要素を追加することによって&lt;code&gt;O(1)&lt;/code&gt;で次のハッシュが得られる。&#xA;これを満たせるハッシュ関数としては様々なものが考えられるが、例えば文字コードを単に足し合わせる場合、同じ文字が含まれているだけでハッシュが衝突してしまうので、通常は次のように文字列を数値化したものが用いられる。剰余を取れば長い文字列でもオーバーフローを回避できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adaptive Replacement Cache (ARC) とは</title>
      <link>https://www.sambaiz.net/article/383/</link>
      <pubDate>Thu, 07 Oct 2021 03:14:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/383/</guid>
      <description>&lt;p&gt;Adaptive Replacement Cache (ARC) は4つのLRU Cacheを用いることでチューニングを自動で行いヒット率を向上させたメモリのページ置換のアルゴリズム。&#xA;PostgreSQLでバッファ管理のため一時期用いられていたが、IBMの特許を回避するため今は使われていない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>偽陽性を許容して空間効率良くキーの存在を確認するBloom filterとCuckoo filter</title>
      <link>https://www.sambaiz.net/article/326/</link>
      <pubDate>Wed, 17 Feb 2021 02:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/326/</guid>
      <description>&lt;p&gt;例えばデータストアへのアクセス抑制のためにキーの存在を確認する際、&#xA;全てのキーを保持して探索すれば100%正しく判定できるが、キーが長く数が膨大になるとメモリの使用量が問題になることがある。&#xA;もし偽陽性が許容できるなら、次のフィルタを使うことで空間効率良くキーの存在を確認できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>剰余を取った値の四則演算</title>
      <link>https://www.sambaiz.net/article/321/</link>
      <pubDate>Sat, 16 Jan 2021 18:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/321/</guid>
      <description>&lt;p&gt;競プロの64bit整数でもオーバーフローする大きな値が出てくる問題では、言語による差が出ないよう \(10^9+7\) といった数で割ったときの余りが要求される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>個数制限がある場合の重複組合せの総数を動的計画法で求める</title>
      <link>https://www.sambaiz.net/article/306/</link>
      <pubDate>Mon, 02 Nov 2020 15:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/306/</guid>
      <description>&lt;h2 id=&#34;個数制限がない場合&#34;&gt;個数制限がない場合&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt;種から制限なく重複を許して&lt;code&gt;r&lt;/code&gt;個選ぶ組合せの総数&lt;code&gt;nHr&lt;/code&gt;は&lt;code&gt;n+r-1&lt;/code&gt;個の枠に入れる&lt;code&gt;n-1&lt;/code&gt;個の種類を分ける区切りの場所の組合わせの総数と等しいので、&#xA;&lt;code&gt;(n+r-1)C(n-1) = (n+r-1)Cr&lt;/code&gt;で求められる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ベルマンフォード法とダイクストラ法とワーシャルフロイド法で最短経路問題を解く</title>
      <link>https://www.sambaiz.net/article/267/</link>
      <pubDate>Wed, 01 Apr 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/267/</guid>
      <description>&lt;p&gt;ベルマンフォード法とダイクストラ法ワーシャルフロイド法で最短経路問題を解く。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ベルマンフォード法&#34;&gt;ベルマンフォード法&lt;/h2&gt;&#xA;&lt;p&gt;始点の距離が0、それ以外の頂点の距離が無限大な初期状態から、&#xA;全辺を見て各辺を通るとしたときに現在の距離を下回るなら更新する、というのを繰り返すアルゴリズム。&#xA;辺の重みは負でも問題ないが、総和が負の値になる閉路が存在する場合、そこで無限ループしてしまうので決まらない。&#xA;その場合を除けば、頂点の数を&lt;code&gt;|V|&lt;/code&gt;、辺の数を&lt;code&gt;|E|&lt;/code&gt;とすると、繰り返しは&lt;code&gt;|V|-1&lt;/code&gt;回で終わり、計算量は&lt;code&gt;O(|V||E|)&lt;/code&gt;になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>貪欲法(Greedy algorithm)で問題を解く</title>
      <link>https://www.sambaiz.net/article/255/</link>
      <pubDate>Mon, 13 Jan 2020 21:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/255/</guid>
      <description>&lt;p&gt;貪欲法(Greedy algorithm)は問題を分割し、それぞれにおいて貪欲に最適な選択をしていくアルゴリズムの総称。&#xA;必ずしも最適解になるとは限らないが、うまくいけば簡潔に計算量を減らすことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>動的計画法(DP)で計算結果を再利用して計算量を減らす</title>
      <link>https://www.sambaiz.net/article/251/</link>
      <pubDate>Mon, 30 Dec 2019 19:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/251/</guid>
      <description>&lt;p&gt;動的計画法(DP, Dynamic Programming)は、&#xA;例えばフィボナッチ数列の項&lt;code&gt;f(x)&lt;/code&gt;を記録しておいた&lt;code&gt;f(x-1)&lt;/code&gt;と&lt;code&gt;f(x-2)&lt;/code&gt;から計算するように、&#xA;計算結果を記録し帰納的に求められるより大きな計算で利用するアルゴリズムの総称。&lt;/p&gt;</description>
    </item>
    <item>
      <title>単調性のある式の解を二分法で数値的に求める</title>
      <link>https://www.sambaiz.net/article/246/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/246/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc144&#34;&gt;AtCoder Beginner Contest 144&lt;/a&gt;の&#xA;&lt;a href=&#34;https://atcoder.jp/contests/abc144/tasks/abc144_d&#34;&gt;D - Water Bottle&lt;/a&gt;をやってみた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;高橋君は、底面が1辺 a cm の正方形であり、高さが b cm であるような直方体型の水筒を持っています。(水筒の厚みは無視できます。)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;この水筒の中に体積 x cm^3 の水を入れ、底面の正方形の1辺を軸として、この水筒を徐々に傾けます。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;水を溢れさせずに水筒を傾けることができる最大の角度を求めてください。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;水を溢れさせずに水筒を傾けることができる最大の角度を度数法で出力せよ。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;出力は、ジャッジの出力との絶対誤差または相対誤差が10^6以下のとき正解と判定される。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
