<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/algorithm/</link>
    <description>Recent content in algorithm on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Wed, 17 Feb 2021 02:53:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>偽陽性を許容して空間効率良くキーの存在を確認するBloom filterとCuckoo filter</title>
      <link>https://www.sambaiz.net/article/326/</link>
      <pubDate>Wed, 17 Feb 2021 02:53:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/326/</guid>
      <description>データストアへのアクセス抑制や、ブロッキングを行うためにキーの存在を確認する際、 全てのキーを保持して探索すれば100%正しく判定できるが、キーが長く数が膨大になるとメモリの使用量が問題になることがある。 これらの例では偽陽性が許容できることが多く、次のフィルタを使うと空間効率良くキーの存在を確認できる。
Bloom filter 1970年に考案されたフィルタで、 LevelDBやCassandraで使われている。
GoogleのkvsライブラリLevelDBを使う - sambaiz-net
初期値0のビット配列と、そのいずれかのビットにデータをマッピングするk個のハッシュ関数を定義し、 含めるデータを各ハッシュ関数に通して、マッピングされたビットを1に更新していく。 これにより、いずれかのハッシュ関数によって0のビットにマッピングされるデータは、必ずフィルタに含まれないことが分かる。
データの追加と存在の確認を、いずれも要素数に依存しないO(k)で行うことができるが、削除はできない。 0/1ではなくインクリメントしていくCounting filterという実装にすると空間効率は劣るが、デクリメントすることで削除できるようになる。
偽陽性率はビット配列長を大きくすると低くなり、データの数が増えると高くなる。 kはビット配列の情報量を最大化させる、つまり半分のビットが1になるように最適化する。
自己情報量、エントロピー、KL情報量、交差エントロピーと尤度関数 - sambaiz-net
Cuckoo filter 2014年に発表されたフィルタ。
Cuckoo Filter: Practically Better Than Bloom
データを追加する際は、そのままハッシュ関数に通したi_1と、フィンガープリントfをハッシュ関数に通したものとi_1のXORであるi_2を取って、 対応するいずれかのバケットが空いていたらそこにfを入れる。 いずれも空いていなければ、そのどちらかから一つ追い出して、その値とindexのXORを取れば分かるもう片方のバケットに再度入れる。 既にそこも一杯ならそこからも追い出し、同様の処理を行う。これを追い出されなくなるまで繰り返す。 そして、もしfがいずれのバケットにも入っていない場合、キーが存在しないことが分かる。それをバケットから除けば削除される。
バケットの空きが十分ならCounting filterよりも高速にデータを追加できるが、埋まるに連れて追い出しが頻発しパフォーマンスが下がっていく。
フィンガープリントを長くすると、Bloom Filterと比較して少ない容量で偽陽性率を低くできる。
参考 確率的データ構造の比較：カッコウフィルタ対ブルームフィルタ | POSTD
ブルームフィルタ - Wikipedia</description>
    </item>
    
    <item>
      <title>剰余を取った値の四則演算</title>
      <link>https://www.sambaiz.net/article/321/</link>
      <pubDate>Sat, 16 Jan 2021 18:03:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/321/</guid>
      <description>競プロの、64bit整数でもオーバーフローする大きな値が出てくる問題では、言語による差が出ないよう、10^9+7 といった数で割ったときの余りが要求される。
四則演算の内、割り算以外は各項の剰余を取ってから計算してもその剰余の値は変わらないので、都度剰余を取ってオーバーフローを回避できる。
#include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int mod(int a, int n) { int x = a % n; if (x &amp;gt;= 0) { return x; } else { return n + x; } } int main() { int X = 7; int Y = 9; int Z = 5; // (AZ + B) + (CZ + D) = (A+C)Z + (B+D) ≡ B+D (mod Z)  cout &amp;lt;&amp;lt; mod(X + Y, Z) &amp;lt;&amp;lt; endl; // 1  cout &amp;lt;&amp;lt; mod(X, Z) + mod(Y, Z) &amp;lt;&amp;lt; endl; // 6  cout &amp;lt;&amp;lt; mod(mod(X, Z) + mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 1  // (AZ + B) - (CZ + D) = (A-C)Z + (B-D) ≡ B-D (mod Z)  cout &amp;lt;&amp;lt; mod(X - Y, Z) &amp;lt;&amp;lt; endl; // 3  cout &amp;lt;&amp;lt; mod(X, Z) - mod(Y, Z) &amp;lt;&amp;lt; endl; // -1  cout &amp;lt;&amp;lt; mod(mod(X, Z) - mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 3  // (AZ + B) * (CZ + D) = (ACZ+AD+BC)Z + (BD) ≡ BD (mod Z)  cout &amp;lt;&amp;lt; mod(X * Y, Z) &amp;lt;&amp;lt; endl; // 2  cout &amp;lt;&amp;lt; mod(X, Z) + mod(Y, Z) &amp;lt;&amp;lt; endl; // 6  cout &amp;lt;&amp;lt; mod(mod(X, Z) * mod(Y, Z), Z) &amp;lt;&amp;lt; endl; // 3  return 0; } 割り算は b^{-1}b ≡ 1 (mod n) となるようなモジュラ逆数b^{-1}があれば、a/b ≡ (a mod n)(b^{-1} mod n) (mod n)が成り立つ。bとnが互いに素(gcd(b,n)=1)であることが必要十分条件。 モジュラ逆数を計算する方法としては、mx + ny = gcd(m, n) の解 x, y が得られる、拡張されたユークリッドの互除法などがあり、これにより bx - ny = 1 のxを求める。</description>
    </item>
    
    <item>
      <title>個数制限がある場合の重複組合せの総数を動的計画法で求める</title>
      <link>https://www.sambaiz.net/article/306/</link>
      <pubDate>Mon, 02 Nov 2020 15:31:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/306/</guid>
      <description>個数制限がない場合 n種から制限なく重複を許してr個選ぶ組合せの総数nHrはn+r-1個の枠に入れるn-1個の種類を分ける区切りの場所の組合わせの総数と等しいので、 (n+r-1)C(n-1) = (n+r-1)Crで求められる。
int factorial(int n) { int x = 1; for (int i = n; i &amp;gt; 0; i--) { x *= i; } return x; } int H(int n, int r) { // (n+r-1)Cr  return factorial(n + r - 1) / (factorial(r) * factorial(n - 1)); } 個数制限がある場合 nHrは
 n種類目が少なくとも1つ選ばれる場合： nH(r-1) (それぞれの組み合わせにn種類目が1つ加わる) n種類目が1つも選ばれない場合: (n-1)Hr (残りのn-1種類からr個選ぶ)  の和として表すこともでき、 漸化式　H(n, r) = H(n, r-1) + H(n-1, r) が成り立つ。</description>
    </item>
    
    <item>
      <title>Bellman–Ford法とDijkstra法で最短経路問題を解く</title>
      <link>https://www.sambaiz.net/article/267/</link>
      <pubDate>Wed, 01 Apr 2020 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/267/</guid>
      <description>Bellman–Ford法とDijkstra法で最短経路問題を解く。
Bellman-Ford法 始点の距離が0、それ以外の頂点の距離が無限大な初期状態から、 全辺を見て各辺を通るとしたときに現在の距離を下回るなら更新する、というのを繰り返すアルゴリズム。 辺の重みは負でも問題ないが、総和が負の値になる閉路が存在する場合、そこで無限ループしてしまうので決まらない。 その場合を除けば、頂点の数を|V|、辺の数を|E|とすると、繰り返しは|V|-1回で終わり、計算量はO(|V||E|)になる。
Dijkstra法 同じく始点の距離が0、それ以外の頂点の距離が無限大な初期状態から、 まだ選ばれていない頂点の中から最小の距離のものを1つ選んでその最短距離を確定させ、そこから伸びている辺を見て更新していく、というのを繰り返す。 Bellman-Ford法が全ての頂点から同時に探索するのに対してDijkstra法は始点から着実に進んでいくイメージ。 頂点を選ぶ/取り除くのにO(log|V|)かかる二分ヒープのpriority queueで実装すると計算量はO((|E|+|V|)log|V|)となる。 Bellman-Ford法より高速だが、負の重みがあると選んだ頂点の現在の距離が最短であることが確定しないので適用できない。
Cheapest Flights Within K Stops - LeetCode 乗継K回以内のフライトの最安値を返す問題。
There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w. Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops.</description>
    </item>
    
    <item>
      <title>貪欲法(Greedy algorithm)で問題を解く</title>
      <link>https://www.sambaiz.net/article/255/</link>
      <pubDate>Mon, 13 Jan 2020 21:17:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/255/</guid>
      <description>貪欲法(Greedy algorithm)は問題を分割し、それぞれにおいて貪欲に最適な選択をしていくアルゴリズムの総称。 必ずしも最適解になるとは限らないが、うまくいけば簡潔に計算量を減らすことができる。
Best Time to Buy and Sell Stock II - LeetCode 配列で株価が与えられ、売買して得られる最大の利益を返す問題。
Say you have an array for which the ith element is the price of a given stock on day i. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</description>
    </item>
    
    <item>
      <title>動的計画法(DP)で計算結果を再利用して計算量を減らす</title>
      <link>https://www.sambaiz.net/article/251/</link>
      <pubDate>Mon, 30 Dec 2019 19:28:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/251/</guid>
      <description>動的計画法(DP, Dynamic Programming)は記録した計算結果を、帰納的に求められるより大きな計算で利用するアルゴリズムの総称。 例えば、フィボナッチ数列の項f(x)を求めるのに、f(x-1)とf(x-2)の結果を記録しておけばそれらを足すだけで済む。
いくつか問題を解いてみる。
Longest Common Subsequence 最長共通部分列問題。
Given two strings text1 and text2, return the length of their longest common subsequence. Example 1: Input: text1 = &amp;#34;abcde&amp;#34;, text2 = &amp;#34;ace&amp;#34; Output: 3 Explanation: The longest common subsequence is &amp;#34;ace&amp;#34; and its length is 3. 単純に毎回一から探索するとO(n^3)になるが、text1のi番目までとtext2のj番目までの共通部分列の長さをDP[i-1][j-1]に記録しておくと、 ヒントにあるように、それぞれの文字列に1文字足したときに それが同じ文字ならその分伸ばした DP[i - 1][j - 1] + 1 となり 違う文字ならそのまま max(DP[i - 1][j], DP[i][j - 1]) となる ことに気付けると毎回探索しなくてよくなりO(n^2)にできる。
class Solution { public: int longestCommonSubsequence(string text1, string text2) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; DP(text1.</description>
    </item>
    
    <item>
      <title>単調性のある式の解を二分法で数値的に求める</title>
      <link>https://www.sambaiz.net/article/246/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/246/</guid>
      <description>AtCoder Beginner Contest 144の D - Water Bottleをやってみた。
高橋君は、底面が1辺 a cm の正方形であり、高さが b cm であるような直方体型の水筒を持っています。(水筒の厚みは無視できます。) この水筒の中に体積 x cm^3 の水を入れ、底面の正方形の1辺を軸として、この水筒を徐々に傾けます。 水を溢れさせずに水筒を傾けることができる最大の角度を求めてください。 水を溢れさせずに水筒を傾けることができる最大の角度を度数法で出力せよ。 出力は、ジャッジの出力との絶対誤差または相対誤差が10^6以下のとき正解と判定される。 水が溢れるパターンは次の2通りあって、水が入っている、または入ってない部分の三角柱を除いた部分の体積がxになるようなθをatanで出せる。
解説を見ると、これに加えて二分法を使って数値的に求める解法も紹介されていた。 二分法というのは解が含まれる区間の中間での値を求め、その値が解より小さいか大きいかによって二分したどちらかの区間を選ぶ操作を繰り返すことで区間の幅を狭めて解を求めるアルゴリズム。収束条件として式に単調性がある必要があるが、θに対してこぼれる限界の水の体積の式は単調減少するので用いることができる。 解説にもコードが付いていたがまずは見ずに書いてみた。
#include &amp;lt;iostream&amp;gt;#include &amp;lt;cmath&amp;gt;#include &amp;lt;iomanip&amp;gt;using namespace std; double waterVolume(int a, int b, double rad) { if (rad &amp;lt; atan(1.0 * b / a)) { return a * a * b - (a * (a * tan(rad)) / 2 * a); } else { return b * (b * tan(M_PI / 2 - rad)) / 2 * a; } } int main() { double a, b, x; cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;gt;&amp;gt; x; double min = 0, max = M_PI / 2; while (true) { double m = (min + max) / 2; double vol = waterVolume(a, b, m); if (abs(vol - x) &amp;lt; pow(10, -6)) { cout &amp;lt;&amp;lt; setprecision(8) &amp;lt;&amp;lt; m / M_PI * 180 &amp;lt;&amp;lt; endl; return 0; } else if (vol &amp;gt; x) { min = m; } else { max = m; } } } 解説のコードでは、パターンの判定でa * tan(theta) &amp;lt;= bを使っているのと、有限回のループでxを上回らない最大のθを探すようになっていた。</description>
    </item>
    
  </channel>
</rss>
