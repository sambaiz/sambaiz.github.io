<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>android on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/android/</link>
    <description>Recent content in android on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 05 Dec 2021 23:55:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FlutterでiOS/Android/Webアプリをビルドする</title>
      <link>https://www.sambaiz.net/article/388/</link>
      <pubDate>Sun, 05 Dec 2021 23:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/388/</guid>
      <description>FlutterはGoogleによるクロスプラットフォームフレームワーク。 iOS/Androidに加え、今年の3月にリリースされた2.0でWebがstableになり、 Windows/Mac/Linuxはbetaとなっている。
環境構築 公式のGet startedに従って環境を構築していく。
まずFlutter SDKをインストールしてパスを通す。
$ mv ~/Downloads/flutter ~/ $ echo &amp;#39;export PATH=&amp;#34;$PATH:~/flutter/bin&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile $ source ~/.bash_profile $ flutter doctor Android Android Studioをインストールし起動して依存コンポーネントをダウンロードする。 cmdline-tools component is missing が出ている場合はSDK Managerからインストールする。
ライセンスを承認する。
$ flutter doctor --android-licenses AVD Managerからエミュレーターの設定を行う。Emulated PerformanceはHardware - GLES 2.0を選択する。
iOS Xcodeをインストールして command-line toolsの設定を行い、CocoaPodsもインストールする。
$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer $ sudo xcodebuild -runFirstLaunch $ sudo gem install cocoapods VSCode Flutter extensionをインストールし、Command PaletteからFlutter: New ProjectでApplicationを選ぶと次の構成のプロジェクトが作られる。
$ tree -L 2 .</description>
    </item>
    
    <item>
      <title>Androidのプロキシ設定をMacのCharlesに向けて通信をキャプチャする</title>
      <link>https://www.sambaiz.net/article/292/</link>
      <pubDate>Wed, 05 Aug 2020 20:28:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/292/</guid>
      <description>Mac側の設定 Charlesを入れて次の設定を行う。
 Proxy SettingsでEnable transparent HTTP proxingをオン   SSH Proxy Settingsのincludeに*:*を追加   Access Control SettingsにAndroidのローカルIPアドレスを追加  Android側の設定 同じネットワークにつないで詳細設定からMacへプロキシされるようにする。
$ ifconfig en0 ... inet 192.168.11.6 これで適当なHTTPSのページにアクセスするとSSL HandshakeのエラーがCharlesに出るので http://www.charlesproxy.com/getssl にアクセスしてCharles Proxy CAの証明書をインストールする。 証明書はプロファイルに紐づくので、個人用のプロファイルにインストールしても仕事用のプロファイルのアプリでは使われない。
Chromeからの通信はこれで見られるようになるが、 Android 7からはアプリのnetwork-security-configで信頼した 証明書しか使われないため他のアプリでは大抵Handshakeに失敗する。次のように書くとデバッグ時のみプロキシできるようになる。
&amp;lt;network-security-config&amp;gt; &amp;lt;debug-overrides&amp;gt; &amp;lt;trust-anchors&amp;gt; &amp;lt;!-- Trust user added CAs while debuggable only --&amp;gt; &amp;lt;certificates src=&amp;#34;user&amp;#34; /&amp;gt; &amp;lt;/trust-anchors&amp;gt; &amp;lt;/debug-overrides&amp;gt; &amp;lt;/network-security-config&amp;gt; </description>
    </item>
    
    <item>
      <title>AndroidのListViewで再利用されるViewのgetGlobalVisibleRect()が意図した値を返さない</title>
      <link>https://www.sambaiz.net/article/257/</link>
      <pubDate>Tue, 11 Feb 2020 01:55:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/257/</guid>
      <description>ListViewのViewの再利用 まずはListViewのViewが再利用されていることを確認する。
package com.example.listviewglobalvisiblerect import android.widget.BaseAdapter import android.content.Context import android.view.View import android.view.ViewGroup import android.app.Activity import android.graphics.Color import android.graphics.Rect import android.util.Log import android.widget.TextView data class SampleData(val id: Long, val value: String) class SampleAdapter: BaseAdapter { private val context: Context private val items: List&amp;lt;SampleData&amp;gt; private val views = ArrayList&amp;lt;View&amp;gt;() constructor(context: Context, items: List&amp;lt;SampleData&amp;gt;) { this.context = context this.items = items } override fun getCount(): Int { return items.size } override fun getItem(position: Int): Any { return items.</description>
    </item>
    
    <item>
      <title>UnityでAndroidのBLEを使うネイティブプラグインを作る</title>
      <link>https://www.sambaiz.net/article/27/</link>
      <pubDate>Sun, 23 Oct 2016 20:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/27/</guid>
      <description>UnityからBLEを使うためのネイティブプラグインを作る。
Android側 まず、Activityなしのプロジェクトを作って、New ModuleからAndroid Libraryを選択。 これらのパッケージ名がUnityで使うものと被らないようにする。
/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes/classes.jar をModuleの方のlibsに置く。
import com.unity3d.player.UnityPlayer; このjarは元々のやつとかぶってしまうので除外(build.gradleに追加)
android.libraryVariants.all { variant -&amp;gt; variant.outputs.each { output -&amp;gt; output.packageLibrary.exclude(&amp;#39;libs/classes.jar&amp;#39;) } } ActiviyはUnityPlayer.currentActivityで取得でき、 Unity側のメソッドを呼ぶのも UnityPlayer.UnitySendMessage(mGameObjName, mCallBackName, new String(characteristic.getValue())); のようにできる。
public class BLE { private final static String TAG = BLE.class.getSimpleName(); private static final int REQUEST_ENABLE_BT = 1; private static final int MY_PERMISSION_RESPONSE = 2; private static final String PERIPHERAL_LOCAL_NAME = &amp;#34;my-ble&amp;#34;; private static final UUID PERIPHERAL_SERIVCE_UUID = UUID.fromString(&amp;#34;BF9CB85F-620C-4A67-BDD2-1A64213F74CA&amp;#34;); private static final UUID PERIPHERAL_CHARACTERISTIC_UUID = UUID.</description>
    </item>
    
    <item>
      <title>android-BluetoothLeGattを読む</title>
      <link>https://www.sambaiz.net/article/25/</link>
      <pubDate>Fri, 21 Oct 2016 14:10:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/25/</guid>
      <description>BLEのサンプルコード。
https://github.com/googlesamples/android-BluetoothLeGatt
DeviceScanActivity BLEをサポートしているかチェックする。 BluetoothChatではBluetoothAdapterを取得するのに BluetoothAdapter.getDefaultAdapter()のようにしていたが、 BLEをサポートしているような新しいバージョンでは、BluetoothManagerのgetAdapter()を使うらしい。
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getActionBar().setTitle(R.string.title_devices); mHandler = new Handler(); // Use this check to determine whether BLE is supported on the device. Then you can  // selectively disable BLE-related features.  if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) { Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show(); finish(); } // Initializes a Bluetooth adapter. For API level 18 and above, get a reference to  // BluetoothAdapter through BluetoothManager.  final BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.</description>
    </item>
    
    <item>
      <title>android-bluetoothChatを読む</title>
      <link>https://www.sambaiz.net/article/23/</link>
      <pubDate>Sat, 15 Oct 2016 14:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/23/</guid>
      <description>Classic Bluetoothのサンプルコード。
https://github.com/googlesamples/android-BluetoothChat
MainActivity まず、MainActivity。
Fragmentのcommitや、
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); if (savedInstanceState == null) { FragmentTransaction transaction = getSupportFragmentManager().beginTransaction(); BluetoothChatFragment fragment = new BluetoothChatFragment(); transaction.replace(R.id.sample_content_fragment, fragment); transaction.commit(); } } オプションメニューの設定をしている。
// 最初だけ呼ばれる @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.main, menu); return true; } // 表示される度に呼ばれる @Override public boolean onPrepareOptionsMenu(Menu menu) { MenuItem logToggle = menu.findItem(R.id.menu_toggle_log); logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator); logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log); return super.onPrepareOptionsMenu(menu); } @Override public boolean onOptionsItemSelected(MenuItem item) { switch(item.</description>
    </item>
    
  </channel>
</rss>
