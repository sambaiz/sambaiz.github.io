<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/android/</link>
    <description>Recent content in Android on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 23 Oct 2016 20:39:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.sambaiz.net/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UnityでAndroidのBLEを使うネイティブプラグインを作る</title>
      <link>https://www.sambaiz.net/article/27/</link>
      <pubDate>Sun, 23 Oct 2016 20:39:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/27/</guid>
      <description>UnityからBLEを使うためのネイティブプラグインを作る。
Android側 まず、Activityなしのプロジェクトを作って、New ModuleからAndroid Libraryを選択。 これらのパッケージ名がUnityで使うものと被らないようにする。
/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes/classes.jar をModuleの方のlibsに置く。
import com.unity3d.player.UnityPlayer;  このjarは元々のやつとかぶってしまうので除外(build.gradleに追加)
android.libraryVariants.all { variant -&amp;gt; variant.outputs.each { output -&amp;gt; output.packageLibrary.exclude(&#39;libs/classes.jar&#39;) } }  ActiviyはUnityPlayer.currentActivityで取得でき、 Unity側のメソッドを呼ぶのも UnityPlayer.UnitySendMessage(mGameObjName, mCallBackName, new String(characteristic.getValue())); のようにできる。
public class BLE { private final static String TAG = BLE.class.getSimpleName(); private static final int REQUEST_ENABLE_BT = 1; private static final int MY_PERMISSION_RESPONSE = 2; private static final String PERIPHERAL_LOCAL_NAME = &amp;quot;my-ble&amp;quot;; private static final UUID PERIPHERAL_SERIVCE_UUID = UUID.</description>
    </item>
    
    <item>
      <title>android-BluetoothLeGattを読む</title>
      <link>https://www.sambaiz.net/article/25/</link>
      <pubDate>Fri, 21 Oct 2016 14:10:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/25/</guid>
      <description>BLEのサンプルコード。
https://github.com/googlesamples/android-BluetoothLeGatt
DeviceScanActivity BLEをサポートしているかチェックする。 BluetoothChatではBluetoothAdapterを取得するのに BluetoothAdapter.getDefaultAdapter()のようにしていたが、 BLEをサポートしているような新しいバージョンでは、BluetoothManagerのgetAdapter()を使うらしい。
@Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); getActionBar().setTitle(R.string.title_devices); mHandler = new Handler(); // Use this check to determine whether BLE is supported on the device. Then you can // selectively disable BLE-related features. if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) { Toast.makeText(this, R.string.ble_not_supported, Toast.LENGTH_SHORT).show(); finish(); } // Initializes a Bluetooth adapter. For API level 18 and above, get a reference to // BluetoothAdapter through BluetoothManager. final BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.</description>
    </item>
    
    <item>
      <title>android-bluetoothChatを読む</title>
      <link>https://www.sambaiz.net/article/23/</link>
      <pubDate>Sat, 15 Oct 2016 14:00:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/23/</guid>
      <description>Classic Bluetoothのサンプルコード。
https://github.com/googlesamples/android-BluetoothChat
MainActivity まず、MainActivity。
Fragmentのcommitや、
@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); if (savedInstanceState == null) { FragmentTransaction transaction = getSupportFragmentManager().beginTransaction(); BluetoothChatFragment fragment = new BluetoothChatFragment(); transaction.replace(R.id.sample_content_fragment, fragment); transaction.commit(); } }  オプションメニューの設定をしている。
// 最初だけ呼ばれる @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.main, menu); return true; } // 表示される度に呼ばれる @Override public boolean onPrepareOptionsMenu(Menu menu) { MenuItem logToggle = menu.findItem(R.id.menu_toggle_log); logToggle.setVisible(findViewById(R.id.sample_output) instanceof ViewAnimator); logToggle.setTitle(mLogShown ? R.string.sample_hide_log : R.string.sample_show_log); return super.</description>
    </item>
    
  </channel>
</rss>