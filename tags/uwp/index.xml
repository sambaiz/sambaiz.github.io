<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uwp on sambaiz-net</title>
    <link>https://www.sambaiz.net/tags/uwp/</link>
    <description>Recent content in uwp on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 13 Jun 2017 00:32:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/tags/uwp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VSでのネイティブプラグインのビルドからUnityでのWSAのビルドまでをバッチでする</title>
      <link>https://www.sambaiz.net/article/110/</link>
      <pubDate>Tue, 13 Jun 2017 00:32:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/110/</guid>
      <description>VSでのネイティブプラグインのビルド VSが使っているビルドツール MSBuildを使う。 VSのプロジェクトファイルにはMSBuildのXMLが含まれている。 これ自体はVSに依存していないため、単体で動かすこともできる。
パスが通ってなかったらパスを通す。管理者権限が必要。
&amp;gt; MSBuild &amp;#39;MSBuild&amp;#39; は、内部コマンドまたは外部コマンド、 操作可能なプログラムまたはバッチ ファイルとして認識されていません。 &amp;gt;　SETX /M PATH &amp;#34;%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin&amp;#34; 成功: 指定した値は保存されました。 別プロセスから適用されるので立ち上げ直すとパスが通っていることを確認できる。
&amp;gt; MSBuild /version Microsoft (R) Build Engine バージョン 15.1.1012.6693 Copyright (C) Microsoft Corporation.All rights reserved. 15.1.1012.6693 ビルドしてAssets\Pluginsに配置する。これは前作ったBLEのネイティブプラグインのもの。
Unity/UWPでBLEを扱うプラグインを作る - sambaiz-net
&amp;gt; git clone git@github.com:sambaiz/UnityBLE_UWP.git &amp;gt; cd UnityBLE_UWP &amp;gt; MSBuild UnityBLE_UWP\UnityBLE_UWP.csproj /t:restore;build /p:Configuration=Release;Platform=&amp;#34;x86&amp;#34; &amp;gt; MSBuild UnityBLE_Editor\UnityBLE_Editor.csproj /t:restore;build /p:Configuration=Release &amp;gt; copy /Y UnityBLE_UWP\bin\x86\Release\UnityBLE_UWP.dll ..\Assets\Plugins\WSA &amp;gt; copy /Y UnityBLE_Editor\bin\Release\UnityBLE_Editor.dll .</description>
    </item>
    
    <item>
      <title>Unity/UWPでBLEを扱うプラグインを作る</title>
      <link>https://www.sambaiz.net/article/105/</link>
      <pubDate>Sun, 04 Jun 2017 11:57:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/105/</guid>
      <description>コードはここ
この動画の 50:00あたりから説明があるように、 ビルドされたWSAが読むUWPのdllのほかに、 Unityエディタ上から読むための.NET Framework3.5のdllを用意する。 こうすることで実行環境ごとの違いをUnityコード上で気にしなくてもよくなる。
新しいプロジェクトで
  Visual C# から.NET Framework 3.5にしてクラスライブラリ(.NET Framework)
  Visual C# -&amp;gt;　Windows -&amp;gt; ユニバーサルからクラスライブラリ(ユニバーサルWindows)
  の2つのプロジェクトを同じソリューションに作成する。 VS2017で.NET Frameworkのクラスライブラリプロジェクトを作成するためには Visual Studio Installerで.NET Coreのワークロードをインストールする必要がある。 また、これとは別に動作確認用のUWPアプリケーションプロジェクトを作成した。
UWPの方のプロジェクトにあるClass1.csを削除し、追加 -&amp;gt; 既存の項目から、 もう片方のClass1.csをリンクとして追加して、この共通のcsにUWPのコードを書いていくんだけど、 そのまま書くと当然.NET Frameworkの方でビルドできないので 実装部分を#if WINDOWS_UWP ~ #endif で囲む。UWPの方のプロジェクトにはプロパティ -&amp;gt; ビルドの条件付きコンパイルにWINDOWS_UWPが含まれているので有効になる。
public void Start() { #if WINDOWS_UWP ... #endif } UWPでBLEを扱うのは前書いた通り。 ただし、なぜかXAMLに依存しているようでD3Dビルドすると失敗する。
UWPでBLEデバイスとペアリングして値を取得する - sambaiz-net
ビルドするとdllができるので.NET Frameworkの方をAssets/Pluginsに置いてInspectorからEditorにだけチェックを入れる。 UWPの方はAssets/Plugins/WSAに置くとWSA Playerにだけチェックが入る。
あとは普通にusingして使うだけ。Edit-&amp;gt;Project Settings-&amp;gt;PlayerからBluetoothのcapabilityを有効にするのを忘れずに。 Package.appxmanifestは上書きされないようなので前にビルドしたやつがあったら一旦消す。
using UnityBLE; public class BLE : MonoBehaviour { string value = &amp;#34;no connection&amp;#34;; public GameObject text; private string serviceUUID = &amp;#34;***&amp;#34;; private string characteristicUUID = &amp;#34;***&amp;#34;; void Start() { var ble = new UnityBLE.</description>
    </item>
    
    <item>
      <title>UWPでBLEデバイスとペアリングして値を取得する</title>
      <link>https://www.sambaiz.net/article/101/</link>
      <pubDate>Sat, 13 May 2017 10:57:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/article/101/</guid>
      <description>ManifestからBluetoothを許可しておく。
BLEデバイスを見つける CreateWatcherにBluetooth LEプロトコルのAEP(Association EndPoint)サービスクラスIDと requestPropaertiesで必要なデバイス情報を渡している。 最後のAssociationEndpointはSystem.Devices.Aep.ProtocolIdのAepと対応している。
using Windows.Devices.Enumeration; string[] requestedProperties = { &amp;#34;System.Devices.Aep.DeviceAddress&amp;#34;, &amp;#34;System.Devices.Aep.IsConnected&amp;#34; }; deviceWatcher = DeviceInformation.CreateWatcher( &amp;#34;(System.Devices.Aep.ProtocolId:=\&amp;#34;{bb7bb05e-5972-42b5-94fc-76eaa7084d49}\&amp;#34;)&amp;#34;, requestedProperties, DeviceInformationKind.AssociationEndpoint); deviceWatcher.Start(); deviceWatcher.Added += DeviceWatcher_Added; deviceWatcher.Removed += DeviceWatcher_Removed; deviceWatcher.Updated += DeviceWatcher_Updated; /* deviceWatcher.EnumerationCompleted += DeviceWatcher_EnumerationCompleted; deviceWatcher.Stopped += DeviceWatcher_Stopped; */ Dictionary&amp;lt;string, DeviceInformation&amp;gt; deviceInfos = new Dictionary&amp;lt;string, DeviceInformation&amp;gt;(); private void DeviceWatcher_Added(DeviceWatcher sender, DeviceInformation deviceInfo) { if (sender == deviceWatcher) { if (deviceInfo.Name != string.Empty) { deviceInfos.Add(deviceInfo.Id, deviceInfo); } } } private void DeviceWatcher_Updated(DeviceWatcher sender, DeviceInformationUpdate deviceInfoUpdate) { if (sender == deviceWatcher) { deviceInfos[deviceInfoUpdate.</description>
    </item>
    
  </channel>
</rss>
