<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/linux/</link>
    <description>Recent content in Linux on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Thu, 07 Mar 2024 01:05:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/en/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Run logrotate sidecar in Kubernetes</title>
      <link>https://www.sambaiz.net/en/article/472/</link>
      <pubDate>Thu, 07 Mar 2024 01:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/472/</guid>
      <description>Develop an application outputting logs, package main import ( &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/sirupsen/logrus&amp;#34; ) func main() { logFile, err := os.OpenFile(&amp;#34;/var/log/app/test.log&amp;#34;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666) if err != nil { logrus.Fatal(&amp;#34;failed to open file&amp;#34;, err) } logrus.SetOutput(logFile) i := 0 ticker := time.NewTicker(1 * time.Millisecond) for { &amp;lt;-ticker.C logrus.Print(i) i++ } } create image logrotate installed, $ cat Dockerfile_logrotate FROM alpine:latest RUN apk add --no-cache logrotate # RUN echo &amp;#39;/usr/sbin/logrotate /etc/logrotate.d/logrotate.conf&amp;#39; &amp;gt; /etc/periodic/daily/logrotate</description>
    </item>
    <item>
      <title>How faster is sending/receiving values by UNIX domain socket than starting new processes when executing commands</title>
      <link>https://www.sambaiz.net/en/article/404/</link>
      <pubDate>Fri, 06 May 2022 20:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/404/</guid>
      <description>For example when some procedures are written in different languages and they are repeatedly executed as different commands, overhead such as memory allocation occurs when creating a process. One of solutions to avoid this is to keep the process running and pass input/output value with interprocess communication. In this article I make a command in Go and benchmark to see how much the throughput differs.&#xA;For speedy interprocess communication on UNIX, besides shared memory, pipes and UNIX domain sockets are used.</description>
    </item>
    <item>
      <title>Options for SSH port forwarding</title>
      <link>https://www.sambaiz.net/en/article/42/</link>
      <pubDate>Sat, 17 Dec 2016 12:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/42/</guid>
      <description>Forward connection to localhost:8080 to example2.com:80 through example.com. This is generally used when the target server cannot be accessed directly from the local or when the port is not open to the public.&#xA;-L: Do port forwarding -N: Don&amp;rsquo;t execute commands -f: Run in the background $ ssh hoge@example.com -Nf -L 8080:example2.com:80 $ curl localhost:8080 # =&amp;gt; example2.com:80 </description>
    </item>
    <item>
      <title>Increase the maximum number of file descriptors</title>
      <link>https://www.sambaiz.net/en/article/41/</link>
      <pubDate>Thu, 08 Dec 2016 21:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/41/</guid>
      <description>What is file descriptors? File desecriptors is an identifier for interacting with an outside of a process. In POSIX, it is an int type, 0 is stdin, 1 is stdout, and 2 is stderr. It is assigned by a system call such as open() to open files and devices, and socket() to create sockets to communicate with other processes. Maximum number of file descriptors There is a limit on the</description>
    </item>
  </channel>
</rss>
