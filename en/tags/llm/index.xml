<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Llm on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/llm/</link>
    <description>Recent content in Llm on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Mon, 14 Jul 2025 21:45:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/en/tags/llm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running browser operations by Claude Code &amp; Playwright MCP in parallel using tmux and working it on each branch with git worktree</title>
      <link>https://www.sambaiz.net/en/article/537/</link>
      <pubDate>Mon, 14 Jul 2025 21:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/537/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/playwright-mcp&#34;&gt;Playwright MCP&lt;/a&gt; is Microsoft&amp;rsquo;s official MCP implementation of &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt; for cross-browser E2E testing of web applications.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ claude mcp add playwright npx @playwright/mcp@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;time&lt;/span&gt; claude -p &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Access sambaiz.net and get 5 genres. \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Access each {genre} page, take a screenshot, and copy it to the screenshot/{genre}/ directory.&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;claude -p   2.64s user 0.96s system 2% cpu 2:53.38 total&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tree screenshot &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;screenshot&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── aws&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── screenshot-aws-aws-page.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── golang&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── screenshot-golang-golang-page.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── kubernetes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── screenshot-kubernetes-kubernetes-page.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── machinelearning&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── screenshot-machinelearning-machinelearning-page.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── python&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── screenshot-python-python-page.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/537/images/serial.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/537/images/serial_hu_a81a193fa39cbbd8.png&#34; width=&#34;549&#34; height=&#34;370&#34; alt=&#34;Serial execution&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;git worktree creates a directory that points to the target branch. This allows you to work on multiple branches simultaneously. You cannot create worktrees for the same branch.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Handle Actions that take too long or are too heavy for Agents for Bedrock by using RETURN_CONTROL and processing them in a Go client</title>
      <link>https://www.sambaiz.net/en/article/496/</link>
      <pubDate>Tue, 27 Aug 2024 20:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/496/</guid>
      <description>&lt;p&gt;Agents for Bedrock can register and invoke Lambda functions as Actions. However, for processes that take a long time, there&amp;rsquo;s a risk of hitting Lambda timeouts or resource limits. Moreover, when considering running heavy processes in parallel or notifying users of progress, it can be inconvenient to call these from the Agent. ReturnControls solves this by not handling Actions on the Agent side, but instead returning the Action that should be called and its inputs to the client. The client can then pass the results back to the Agent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Create Agents for Bedrock using CDK and check that Lambda functions are called based on input</title>
      <link>https://www.sambaiz.net/en/article/495/</link>
      <pubDate>Tue, 27 Aug 2024 09:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/495/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/bedrock/agents/&#34;&gt;Agents for Amazon Bedrock&lt;/a&gt; is a feature that builds generative AI agents using various foundation models of Bedrock to perform multi-step processes. It can call Lambda functions as needed and connect with services like OpenSearch Serverless to perform RAG.&lt;/p&gt;&#xA;&lt;p&gt;The Lambda functions called by Agents need to return responses in the following &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/agents-lambda.html&#34;&gt;format&lt;/a&gt;. Also, it is &lt;a href=&#34;https://repost.aws/questions/QUXk7QWdzGTh-c5MIWch9NNQ/error-when-bedrock-agent-invoke-lambda&#34;&gt;necessary&lt;/a&gt; to set permissions for Bedrock for invocation in the Lambda&amp;rsquo;s Resource-based policy, not in the &lt;a href=&#34;https://docs.aws.amazon.com/bedrock/latest/userguide/agents-permissions.html&#34;&gt;agentResourceRole&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generate SQL from natural language and access databases with AgentExecutor of Langchain&#39;s SQL Database Toolkits</title>
      <link>https://www.sambaiz.net/en/article/488/</link>
      <pubDate>Sun, 26 May 2024 20:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/488/</guid>
      <description>&lt;p&gt;Langchain&amp;rsquo;s &lt;a href=&#34;https://python.langchain.com/v0.1/docs/integrations/toolkits/sql_database/&#34;&gt;SQL Database Toolkits&lt;/a&gt; provides a feature to generate SQL and access databases.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/agent_toolkits/sql/base.py#L44&#34;&gt;create_sql_agent()&lt;/a&gt; adds tools such as&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/tool.py#L50&#34;&gt;query_sql_database_tool&lt;/a&gt;: Execute SQL&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/tool.py#L76&#34;&gt;info_sql_database_tool&lt;/a&gt;: Get the schema of the table&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/tool.py#L98&#34;&gt;list_sql_database_tool&lt;/a&gt;: Get list of table names&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/prompt.py#L14&#34;&gt;query_sql_checker_tool&lt;/a&gt;: Rewrite if the SQL is incorrect&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;in &lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/agent_toolkits/sql/toolkit.py#L34&#34;&gt;SQLDatabaseToolkit.get_tools()&lt;/a&gt;, creates LLM, fills them in &lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/agent_toolkits/sql/prompt.py#L3&#34;&gt;prompt&lt;/a&gt; etc., and returns &lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/langchain/langchain/agents/agent.py#L915&#34;&gt;AgentExecutor&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/en/article/485/&#34;&gt;Create an LLM agent from a graph containing a cycle using the LangChain ecosystem LangGraph - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Try running it on &lt;a href=&#34;https://github.com/lerocha/chinook-database&#34;&gt;Chinook database&lt;/a&gt; as in the documentation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Create an LLM agent from a graph containing a cycle using the LangChain ecosystem LangGraph</title>
      <link>https://www.sambaiz.net/en/article/485/</link>
      <pubDate>Sun, 12 May 2024 21:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/485/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://python.langchain.com/v0.1/docs/langgraph/&#34;&gt;LangGraph&lt;/a&gt; is an ecosystem of LangChain, and a &lt;a href=&#34;https://python.langchain.com/v0.1/docs/expression_language/interface/&#34;&gt;Runnable&lt;/a&gt; is created by adding nodes to a StateGraph or MessageGraph whose state is List[BaseMessage], connecting them with add_edge() or add_conditional_edges(), and calling compile(). &lt;a href=&#34;https://python.langchain.com/v0.1/docs/expression_language/&#34;&gt;LangChain Expression Language (LCEL)&lt;/a&gt; can also connect Runnables to create a DAG, but LangGraph can also express cycles.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; langchain_openai &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; ChatOpenAI&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; langchain_core.messages &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; HumanMessage&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; langgraph.graph &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; END, StateGraph&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; langchain_core.tools &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; tool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; langgraph.prebuilt &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; ToolNode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; typing &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; TypedDict, Annotated&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;add_messages&lt;/span&gt;(left: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;list&lt;/span&gt;, right: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;list&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; left &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; right&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AgentState&lt;/span&gt;(TypedDict):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    messages: Annotated[&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;list&lt;/span&gt;, add_messages]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# export OPENAI_API_KEY=your-api-key&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; ChatOpenAI(model&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gpt-4-turbo&amp;#34;&lt;/span&gt;, temperature&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# graph = MessageGraph()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; StateGraph(AgentState)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@tool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;multiply&lt;/span&gt;(left: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;, right: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Multiplies two numbers together.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; left &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; right&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model_with_tools &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;bind_tools([multiply])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;call_model&lt;/span&gt;(state: AgentState) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; AgentState:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    messages &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; state[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;: [model_with_tools&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;invoke(messages)]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NODE_AGENT &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;agent&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NODE_MULTIPLY &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;multiply&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_node(NODE_AGENT, call_model)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_node(NODE_MULTIPLY, ToolNode([multiply]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;set_entry_point(NODE_AGENT)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;router&lt;/span&gt;(state: AgentState) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;str&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    messages &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; state[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; messages[&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;hasattr&lt;/span&gt;(last_message, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tool_calls&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(last_message&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;tool_calls) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; last_message&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;tool_calls[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; END&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_conditional_edges(NODE_AGENT, router)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_edge(NODE_MULTIPLY, NODE_AGENT) &lt;span style=&#34;color:#6272a4&#34;&gt;# cycle&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runnable &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; graph&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;compile()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;question &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;input&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;initial_state: AgentState &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;: [HumanMessage(content&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;question)]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; runnable&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;invoke(initial_state)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; result[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;]:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;### &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt;(message)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;__name__&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(message&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;content) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;message&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;content&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;hasattr&lt;/span&gt;(message, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tool_calls&amp;#39;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tool_calls: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;json&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dumps(message&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;tool_calls)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When executed, you can see that expected arguments are passed to the ToolNode and the results are returned to the original node.&#xA;&lt;a href=&#34;https://python.langchain.com/v0.1/docs/integrations/chat/openai/&#34;&gt;ChatOpenAI&lt;/a&gt; selects tools and parameters with &lt;a href=&#34;https://platform.openai.com/docs/guides/function-calling&#34;&gt;Function calling&lt;/a&gt; feature.&#xA;At this time, the docstring of tools passed to bind_tools() is &lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/f2f970f93de9a51bccc804dd7745f6b97f6cb419/libs/core/langchain_core/utils/function_calling.py#L244&#34;&gt;used&lt;/a&gt; as &lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/f2f970f93de9a51bccc804dd7745f6b97f6cb419/libs/core/langchain_core/tools.py#L829&#34;&gt;description&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fine-tuning OpenAI&#39;s GPT with Japanese Prime Minister&#39;s speech in the Diet</title>
      <link>https://www.sambaiz.net/en/article/452/</link>
      <pubDate>Mon, 11 Sep 2023 23:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/452/</guid>
      <description>&lt;p&gt;OpenAI provides APIs to &lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create&#34;&gt;create conversation&lt;/a&gt;&#xA;and &lt;a href=&#34;https://platform.openai.com/docs/api-reference/embeddings/create&#34;&gt;convert text to vector&lt;/a&gt;,&#xA;and also &lt;a href=&#34;https://platform.openai.com/docs/guides/fine-tuning&#34;&gt;fine-tune&lt;/a&gt; models with your own dataset,&#xA;which enables us to improve the quality of the output or save the cost of few-shot learning.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;(PS: 2025-03-08) In v1.0.0, interface was &lt;a href=&#34;https://github.com/openai/openai-python/discussions/742&#34;&gt;changed&lt;/a&gt; to be called from client = OpenAI(). The code below is for the previous version.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# !pip install openai&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; openai&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; np&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;response &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; openai&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ChatCompletion&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;create(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gpt-3.5-turbo&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  messages&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;role&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;# &amp;#34;system&amp;#34;, &amp;#34;user&amp;#34;, or &amp;#34;assistant&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Is this a pen?&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  temperature&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(response&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;choices[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;message)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  &amp;#34;role&amp;#34;: &amp;#34;assistant&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  &amp;#34;content&amp;#34;: &amp;#34;As an AI, I don&amp;#39;t have the ability to see or perceive objects. Therefore, I cannot determine if something is a pen or not based on visual cues.&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;embedding &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; openai&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Embedding&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;create(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-embedding-ada-002&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;# https://platform.openai.com/docs/guides/embeddings/embedding-models&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;response&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;choices[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;message&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;content&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(embedding&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;embedding[:&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;]) &lt;span style=&#34;color:#6272a4&#34;&gt;# [-0.02444140985608101, -0.015481687150895596, 0.009029921144247055, 0.0035672972444444895, -0.006072063464671373]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(embedding&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;embedding)) &lt;span style=&#34;color:#6272a4&#34;&gt;# 1536&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# https://platform.openai.com/docs/guides/embeddings/limitations-risks&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# https://github.com/openai/openai-python/blob/5d50e9e3b39540af782ca24e65c290343d86e1a9/openai/embeddings_utils.py#L65C1-L65C1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;cosine_similarity&lt;/span&gt;(a, b):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dot(a, b) &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; (np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;norm(a) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;linalg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;norm(b))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cosine_similarity(embedding&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;embedding, embedding&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;embedding) &lt;span style=&#34;color:#6272a4&#34;&gt;# 1.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ready-for-the-dataset&#34;&gt;Ready for the dataset&lt;/h2&gt;&#xA;&lt;p&gt;Collect questions and answers to the Prime Minister or his deputy with &lt;a href=&#34;https://kokkai.ndl.go.jp/api.html&#34;&gt;API for the Japanese Diet Minutes Search System&lt;/a&gt;,&#xA;output them in the &lt;a href=&#34;https://platform.openai.com/docs/guides/fine-tuning/example-format&#34;&gt;format&lt;/a&gt; for fine-tuning.&#xA;There are very long questions and answers in the speeches, but they are excluded mainly for the sake of &lt;a href=&#34;https://openai.com/pricing&#34;&gt;cost&lt;/a&gt; of learning.&#xA;I noticed later that I could get them in JSON.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
