<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 29 May 2022 19:18:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/en/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Calculate partial sum with Segment Tree or Bineary Indexed Tree (BIT)</title>
      <link>https://www.sambaiz.net/en/article/406/</link>
      <pubDate>Sun, 29 May 2022 19:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/406/</guid>
      <description>&lt;h2 id=&#34;segment-tree&#34;&gt;Segment Tree&lt;/h2&gt;&#xA;&lt;p&gt;Segment Tree is a complete binary tree which can calculate partial sum at O(log n) by having the calculation results in each partials as node. In the following example, the calculated value is sum, but if it is the minimum value, &lt;a href=&#34;https://en.wikipedia.org/wiki/Range_minimum_query&#34;&gt;Range Minimum Query (RMQ)&lt;/a&gt; can be solved and if it is the sorted list, merge sort is processed. When updating the value, recalculate in order from the bottom.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Check if there is a cycle in the undirected graph by Union-Find Tree</title>
      <link>https://www.sambaiz.net/en/article/390/</link>
      <pubDate>Sun, 12 Dec 2021 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/390/</guid>
      <description>&lt;h2 id=&#34;union-find-tree&#34;&gt;Union-Find Tree&lt;/h2&gt;&#xA;&lt;p&gt;Union-Find Tree is a data structure having some disjoint sets and can do &amp;ldquo;Union&amp;rdquo; which merges two sets, and &amp;ldquo;Find&amp;rdquo; which checks if two elements are in the same set with amortized O(α(n)) (α(n) is an inverse &lt;a href=&#34;https://en.wikipedia.org/wiki/Ackermann_function&#34;&gt;Ackermann function&lt;/a&gt; and smaller than log(n)).&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;Union&amp;rdquo; connects the tree with the smaller rank to under side so that merged tree will be in equilibrium as much as possible.&#xA;The rank of one element tree is 0, and when trees of the same rank are merged, merged tree&amp;rsquo;s rank is the original rank + 1.&#xA;&amp;ldquo;Find&amp;rdquo; compares the root values and after that reconnects checked nodes with the root so that enable efficient processing from the next time onward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implement Rabin–Karp algorithm in C&#43;&#43;</title>
      <link>https://www.sambaiz.net/en/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/387/</guid>
      <description>&lt;p&gt;Rabin–Karp algorithm is a string-searching algorithm using rolling hash.&#xA;Rolling hash can be made with O(1) by removing a first element from the previous hash and adding a next element to it.&#xA;There are various hash functions which can do it, but for example, when simply summing up character codes, the hashes will collide just because the same character is contained, so normally, the string is transformed to number as follows. Overflow can be avoided even with long strings by taking the modulo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>struct and class in C&#43;&#43;</title>
      <link>https://www.sambaiz.net/en/article/385/</link>
      <pubDate>Tue, 30 Nov 2021 18:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/385/</guid>
      <description>&lt;p&gt;class and struct in C++ are functionally equivalent but class is private by default as opposed to struct being public. class is used for encapsulation and if it has public fields and few methods, it seems that struct is used generally.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;C&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    C(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;S&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    S(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&amp;gt;&lt;/span&gt;value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; func() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt; () {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    C(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;).value; &lt;span style=&#34;color:#6272a4&#34;&gt;// member &amp;#34;C::value&amp;#34; (declared at line 2) is inaccessible&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    C(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;).func();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    S(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;).value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    S(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;).func(); &lt;span style=&#34;color:#6272a4&#34;&gt;// function &amp;#34;S::func&amp;#34; (declared at line 18) is inaccessible&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both can be inherited. In C++, if you do not add virtual to make it a virtual function, the original function is called without being overridden when called from a variable of the inheritance source type.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
