<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/algorithm/</link>
    <description>Recent content in Algorithm on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Thu, 12 Dec 2024 01:30:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/en/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a game AI for Animal Shogi using Monte Carlo Tree Search (MCTS)</title>
      <link>https://www.sambaiz.net/en/article/515/</link>
      <pubDate>Thu, 12 Dec 2024 01:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/515/</guid>
      <description>&lt;p&gt;Monte Carlo Tree Search (MCTS) is an algorithm used for searching optimal moves in game AI such as AlphaGo. Similar algorithms include the minimax, which exhaustively searches for the best moves assuming the opponent always makes the worst possible moves, and the alpha-beta pruning, which improves efficiency through pruning. While these algorithms require assigning evaluation values to intermediate board status, Monte Carlo Tree Search can evaluate the move based on the win/loss results of randomly playing out the game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>What do etcd, a distributed KVS with Raft, a consensus algorithm choose in the CAP/PACELC Theorem</title>
      <link>https://www.sambaiz.net/en/article/473/</link>
      <pubDate>Mon, 11 Mar 2024 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/473/</guid>
      <description>&lt;p&gt;etcd is a distributed KVS that is also used in Kubernetes.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/356/&#34;&gt;Raspberry PiでおうちKubernetesクラスタを構築する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/&#34;&gt;docs&lt;/a&gt; say that etcd is a consistent and highly-available key value store, and so I wondered it compromises partition tolerance (P) in the CAP theorem.&#xA;However, it feels difficult to maintain CA when a distributed system&amp;rsquo;s network is partitioned.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Read container/heap package in Go</title>
      <link>https://www.sambaiz.net/en/article/456/</link>
      <pubDate>Sun, 05 Nov 2023 21:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/456/</guid>
      <description>&lt;p&gt;Go standard library has &lt;a href=&#34;https://pkg.go.dev/container/heap&#34;&gt;container/heap&lt;/a&gt; package which can be used to implement min/max heap and priority queue using this interface.&#xA;It was implemented long time ago and there is a &lt;a href=&#34;https://github.com/golang/go/issues/47632&#34;&gt;proposal&lt;/a&gt; to use Generics.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/253/&#34;&gt;C++ STLのContainersとAlgorithms - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Interface &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sort.Interface&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Push&lt;/span&gt;(x &lt;span style=&#34;color:#8be9fd&#34;&gt;any&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// add x as element Len()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Pop&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;any&lt;/span&gt;   &lt;span style=&#34;color:#6272a4&#34;&gt;// remove and return element Len() - 1.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try to use IntHeap in the document. In Pop(), it takes the value pointed by the pointer, processes the slice, and assigns it to itself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implement AVL tree, self-balancing binary search tree, in Go and confirm that the height is kept minimum</title>
      <link>https://www.sambaiz.net/en/article/439/</link>
      <pubDate>Sat, 25 Feb 2023 00:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/439/</guid>
      <description>&lt;p&gt;AVL tree is one of the self-balancing binary search trees, which is a kind of binary search tree, and by keeping the height to a minimum, the computational complexity for operations can be reduced.&#xA;Each time the tree is changed, if there is a height difference of 2 or more between left and right trees, they are rebalanced with rotation.&#xA;Another self-balancing binary search tree example is a red-black tree.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Scheduler which allocates resources in Hadoop YARN, and Dominant Resource Fairness (DRF)</title>
      <link>https://www.sambaiz.net/en/article/433/</link>
      <pubDate>Sat, 24 Dec 2022 22:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/433/</guid>
      <description>&lt;p&gt;YARN&amp;rsquo;s ResourceManager consists of ApplicationsManager, which receives applications from clients and launches ApplicationMaster, and &lt;a href=&#34;https://github.com/apache/hadoop/blob/release-3.3.5-RC0/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/YarnScheduler.java&#34;&gt;Scheduler&lt;/a&gt;, which receives requests from ApplicationMaster and allocates resources.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/en/article/427/&#34;&gt;How Hadoop YARN allocates resources to applications and check how much resources are allocated - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;scheduler&#34;&gt;Scheduler&lt;/h2&gt;&#xA;&lt;p&gt;Scheduler has &lt;a href=&#34;https://github.com/apache/hadoop/tree/release-3.3.5-RC0/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler&#34;&gt;implementations&lt;/a&gt;&#xA;such as &lt;a href=&#34;https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/CapacityScheduler.html&#34;&gt;CapacityScheduler&lt;/a&gt;, which aims to maximize the throughput in multi-tenant clusters, and&#xA;&lt;a href=&#34;https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/FairScheduler.html&#34;&gt;FairScheduler&lt;/a&gt;, which allocates fair resources to all applications.&#xA;You can choose to use which one with yarn.resourcemanager.scheduler.class, and CapacityScheduler is used in EMR by default.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maximum flow and minimum cut problem, Ford–Fulkerson algorithm</title>
      <link>https://www.sambaiz.net/en/article/407/</link>
      <pubDate>Sun, 05 Jun 2022 18:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/407/</guid>
      <description>&lt;h2 id=&#34;maximum-flow-problem&#34;&gt;Maximum flow problem&lt;/h2&gt;&#xA;&lt;p&gt;Maximum flow promlem is a problem that maximizes the flow from the source to the sink in the network consisting of paths with capacity. It is necessary not to exceed the capacity and to equal input and output amount for each node. Besides, all of the data emitted from the source must be sent to the sink.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/407/images/network.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/407/images/network_hu_643719baf53214a.png&#34; width=&#34;445&#34; height=&#34;370&#34; alt=&#34;Network&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;h2 id=&#34;minimum-cut-problem&#34;&gt;Minimum cut problem&lt;/h2&gt;&#xA;&lt;p&gt;Minimum cut problem is a problem that minimizes capacity of cut that divides the source and the sink.&#xA;&lt;strong&gt;Cut (S,V\S)&lt;/strong&gt; is a set of outgoing paths of the nodes&amp;rsquo; subset S⊆V and cut capacity is the total capacity of the edges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Calculate partial sum with Segment Tree or Bineary Indexed Tree (BIT)</title>
      <link>https://www.sambaiz.net/en/article/406/</link>
      <pubDate>Sun, 29 May 2022 19:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/406/</guid>
      <description>&lt;h2 id=&#34;segment-tree&#34;&gt;Segment Tree&lt;/h2&gt;&#xA;&lt;p&gt;Segment Tree is a complete binary tree which can calculate partial sum at O(log n) by having the calculation results in each partials as node. In the following example, the calculated value is sum, but if it is the minimum value, &lt;a href=&#34;https://en.wikipedia.org/wiki/Range_minimum_query&#34;&gt;Range Minimum Query (RMQ)&lt;/a&gt; can be solved and if it is the sorted list, merge sort is processed. When updating the value, recalculate in order from the bottom.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Check if there is a cycle in the undirected graph by Union-Find Tree</title>
      <link>https://www.sambaiz.net/en/article/390/</link>
      <pubDate>Sun, 12 Dec 2021 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/390/</guid>
      <description>&lt;h2 id=&#34;union-find-tree&#34;&gt;Union-Find Tree&lt;/h2&gt;&#xA;&lt;p&gt;Union-Find Tree is a data structure having some disjoint sets and can do &amp;ldquo;Union&amp;rdquo; which merges two sets, and &amp;ldquo;Find&amp;rdquo; which checks if two elements are in the same set with amortized O(α(n)) (α(n) is an inverse &lt;a href=&#34;https://en.wikipedia.org/wiki/Ackermann_function&#34;&gt;Ackermann function&lt;/a&gt; and smaller than log(n)).&lt;/p&gt;&#xA;&lt;p&gt;&amp;ldquo;Union&amp;rdquo; connects the tree with the smaller rank to under side so that merged tree will be in equilibrium as much as possible.&#xA;The rank of one element tree is 0, and when trees of the same rank are merged, merged tree&amp;rsquo;s rank is the original rank + 1.&#xA;&amp;ldquo;Find&amp;rdquo; compares the root values and after that reconnects checked nodes with the root so that enable efficient processing from the next time onward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implement Rabin–Karp algorithm in C&#43;&#43;</title>
      <link>https://www.sambaiz.net/en/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/387/</guid>
      <description>&lt;p&gt;Rabin–Karp algorithm is a string-searching algorithm using rolling hash.&#xA;Rolling hash can be made with O(1) by removing a first element from the previous hash and adding a next element to it.&#xA;There are various hash functions which can do it, but for example, when simply summing up character codes, the hashes will collide just because the same character is contained, so normally, the string is transformed to number as follows. Overflow can be avoided even with long strings by taking the modulo.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
