<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/algorithm/</link>
    <description>Recent content in algorithm on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 04 Dec 2021 22:38:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/en/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implement Rabin–Karp algorithm in C&#43;&#43;</title>
      <link>https://www.sambaiz.net/en/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/387/</guid>
      <description>Rabin–Karp algorithm is a string-searching algorithm using rolling hash. Rolling hash can be made with O(1) by removing a first element from the previous hash and add next element to it.
class rolling_hash { string str; int window_length = 0; long hash = 0; int head_idx = 0; long tail_pow; const int base = 128; public: rolling_hash(string str, int window_length) { this-&amp;gt;str = str; this-&amp;gt;window_length = window_length; long pow = 1; for (int i = 0; i &amp;lt; window_length; i++) { hash += str[i] * pow; pow *= base; } tail_pow = pow / base; } int get() { return hash; } // a_0 * base^0 + a_1 * base^1 + .</description>
    </item>
    
  </channel>
</rss>
