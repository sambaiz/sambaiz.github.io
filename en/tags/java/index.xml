<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/java/</link>
    <description>Recent content in java on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sun, 29 Jan 2023 23:58:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/en/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compare the speed of calling a shared library built in Go from Java with JNI and JNA</title>
      <link>https://www.sambaiz.net/en/article/437/</link>
      <pubDate>Sun, 29 Jan 2023 23:58:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/437/</guid>
      <description>JNI (Java Native Interface) is an interface to enable Java to call native codes in C/C++ executed outside JVM and enable native codes to call codes in Java. This makes it possible to speed up heavy processing and share processing across multiple platforms. JNA (Java Native Access), a library, is also available to call native codes from Java, and it is easier to use and makes effort to minimize the</description>
    </item>
    
    <item>
      <title>Benchmark Java codes with JMH</title>
      <link>https://www.sambaiz.net/en/article/435/</link>
      <pubDate>Sat, 28 Jan 2023 17:48:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/435/</guid>
      <description>JMH (Java Microbenchmark Harness) is a benchmark tool for JVM languages. If you execute small codes naively, the performance can be better than actual due to optimization such as JIT compile that is not performed in the real case that whole codes are large. JMH prevent the optimization from being applied, so it seems that it can benchmark accurately.
Create a project according to the README and try to run the benchmark.</description>
    </item>
    
    <item>
      <title>Build Spark and debug it remotely at IntelliJ</title>
      <link>https://www.sambaiz.net/en/article/419/</link>
      <pubDate>Sun, 09 Oct 2022 19:06:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/419/</guid>
      <description>Build at the command prompt $ git clone --branch v3.3.0 --depth 1 https://github.com/apache/spark.git Install Java 8 with asdf. $ brew install asdf $ echo -e &amp;#34;\n. $(brew --prefix asdf)/libexec/asdf.sh&amp;#34; &amp;gt;&amp;gt; ${ZDOTDIR:-~}/.zshrc $ asdf --version v0.10.2 $ asdf plugin-add java $ asdf list-all java $ asdf install java corretto-8.342.07.3 $ asdf global java corretto-8.342.07.3 $ echo &amp;#34;. ~/.asdf/plugins/java/set-java-home.zsh&amp;#34; &amp;gt;&amp;gt; ~/.zprofile $ java -version openjdk version &amp;#34;1.8.0_342&amp;#34; OpenJDK Runtime Environment Corretto-8.342.07.3 (build</description>
    </item>
    
    <item>
      <title>Exploring the cause of OOM that occurred in Java from GC logs and heap dumps</title>
      <link>https://www.sambaiz.net/en/article/413/</link>
      <pubDate>Thu, 11 Aug 2022 08:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/413/</guid>
      <description>Visualize GC logs Output GC logs. -Xloggc:/tmp/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps $ cat /tmp/gc.log 2022-08-08T16:35:30.738+0000: [GC (Allocation Failure) [PSYoungGen: 638269K-&amp;gt;3108K(665600K)] 2017703K-&amp;gt;1382542K(2063872K), 0.0084360 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] 2022-08-08T16:35:31.320+0000: [GC (Allocation Failure) [PSYoungGen: 640548K-&amp;gt;2565K(666624K)] 2019982K-&amp;gt;1382000K(2064896K), 0.0086070 secs] [Times: user=0.05 sys=0.00, real=0.01 secs] 2022-08-08T16:35:31.878+0000: [GC (Allocation Failure) [PSYoungGen: 640005K-&amp;gt;2565K(667136K)] 2019440K-&amp;gt;1382000K(2065408K), 0.0086495 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] 2022-08-08T16:35:32.451+0000: [GC (Allocation Failure) [PSYoungGen: 643589K-&amp;gt;3301K(668672K)] 2023024K-&amp;gt;1382736K(2066944K), 0.0087513 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] Opening this</description>
    </item>
    
    <item>
      <title>Debug a Java application running on a remote machine by enabling JDWP</title>
      <link>https://www.sambaiz.net/en/article/411/</link>
      <pubDate>Sun, 24 Jul 2022 21:59:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/411/</guid>
      <description>Enable JDWP If -agentlib:jdwp is passed on starting, JDWP(Java Debug Wire Protocol), which is used for communicating between debugger and JVM, is enabled.
transport=dt_socket,server=y,address=*:5005: Listen debugger on port 5005. Prior to Java 8, *: is not required. suspend=n: Don&amp;rsquo;t suspend the JVM immediately before the main class is loaded For applications that terminate when processing is finished, you can start the debugger in advance and then run the application with server=n to connect to the debugger.</description>
    </item>
    
    <item>
      <title>Implement Athena&#39;s data source connectors and user defined functions (UDF)</title>
      <link>https://www.sambaiz.net/en/article/402/</link>
      <pubDate>Sat, 23 Apr 2022 18:09:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/402/</guid>
      <description>Athena has a feature called Federate Query that can access data sources other than S3 using Lambda as a connector, and the official repository provides connectors for various data sources such as BigQuery and Snowflake, but you can also implement your own. This article, implement the minimum connector while referring to Example Connector and run it. The full codes has been pushed to GitHub.
Generate data with TPC-DS Connector in Athena&amp;rsquo;s Federated Query - sambaiz-net</description>
    </item>
    
    <item>
      <title>About JVM Heap space and Full GC</title>
      <link>https://www.sambaiz.net/en/article/35/</link>
      <pubDate>Mon, 14 Nov 2016 23:46:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/35/</guid>
      <description>Heap space Heap space is a dynamically allocated memory space that is divided into a new generation and an old generation in JVM. By the way, the heap space containing the loaded classes and methods was called the Permanent space, but since Java8, it has been replaced by the Metaspace and has been placed in native memory. New generation The New generation is further divided into the following space. Eden:</description>
    </item>
    
  </channel>
</rss>
