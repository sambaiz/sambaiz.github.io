<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/java/</link>
    <description>Recent content in Java on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Tue, 08 Aug 2023 22:44:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/en/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Solve an incompatible version conflict problem in Java by relocation and custom ClassLoader</title>
      <link>https://www.sambaiz.net/en/article/443/</link>
      <pubDate>Tue, 08 Aug 2023 22:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/443/</guid>
      <description>&lt;p&gt;When your Java application occurs an incompatible version conflict problem,&#xA;even if you build uber-jar, classes in the jar are not preferentially loaded but loaded by the classpath order.&#xA;At that time, if there are incompatible classes, it will be in a state called &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Classloader#:~:text=2%5D%5B6%5D-,JAR%20hell%5Bedit%5D,-JAR%20hell%20is&#34;&gt;JAR hell&lt;/a&gt;,&#xA;and NoSuchMethodError or unintended behavior can occur at runtime.&lt;/p&gt;&#xA;&lt;p&gt;Say you have legacylib.jar containing guava 17.0 and modernlib.jar containing guava 32.1,&#xA;and the former calls ByteStreams.asByteSource() removed in guava 18.0 and the latter calls ByteStreams.exhaust() added in guava 20.0.&#xA;In this case, NoSuchMethodError will occur regardless of which jar is placed before the classpath. I will solve this problem.&#xA;The whole code is on &lt;a href=&#34;https://github.com/sambaiz/resolve-java-lib-version-conflict-problem&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compare the speed of calling a shared library built in Go from Java with JNI and JNA</title>
      <link>https://www.sambaiz.net/en/article/437/</link>
      <pubDate>Sun, 29 Jan 2023 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/437/</guid>
      <description>&lt;p&gt;JNI (Java Native Interface) is an interface to enable Java to call native codes in C/C++ executed outside JVM and enable native codes to call codes in Java.&#xA;This makes it possible to speed up heavy processing and share processing across multiple platforms.&#xA;&lt;a href=&#34;https://github.com/java-native-access/jna&#34;&gt;JNA (Java Native Access)&lt;/a&gt;, a library, is also available to call native codes from Java, and it is easier to use and makes effort to minimize the overhead, but it seems to be slower than JNI.&#xA;So, I tried comparing the speed with actually calling a simple shared library with JNI and JNA.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Benchmark Java codes with JMH</title>
      <link>https://www.sambaiz.net/en/article/435/</link>
      <pubDate>Sat, 28 Jan 2023 17:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/435/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/openjdk/jmh&#34;&gt;JMH (Java Microbenchmark Harness)&lt;/a&gt; is a benchmark tool for JVM languages.&#xA;If you execute small codes naively, the performance can be better than actual due to optimization such as JIT compile that is not performed in the real case that whole codes are large.&#xA;JMH prevent the optimization from being applied, so it seems that it can benchmark accurately.&lt;/p&gt;&#xA;&lt;p&gt;Create a project according to the README and try to run the benchmark.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build Spark and debug it remotely at IntelliJ</title>
      <link>https://www.sambaiz.net/en/article/419/</link>
      <pubDate>Sun, 09 Oct 2022 19:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/419/</guid>
      <description>&lt;h2 id=&#34;build-at-the-command-prompt&#34;&gt;&lt;a href=&#34;https://spark.apache.org/docs/3.3.0/building-spark.html&#34;&gt;Build at the command prompt&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone &lt;span style=&#34;color:#6272a4&#34;&gt;--branch v3.3.0 --depth 1 https://github.com/apache/spark.git &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install Java 8 with &lt;a href=&#34;https://asdf-vm.com/guide/getting-started.html#_3-install-asdf&#34;&gt;asdf&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install asdf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;\n. $(brew --prefix asdf)/libexec/asdf.sh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ${ZDOTDIR:&lt;span style=&#34;color:#ff79c6&#34;&gt;-~&lt;/span&gt;}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;.zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf &lt;span style=&#34;color:#6272a4&#34;&gt;--version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;v0.&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf plugin&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;add&lt;/span&gt; java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf list&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;all&lt;/span&gt; java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf install java corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf &lt;span style=&#34;color:#ff79c6&#34;&gt;global&lt;/span&gt; java corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;. ~/.asdf/plugins/java/set-java-home.zsh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;~/&lt;/span&gt;.zprofile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ java &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openjdk &lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.8.0_342&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenJDK Runtime Environment Corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; (build &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;_342&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;b07)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenJDK &lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Bit&lt;/span&gt; Server VM Corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; (build &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;b07, mixed &lt;span style=&#34;color:#ff79c6&#34;&gt;mode&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check the build&amp;rsquo;s success.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;MAVEN_OPTS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-Xss64m -Xmx2g -XX:ReservedCodeCacheSize=1g&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./build/mvn -DskipTests clean package&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;build-at-intellij&#34;&gt;&lt;a href=&#34;https://spark.apache.org/developer-tools.html&#34;&gt;Build at IntelliJ&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Open codes as Maven Project from &amp;ldquo;New &amp;gt; Project from Existing Sources.&amp;rdquo;&#xA;There is JDK in ~/.asdf/installs/java/, so make hidden directory visible with &amp;ldquo;Command + Shift + .&amp;rdquo;, and choose it.&#xA;After that, run &amp;ldquo;Generate Sources and Update Folders For All Projects&amp;rdquo; from Maven window, and then Build Project becomes successful.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring the cause of OOM that occurred in Java from GC logs and heap dumps</title>
      <link>https://www.sambaiz.net/en/article/413/</link>
      <pubDate>Thu, 11 Aug 2022 08:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/413/</guid>
      <description>&lt;h2 id=&#34;visualize-gc-logs&#34;&gt;Visualize GC logs&lt;/h2&gt;&#xA;&lt;p&gt;Output GC logs.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-Xloggc:/tmp/gc.log&lt;/li&gt;&#xA;&lt;li&gt;-XX:+PrintGCDetails&lt;/li&gt;&#xA;&lt;li&gt;-XX:+PrintGCDateStamps&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /tmp/gc.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:30.738+0000: [GC (Allocation Failure) [PSYoungGen: 638269K-&amp;gt;3108K(665600K)] 2017703K-&amp;gt;1382542K(2063872K), 0.0084360 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:31.320+0000: [GC (Allocation Failure) [PSYoungGen: 640548K-&amp;gt;2565K(666624K)] 2019982K-&amp;gt;1382000K(2064896K), 0.0086070 secs] [Times: user=0.05 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:31.878+0000: [GC (Allocation Failure) [PSYoungGen: 640005K-&amp;gt;2565K(667136K)] 2019440K-&amp;gt;1382000K(2065408K), 0.0086495 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:32.451+0000: [GC (Allocation Failure) [PSYoungGen: 643589K-&amp;gt;3301K(668672K)] 2023024K-&amp;gt;1382736K(2066944K), 0.0087513 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Opening this file with &lt;a href=&#34;https://github.com/chewiebug/GCViewer&#34;&gt;GCViewer&lt;/a&gt;, a graph as follows is rendered.&#xA;The upper part represents the new generation, and the lower part represents the old generation.&#xA;When the purple line representing the usage of the old generation is full, the black line Full GC runs, and the blue line representing the total heap usage also decreases.&#xA;In this example, the decrement of GC gradually decreases, and since the second half is almost completely black, it can be seen that full GC is always occurring.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debug a Java application running on a remote machine by enabling JDWP</title>
      <link>https://www.sambaiz.net/en/article/411/</link>
      <pubDate>Sun, 24 Jul 2022 21:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/411/</guid>
      <description>&lt;h2 id=&#34;enable-jdwp&#34;&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&#34;&gt;Enable JDWP&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;If &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&#34;&gt;-agentlib:jdwp&lt;/a&gt; is passed on starting, JDWP(Java Debug Wire Protocol), which is used for communicating between debugger and JVM, is enabled.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;transport=dt_socket,server=y,address=*:5005: Listen debugger on port 5005. Prior to Java 8, *: is not required.&lt;/li&gt;&#xA;&lt;li&gt;suspend=n: Don&amp;rsquo;t suspend the JVM immediately before the main class is loaded&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For applications that terminate when processing is finished, you can start the debugger in advance and then run the application with server=n to connect to the debugger. Or with suspend=y, you can get the application paused until a debugger connects to it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implement Athena&#39;s data source connectors and user defined functions (UDF)</title>
      <link>https://www.sambaiz.net/en/article/402/</link>
      <pubDate>Sat, 23 Apr 2022 18:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/402/</guid>
      <description>&lt;p&gt;Athena has a feature called Federate Query that can access data sources other than S3 using Lambda as a connector, and&#xA;&lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation&#34;&gt;the official repository&lt;/a&gt; provides connectors for various data sources such as BigQuery and Snowflake, but you can also implement your own.&#xA;This article, implement the minimum connector while referring to &lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation/tree/master/athena-example&#34;&gt;Example Connector&lt;/a&gt; and run it. The full codes has been pushed to &lt;a href=&#34;https://github.com/sambaiz/athena-connector-udf-example&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/en/article/391/&#34;&gt;Generate data with TPC-DS Connector in Athena&amp;rsquo;s Federated Query - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>About JVM Heap space and Full GC</title>
      <link>https://www.sambaiz.net/en/article/35/</link>
      <pubDate>Mon, 14 Nov 2016 23:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/35/</guid>
      <description>&lt;h2 id=&#34;heap-space&#34;&gt;Heap space&lt;/h2&gt;&#xA;&lt;p&gt;Heap space is a dynamically allocated memory space that is divided into a new generation and an old generation in JVM.&#xA;By the way, the heap space containing the loaded classes and methods was called the Permanent space, but since Java8, it has been replaced by the Metaspace and has been placed in native memory.&lt;/p&gt;&#xA;&lt;h2 id=&#34;new-generation&#34;&gt;New generation&lt;/h2&gt;&#xA;&lt;p&gt;The New generation is further divided into the following space.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Eden: An created object is placed first&lt;/li&gt;&#xA;&lt;li&gt;Survivor spaces * 2: Sent when Eden is full&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;When Eden is full, Scavenge GC discards unnecessary objects and move necessary ones to other spaces.&#xA;This means that each time Eden is filled, objects shuttle between two Survivor spaces, but ones that exceed the MaxTenuringThreshold number of times are sent to the Old space instead.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
