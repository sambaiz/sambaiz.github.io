<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/java/</link>
    <description>Recent content in java on sambaiz-net</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Thu, 11 Aug 2022 08:30:00 +0900</lastBuildDate><atom:link href="https://www.sambaiz.net/en/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring the cause of OOM that occurred in Java from GC logs and heap dumps</title>
      <link>https://www.sambaiz.net/en/article/413/</link>
      <pubDate>Thu, 11 Aug 2022 08:30:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/413/</guid>
      <description>Visualize GC logs Outputted GC logs. -Xloggc:/tmp/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps $ cat /tmp/gc.log 2022-08-08T16:35:30.738+0000: [GC (Allocation Failure) [PSYoungGen: 638269K-&amp;gt;3108K(665600K)] 2017703K-&amp;gt;1382542K(2063872K), 0.0084360 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] 2022-08-08T16:35:31.320+0000: [GC (Allocation Failure) [PSYoungGen: 640548K-&amp;gt;2565K(666624K)] 2019982K-&amp;gt;1382000K(2064896K), 0.0086070 secs] [Times: user=0.05 sys=0.00, real=0.01 secs] 2022-08-08T16:35:31.878+0000: [GC (Allocation Failure) [PSYoungGen: 640005K-&amp;gt;2565K(667136K)] 2019440K-&amp;gt;1382000K(2065408K), 0.0086495 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] 2022-08-08T16:35:32.451+0000: [GC (Allocation Failure) [PSYoungGen: 643589K-&amp;gt;3301K(668672K)] 2023024K-&amp;gt;1382736K(2066944K), 0.0087513 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] Opening this</description>
    </item>
    
    <item>
      <title>Debug a Java application running on a remote machine by enabling JDWP</title>
      <link>https://www.sambaiz.net/en/article/411/</link>
      <pubDate>Sun, 24 Jul 2022 21:59:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/411/</guid>
      <description>Enable JDWP If -agentlib:jdwp is passed on starting, JDWP(Java Debug Wire Protocol), which is used for communicating between debugger and JVM, is enabled.
transport=dt_socket,server=y,address=*:5005: Listen debugger on port 5005. Prior to Java 8, *: is not required. suspend=n: Don&amp;rsquo;t suspend the JVM immediately before the main class is loaded $ java --version openjdk 18.0.1 2022-04-19 OpenJDK Runtime Environment Corretto-18.0.1.10.1 (build 18.0.1+10-FR) OpenJDK 64-Bit Server VM Corretto-18.0.1.10.1 (build 18.0.1+10-FR, mixed mode, sharing) $ java -jar -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 out/artifacts/debugtest_jar/debugtest.</description>
    </item>
    
    <item>
      <title>Implement Athena&#39;s data source connectors and user defined functions (UDF)</title>
      <link>https://www.sambaiz.net/en/article/402/</link>
      <pubDate>Sat, 23 Apr 2022 18:09:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/402/</guid>
      <description>Athena has a feature called Federate Query that can access data sources other than S3 using Lambda as a connector, and the official repository provides connectors for various data sources such as BigQuery and Snowflake, but you can also implement your own. This article, implement the minimum connector while referring to Example Connector and run it. The full codes has been pushed to GitHub.
Generate data with TPC-DS Connector in Athena&amp;rsquo;s Federated Query - sambaiz-net</description>
    </item>
    
    <item>
      <title>About JVM Heap space and Full GC</title>
      <link>https://www.sambaiz.net/en/article/35/</link>
      <pubDate>Mon, 14 Nov 2016 23:46:00 +0900</pubDate>
      
      <guid>https://www.sambaiz.net/en/article/35/</guid>
      <description>Heap space Heap space is a dynamically allocated memory space that is divided into a new generation and an old generation in JVM. By the way, the heap space containing the loaded classes and methods was called the Permanent space, but since Java8, it has been replaced by the Metaspace and has been placed in native memory. New generation The New generation is further divided into the following space. Eden:</description>
    </item>
    
  </channel>
</rss>
