<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/golang/</link>
    <description>Recent content in Golang on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Thu, 12 Dec 2024 01:30:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/en/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a game AI for Animal Shogi using Monte Carlo Tree Search (MCTS)</title>
      <link>https://www.sambaiz.net/en/article/515/</link>
      <pubDate>Thu, 12 Dec 2024 01:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/515/</guid>
      <description>&lt;p&gt;Monte Carlo Tree Search (MCTS) is an algorithm used for searching optimal moves in game AI such as AlphaGo. Similar algorithms include the minimax, which exhaustively searches for the best moves assuming the opponent always makes the worst possible moves, and the alpha-beta pruning, which improves efficiency through pruning. While these algorithms require assigning evaluation values to intermediate board status, Monte Carlo Tree Search can evaluate the move based on the win/loss results of randomly playing out the game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Retrieve Google Sheets data using SQL with DuckDB&#39;s Go client</title>
      <link>https://www.sambaiz.net/en/article/508/</link>
      <pubDate>Wed, 13 Nov 2024 23:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/508/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://duckdb.org/&#34;&gt;DuckDB&lt;/a&gt; is an OSS that can quickly read and write CSV, JSON, and Parquet etc. using SQL.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install duckdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ duckdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1.1.3 19864453f7&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; usage hints.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connected to a transient in-memory database.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.open FILENAME&amp;#34;&lt;/span&gt; to reopen on a persistent database.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D SELECT * FROM read_csv_auto&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;test.csv&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;┌───────┬─────────┬─────────┐&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   a   │    b    │    c    │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ int64 │ varchar │ varchar │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├───────┼─────────┼─────────┤&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt; │ aaa     │ bbb     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt; │ aaa     │ ccc     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt; │ bbb     │ ddd     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;40&lt;/span&gt; │ bbb     │ eee     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└───────┴─────────┴─────────┘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In addition to CLI, there are &lt;a href=&#34;https://duckdb.org/docs/api/overview&#34;&gt;clients&lt;/a&gt; for Go, Swift, &lt;a href=&#34;https://duckdb.org/docs/api/wasm/overview.html&#34;&gt;WASM&lt;/a&gt;, and others, so it can be used in a variety of environments.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up a Go development environment in Neovim</title>
      <link>https://www.sambaiz.net/en/article/502/</link>
      <pubDate>Sun, 03 Nov 2024 23:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/502/</guid>
      <description>&lt;h3 id=&#34;lsp-client-configuration-nvim-lspconfighttpsgithubcomneovimnvim-lspconfig&#34;&gt;LSP Client Configuration (&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;)&lt;/h3&gt;&#xA;&lt;p&gt;Install gopls, LSP server for Go.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go install golang.org/x/tools/gopls@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gopls version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;golang.org/x/tools/gopls v0.16.2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since Neovim has a &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;built-in&lt;/a&gt; LSP client, it works by simply passing the gopls configuration from nvim-lspconfig.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/502/images/lsp.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/502/images/lsp_hu6085142330394253649.png&#34; width=&#34;600&#34; height=&#34;194&#34; alt=&#34;Syntax check&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;Set it up to apply &lt;a href=&#34;https://github.com/golang/tools/blob/master/gopls/doc/vim.md#neovim-imports&#34;&gt;formatting on save&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim.api.nvim_create_autocmd(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;BufWritePre&amp;#34;&lt;/span&gt;, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pattern &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*.go&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  callback &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;function&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; params &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; vim.lsp.util.make_range_params()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params.context &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {only &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;source.organizeImports&amp;#34;&lt;/span&gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- buf_request_sync defaults to a 1000ms timeout. Depending on your&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- machine and codebase, you may want longer. Add an additional&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- argument after params if you find that you have to write the file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- twice for changes to be saved.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;-- E.g., vim.lsp.buf_request_sync(0, &amp;#34;textDocument/codeAction&amp;#34;, params, 3000)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; vim.lsp.buf_request_sync(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;textDocument/codeAction&amp;#34;&lt;/span&gt;, params)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; cid, res &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; pairs(result &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; {}) &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, r &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; pairs(res.result &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; {}) &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; r.edit &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;local&lt;/span&gt; enc &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (vim.lsp.get_client_by_id(cid) &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; {}).offset_encoding &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utf-16&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          vim.lsp.util.apply_workspace_edit(r.edit, enc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vim.lsp.buf.format({async &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Set up keymaps for actions like jumping to definitions. C-o to go back and C-i to go forward.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Benchmarking sync/atomic, a low-level package for atomic memory access in Go</title>
      <link>https://www.sambaiz.net/en/article/498/</link>
      <pubDate>Mon, 23 Sep 2024 23:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/498/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/sync/atomic&#34;&gt;sync/atomic&lt;/a&gt; is a low-level package for atomically reading and writing memory in Go. In the case of arm64, CPU instructions such as &lt;a href=&#34;https://developer.arm.com/documentation/ddi0602/2024-06/Base-Instructions/LDADD--LDADDA--LDADDAL--LDADDL--Atomic-add-on-word-or-doubleword-in-memory-&#34;&gt;LDADDALD&lt;/a&gt; that manipulate memory atomically are &lt;a href=&#34;https://github.com/golang/go/blob/go1.23.1/src/internal/runtime/atomic/atomic_arm64.s#L269&#34;&gt;executed&lt;/a&gt;. When reading and writing values from multiple goroutines, the usual method is to communicate via a channel or lock with sync.Mutex, so I have not had the opportunity to call the functions of this package, which require careful handling. However, it is called by libraries such as &lt;a href=&#34;https://github.com/prometheus/client_golang/blob/v1.20.4/prometheus/counter.go#L152&#34;&gt;Prometheus Go client&lt;/a&gt;, and I was curious to see how different it is, so I ran some benchmarks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adjusting GC frequency in Go with GOGC and GOMEMLIMIT and checking the behavior with trace</title>
      <link>https://www.sambaiz.net/en/article/477/</link>
      <pubDate>Sat, 06 Apr 2024 20:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/477/</guid>
      <description>&lt;p&gt;According to &lt;a href=&#34;https://go.dev/doc/gc-guide&#34;&gt;A Guide to the Go Garbage Collector&lt;/a&gt;, GC in Go is performed with a way called mark-sweep, which marks objects that are referenced by root objects such as global and local variables recursively, and sweeps not marked ones. The &lt;a href=&#34;https://go.dev/doc/gc-guide#Understanding_costs&#34;&gt;cost&lt;/a&gt; increases as the heap size, but since it targets not only newly allocated memory but also existing memory with a long lifetime, reducing the frequency can reduce the load on the CPU.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Live reload Go application running on local K8s using air and remote debug using delve from VSCode</title>
      <link>https://www.sambaiz.net/en/article/470/</link>
      <pubDate>Wed, 21 Feb 2024 19:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/470/</guid>
      <description>&lt;h2 id=&#34;live-reload-using-air&#34;&gt;Live reload using air&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cosmtrek/air&#34;&gt;air&lt;/a&gt; is a tool that performs live reload for Go applications.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go install github.com/cosmtrek/air@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;air init makes a &lt;a href=&#34;https://github.com/cosmtrek/air/blob/v1.49.0/air_example.toml&#34;&gt;settings file&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ air init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .air.toml &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;tmp_dir&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tmp&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;build&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;args_bin&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bin&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./tmp/main&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;go build -o ./tmp/main .&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;delay&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For server code as follows,&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;os/signal&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;syscall&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;pingHandler&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;http.Request) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; w.&lt;span style=&#34;color:#50fa7b&#34;&gt;Write&lt;/span&gt;([]&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;http.&lt;span style=&#34;color:#50fa7b&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/ping&amp;#34;&lt;/span&gt;, pingHandler)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Listening on port 5051&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;log.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(http.&lt;span style=&#34;color:#50fa7b&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.0.0.0:5051&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ctx, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; signal.&lt;span style=&#34;color:#50fa7b&#34;&gt;NotifyContext&lt;/span&gt;(context.&lt;span style=&#34;color:#50fa7b&#34;&gt;Background&lt;/span&gt;(), syscall.SIGINT, syscall.SIGTERM)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;ctx.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;running air, when it detects file changes with &lt;a href=&#34;https://github.com/fsnotify/fsnotify&#34;&gt;fsnotify&lt;/a&gt;, it builds code and restarts the process.&#xA;With WSL and Docker for Mac, where support for inotify is not complete, some tools don&amp;rsquo;t work or some settings like &lt;a href=&#34;https://github.com/eradman/entr?tab=readme-ov-file#docker-and-wsl&#34;&gt;ENTR_INOTIFY_WORKAROUND&lt;/a&gt; may be required, but air works without any special effort.&lt;/p&gt;</description>
    </item>
    <item>
      <title>git pull a private repository on docker build by mounting 1Password SSH agent</title>
      <link>https://www.sambaiz.net/en/article/462/</link>
      <pubDate>Wed, 27 Dec 2023 19:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/462/</guid>
      <description>&lt;p&gt;When building a docker image, it may need to pull a private repository.&#xA;Mounting a secret key as a secret works, but someone may be using an SSH agent such as &lt;a href=&#34;https://developer.1password.com/docs/ssh/agent/compatibility/#ssh-auth-sock&#34;&gt;1Password&lt;/a&gt;&amp;rsquo;s one.&#xA;Specifying the SSH agent&amp;rsquo;s socket or the key as &lt;a href=&#34;https://docs.docker.com/build/building/context/#private-repositories&#34;&gt;&amp;ndash;ssh&lt;/a&gt;,&#xA;Dockerfile doesn&amp;rsquo;t need to care about the difference.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/258/&#34;&gt;Buildkitとは - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;SSH_AUTH_SOCK is referred by default.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;SSH_AUTH_SOCK&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;HOME&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker build --ssh default .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, by &amp;ndash;mount=type=ssh, you can clone a private repository as the host do.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find bugs caused by unexpected input in Go with Fuzzing</title>
      <link>https://www.sambaiz.net/en/article/461/</link>
      <pubDate>Sun, 17 Dec 2023 13:24:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/461/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/security/fuzz/&#34;&gt;Fuzzing&lt;/a&gt; is a test method that uses random data as input, and is supported since Go 1.18.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s test the following FizzBuzz function.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FizzBuzz&lt;/span&gt;(n &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;FizzBuzz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Fizz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Buzz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; strconv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Itoa&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(n))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, we do a table-driven test.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestFizzBuzz&lt;/span&gt;(t &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;testing.T) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;testcases &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;title &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;in    &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;out   &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A multiple of 3 returns Fizz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Fizz&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A multiple of 5 returns Buzz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Buzz&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A multiple of 3 and 5 returns FizzBuzz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;FizzBuzz&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Otherwise returns number string&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, testcase &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; testcases {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Run&lt;/span&gt;(testcase.title, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(t &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;testing.T) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;ret &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FizzBuzz&lt;/span&gt;(testcase.in)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; ret &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; testcase.out {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;t.&lt;span style=&#34;color:#50fa7b&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;FizzBuzz(%d) = %s, want %s&amp;#34;&lt;/span&gt;, testcase.in, ret, testcase.out)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we run it, all test cases pass, so is it okay to say that there is no problem?&#xA;In fact, this function has a bug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Read container/heap package in Go</title>
      <link>https://www.sambaiz.net/en/article/456/</link>
      <pubDate>Sun, 05 Nov 2023 21:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/456/</guid>
      <description>&lt;p&gt;Go standard library has &lt;a href=&#34;https://pkg.go.dev/container/heap&#34;&gt;container/heap&lt;/a&gt; package which can be used to implement min/max heap and priority queue using this interface.&#xA;It was implemented long time ago and there is a &lt;a href=&#34;https://github.com/golang/go/issues/47632&#34;&gt;proposal&lt;/a&gt; to use Generics.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/253/&#34;&gt;C++ STLのContainersとAlgorithms - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Interface &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sort.Interface&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Push&lt;/span&gt;(x any) &lt;span style=&#34;color:#6272a4&#34;&gt;// add x as element Len()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Pop&lt;/span&gt;() any   &lt;span style=&#34;color:#6272a4&#34;&gt;// remove and return element Len() - 1.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Try to use IntHeap in the document. In Pop(), it takes the value pointed by the pointer, processes the slice, and assigns it to itself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implement AVL tree, self-balancing binary search tree, in Go and confirm that the height is kept minimum</title>
      <link>https://www.sambaiz.net/en/article/439/</link>
      <pubDate>Sat, 25 Feb 2023 00:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/439/</guid>
      <description>&lt;p&gt;AVL tree is one of the self-balancing binary search trees, which is a kind of binary search tree, and by keeping the height to a minimum, the computational complexity for operations can be reduced.&#xA;Each time the tree is changed, if there is a height difference of 2 or more between left and right trees, they are rebalanced with rotation.&#xA;Another self-balancing binary search tree example is a red-black tree.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compare the speed of calling a shared library built in Go from Java with JNI and JNA</title>
      <link>https://www.sambaiz.net/en/article/437/</link>
      <pubDate>Sun, 29 Jan 2023 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/437/</guid>
      <description>&lt;p&gt;JNI (Java Native Interface) is an interface to enable Java to call native codes in C/C++ executed outside JVM and enable native codes to call codes in Java.&#xA;This makes it possible to speed up heavy processing and share processing across multiple platforms.&#xA;&lt;a href=&#34;https://github.com/java-native-access/jna&#34;&gt;JNA (Java Native Access)&lt;/a&gt;, a library, is also available to call native codes from Java, and it is easier to use and makes effort to minimize the overhead, but it seems to be slower than JNI.&#xA;So, I tried comparing the speed with actually calling a simple shared library with JNI and JNA.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implement scripts running in Alfred Workflows with deanishe/awgo</title>
      <link>https://www.sambaiz.net/en/article/418/</link>
      <pubDate>Mon, 26 Sep 2022 12:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/418/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/deanishe/awgo&#34;&gt;deanishe/awgo&lt;/a&gt; is a library to implement scripts running in Alfred Workflows.&#xA;It enables to output &lt;a href=&#34;https://www.alfredapp.com/help/workflows/inputs/script-filter/json/&#34;&gt;Script Filter JSON&lt;/a&gt; to pass values to the next object with &lt;a href=&#34;https://pkg.go.dev/github.com/deanishe/awgo#Feedback.NewItem&#34;&gt;NewItem()&lt;/a&gt;,&#xA;access &lt;a href=&#34;https://pkg.go.dev/github.com/deanishe/awgo/keychain&#34;&gt;keychain&lt;/a&gt;, and check logs with &lt;a href=&#34;https://pkg.go.dev/github.com/deanishe/awgo#MagicAction&#34;&gt;MagicAction&lt;/a&gt; by calling wf.Args() and passing workflow:log as arguments.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/418/images/run.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/418/images/run_hu17116032671250083813.png&#34; width=&#34;600&#34; height=&#34;182&#34; alt=&#34;Execution example&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;The code is executed every time a character is typed by default, so it would be better to cache results of API calls, etc. as follows.&#xA;There are full codes in &lt;a href=&#34;https://github.com/sambaiz/test-alfred-workflow&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Call Go functions from browser JavaScript with WebAssembly</title>
      <link>https://www.sambaiz.net/en/article/412/</link>
      <pubDate>Sat, 30 Jul 2022 00:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/412/</guid>
      <description>&lt;p&gt;Pushing the button, the function implemented in Go is called, and it updates the value of text.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/412/images/wasm.gif&#34; width=&#34;487&#34; height=&#34;223&#34; alt=&#34;the value is updated by the Go function&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version go1.18 darwin/amd64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go can refer variables and call functions in js with &lt;a href=&#34;https://pkg.go.dev/syscall/js&#34;&gt;syscall/js&lt;/a&gt; package.&#xA;By breaking changes of &lt;a href=&#34;https://go.dev/doc/go1.12#minor_library_changes&#34;&gt;Go 1.12&lt;/a&gt;, NewCallback() is renamed to FuncOf().&#xA;The function must return the value that has a type &lt;a href=&#34;https://pkg.go.dev/syscall/js#ValueOf&#34;&gt;js.ValueOf()&lt;/a&gt; expects, so if returns a struct, an error occurs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How faster is sending/receiving values by UNIX domain socket than starting new processes when executing commands</title>
      <link>https://www.sambaiz.net/en/article/404/</link>
      <pubDate>Fri, 06 May 2022 20:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/404/</guid>
      <description>&lt;p&gt;For example when some procedures are written in different languages and they are repeatedly executed as different commands, overhead such as memory allocation occurs when creating a process.&#xA;One of solutions to avoid this is to keep the process running and pass input/output value with interprocess communication.&#xA;In this article I make a command in Go and benchmark to see how much the throughput differs.&lt;/p&gt;&#xA;&lt;p&gt;For speedy interprocess communication on UNIX, besides shared memory, pipes and UNIX domain sockets are used.&#xA;For example, newrelic-lambda-extension receives application events from pipe and send it.&#xA;Since both input and output are needed this time, I use UNIX domain socket instead of pipe which can communicate only in one direction. The entire codes are on &lt;a href=&#34;https://github.com/sambaiz/start-process-vs-unix-domain-socket&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Make asking about codes and debugging efficient with New Relic CodeStream</title>
      <link>https://www.sambaiz.net/en/article/403/</link>
      <pubDate>Wed, 04 May 2022 22:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/403/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://newrelic.com/codestream&#34;&gt;New Relic CodeStream&lt;/a&gt; is a plugin which is useful to ask about codes, create issue or PR and debug on IDE for IntelliJ, VSCode and so on.&lt;/p&gt;&#xA;&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.newrelic.com/docs/codestream/start-here/install-codestream&#34;&gt;Install&lt;/a&gt; the plugin to IDE and set the integretion.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/403/images/integration.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/403/images/integration_hu12558504846555602663.png&#34; width=&#34;327&#34; height=&#34;370&#34; alt=&#34;Integration settings&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;h2 id=&#34;comment&#34;&gt;Comment&lt;/h2&gt;&#xA;&lt;p&gt;You can comment to code blocks to ask about it, or create an issue.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/403/images/comment.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/403/images/comment_hu17651968848750181760.png&#34; width=&#34;600&#34; height=&#34;283&#34; alt=&#34;Comment&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;If Slack integration is set, following post is submited.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Query resources with NerdGraph, New Relic&#39;s GraphQL API</title>
      <link>https://www.sambaiz.net/en/article/400/</link>
      <pubDate>Fri, 01 Apr 2022 22:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/400/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/&#34;&gt;NerdGraph&lt;/a&gt; is New Relic&amp;rsquo;s GraphQL API and it can be used for querying resources or migrating it.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST https://api.newrelic.com/graphql &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;-H &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;-H &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;API-Key: *****&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;-d &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;{ &amp;#34;query&amp;#34;:  &amp;#34;{ requestContext { userId apiKey } actor { user { name } } }&amp;#34; }&amp;#39;&lt;/span&gt; | jq&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;actor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Taiki Sakamoto&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;requestContext&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;apiKey&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*****&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*****&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If select resources in &lt;a href=&#34;https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/#explorer&#34;&gt;GraphiQL explorer&lt;/a&gt;, the query is generated.&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/400/images/graphql-explorer.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/400/images/graphql-explorer_hu5998984399080850515.png&#34; width=&#34;600&#34; height=&#34;226&#34; alt=&#34;GraphiQL explorer&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;It can be also executed from the client library.&#xA;&lt;a href=&#34;https://github.com/newrelic/newrelic-client-go/blob/v0.74.2/pkg/users/types.go#L11&#34;&gt;Structs&lt;/a&gt; are auto generated by &lt;a href=&#34;https://github.com/newrelic/tutone&#34;&gt;tutone&lt;/a&gt;&#xA;with GraphQL schema introspection and &lt;a href=&#34;https://github.com/newrelic/newrelic-client-go/blob/v0.74.2/templates/typegen/types.go.tmpl&#34;&gt;template&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitor infrastructure and applications with New Relic</title>
      <link>https://www.sambaiz.net/en/article/399/</link>
      <pubDate>Wed, 30 Mar 2022 19:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/399/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://newrelic.com/&#34;&gt;New Relic&lt;/a&gt; is a SaaS that monitors infrastructure and applications, and there is Datadog as a similar service.&#xA;It seems that the &lt;a href=&#34;https://newrelic.com/pricing&#34;&gt;pricing plans&lt;/a&gt; were &lt;a href=&#34;https://newrelic.com/jp/blog/nerdlog/new-relic-one-observability-made-simple&#34;&gt;changed&lt;/a&gt; drastically in 2020, and it charges according to the transfer volume and the number of admin users. Therefore compared to Datadog, which &lt;a href=&#34;https://www.datadoghq.com/ja/pricing/&#34;&gt;charges&lt;/a&gt; for hosts and additional features, there is an advantage when managing a large number of instances with a small number of people.&#xA;And Datadog pricing plans are relatively complex and hard to estimate how much the bill will be in an environment where the number of instances increases and decreases frequently, while New Relic&amp;rsquo;s plans are easy.&#xA;Even if you try to new features, the unit price will not increase, so you can easily try it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
