<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on sambaiz-net</title>
    <link>https://www.sambaiz.net/en/tags/golang/</link>
    <description>Recent content in Golang on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Sat, 06 Apr 2024 20:45:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/en/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Adjusting GC frequency in Go with GOGC and GOMEMLIMIT and checking the behavior with trace</title>
      <link>https://www.sambaiz.net/en/article/477/</link>
      <pubDate>Sat, 06 Apr 2024 20:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/477/</guid>
      <description>According to A Guide to the Go Garbage Collector, GC in Go is performed with a way called mark-sweep, which marks objects that are referenced by root objects such as global and local variables recursively, and sweeps not marked ones. The cost increases as the heap size, but since it targets not only newly allocated memory but also existing memory with a long lifetime, reducing the frequency can reduce the load on the CPU.</description>
    </item>
    <item>
      <title>Live reload Go application running on local K8s using air and remote debug using delve from VSCode</title>
      <link>https://www.sambaiz.net/en/article/470/</link>
      <pubDate>Wed, 21 Feb 2024 19:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/470/</guid>
      <description>Live reload using air air is a tool that performs live reload for Go applications. $ go install github.com/cosmtrek/air@latest air init makes a settings file. $ air init $ cat .air.toml root = &amp;#34;.&amp;#34; tmp_dir = &amp;#34;tmp&amp;#34; [build] args_bin = [] bin = &amp;#34;./tmp/main&amp;#34; cmd = &amp;#34;go build -o ./tmp/main .&amp;#34; delay = 1000 ... For server code as follows, package main import ( &amp;#34;context&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os/signal&amp;#34; &amp;#34;syscall&amp;#34; )</description>
    </item>
    <item>
      <title>git pull a private repository on docker build by mounting 1Password SSH agent</title>
      <link>https://www.sambaiz.net/en/article/462/</link>
      <pubDate>Wed, 27 Dec 2023 19:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/462/</guid>
      <description>When building a docker image, it may need to pull a private repository. Mounting a secret key as a secret works, but someone may be using an SSH agent such as 1Password&amp;rsquo;s one. Specifying the SSH agent&amp;rsquo;s socket or the key as &amp;ndash;ssh, Dockerfile doesn&amp;rsquo;t need to care about the difference. Buildkitとは - sambaiz-net SSH_AUTH_SOCK is referred by default. $ export</description>
    </item>
    <item>
      <title>Find bugs caused by unexpected input in Go with Fuzzing</title>
      <link>https://www.sambaiz.net/en/article/461/</link>
      <pubDate>Sun, 17 Dec 2023 13:24:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/461/</guid>
      <description>Fuzzing is a test method that uses random data as input, and is supported since Go 1.18.&#xA;Let&amp;rsquo;s test the following FizzBuzz function.&#xA;func FizzBuzz(n uint64) string { if n%3 == 0 { if n%5 == 0 { return &amp;#34;FizzBuzz&amp;#34; } return &amp;#34;Fizz&amp;#34; } if n%5 == 0 { return &amp;#34;Buzz&amp;#34; } return strconv.Itoa(int(n)) } First, we do a table-driven test.&#xA;func TestFizzBuzz(t *testing.T) { testcases := []struct { title string in uint64 out string }{ {&amp;#34;A multiple of 3 returns Fizz&amp;#34;, 3, &amp;#34;Fizz&amp;#34;}, {&amp;#34;A multiple of 5 returns Buzz&amp;#34;, 5, &amp;#34;Buzz&amp;#34;}, {&amp;#34;A multiple of 3 and 5 returns FizzBuzz&amp;#34;, 15, &amp;#34;FizzBuzz&amp;#34;}, {&amp;#34;Otherwise returns number string&amp;#34;, 1, &amp;#34;1&amp;#34;}, } for _, testcase := range testcases { t.</description>
    </item>
    <item>
      <title>Read container/heap package in Go</title>
      <link>https://www.sambaiz.net/en/article/456/</link>
      <pubDate>Sun, 05 Nov 2023 21:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/456/</guid>
      <description>Go standard library has container/heap package which can be used to implement min/max heap and priority queue using this interface. It was implemented long time ago and there is a proposal to use Generics. C++ STLのContainersとAlgorithms - sambaiz-net type Interface interface { sort.Interface Push(x any) //</description>
    </item>
    <item>
      <title>Implement AVL tree, self-balancing binary search tree, in Go and confirm that the height is kept minimum</title>
      <link>https://www.sambaiz.net/en/article/439/</link>
      <pubDate>Sat, 25 Feb 2023 00:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/439/</guid>
      <description>AVL tree is one of the self-balancing binary search trees, which is a kind of binary search tree, and by keeping the height to a minimum, the computational complexity for operations can be reduced. Each time the tree is changed, if there is a height difference of 2 or more between left and right trees, they are rebalanced with rotation. Another self-balancing binary search tree example is a red-black tree.</description>
    </item>
    <item>
      <title>Compare the speed of calling a shared library built in Go from Java with JNI and JNA</title>
      <link>https://www.sambaiz.net/en/article/437/</link>
      <pubDate>Sun, 29 Jan 2023 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/437/</guid>
      <description>JNI (Java Native Interface) is an interface to enable Java to call native codes in C/C++ executed outside JVM and enable native codes to call codes in Java. This makes it possible to speed up heavy processing and share processing across multiple platforms. JNA (Java Native Access), a library, is also available to call native codes from Java, and it is easier to use and makes effort to minimize the</description>
    </item>
    <item>
      <title>Implement scripts running in Alfred Workflows with deanishe/awgo</title>
      <link>https://www.sambaiz.net/en/article/418/</link>
      <pubDate>Mon, 26 Sep 2022 12:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/418/</guid>
      <description>deanishe/awgo is a library to implement scripts running in Alfred Workflows. It enables to output Script Filter JSON to pass values to the next object with NewItem(), access keychain, and check logs with MagicAction by calling wf.Args() and passing workflow:log as arguments. The code is executed every time a character is typed by default, so it would be better to cache results of API calls, etc. as follows. There are</description>
    </item>
    <item>
      <title>Call Go functions from browser JavaScript with WebAssembly</title>
      <link>https://www.sambaiz.net/en/article/412/</link>
      <pubDate>Sat, 30 Jul 2022 00:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/412/</guid>
      <description>Pushing the button, the function implemented in Go is called, and it updates the value of text.&#xA;$ go version go version go1.18 darwin/amd64 Go can refer variables and call functions in js with syscall/js package. By breaking changes of Go 1.12, NewCallback() is renamed to FuncOf(). The function must return the value that has a type js.ValueOf() expects, so if returns a struct, an error occurs.&#xA;package main import ( &amp;#34;strconv&amp;#34; &amp;#34;syscall/js&amp;#34; ) func increment(this js.</description>
    </item>
    <item>
      <title>How faster is sending/receiving values by UNIX domain socket than starting new processes when executing commands</title>
      <link>https://www.sambaiz.net/en/article/404/</link>
      <pubDate>Fri, 06 May 2022 20:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/404/</guid>
      <description>For example when some procedures are written in different languages and they are repeatedly executed as different commands, overhead such as memory allocation occurs when creating a process. One of solutions to avoid this is to keep the process running and pass input/output value with interprocess communication. In this article I make a command in Go and benchmark to see how much the throughput differs.&#xA;For speedy interprocess communication on UNIX, besides shared memory, pipes and UNIX domain sockets are used.</description>
    </item>
    <item>
      <title>Make asking about codes and debugging efficient with New Relic CodeStream</title>
      <link>https://www.sambaiz.net/en/article/403/</link>
      <pubDate>Wed, 04 May 2022 22:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/403/</guid>
      <description>New Relic CodeStream is a plugin which is useful to ask about codes, create issue or PR and debug on IDE for IntelliJ, VSCode and so on. Install Install the plugin to IDE and set the integretion. Comment You can comment to code blocks to ask about it, or create an issue. If Slack integration is set, following post is submited. By &amp;ldquo;Open in IDE&amp;rdquo; button, you can jump to</description>
    </item>
    <item>
      <title>Query resources with NerdGraph, New Relic&#39;s GraphQL API</title>
      <link>https://www.sambaiz.net/en/article/400/</link>
      <pubDate>Fri, 01 Apr 2022 22:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/400/</guid>
      <description>NerdGraph is New Relic&amp;rsquo;s GraphQL API and it can be used for querying resources or migrating it.&#xA;curl -X POST https://api.newrelic.com/graphql \ -H &amp;#39;Content-Type: application/json&amp;#39; \ -H &amp;#39;API-Key: *****&amp;#39; \ -d &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;{ requestContext { userId apiKey } actor { user { name } } }&amp;#34; }&amp;#39; | jq { &amp;#34;data&amp;#34;: { &amp;#34;actor&amp;#34;: { &amp;#34;user&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;Taiki Sakamoto&amp;#34; } }, &amp;#34;requestContext&amp;#34;: { &amp;#34;apiKey&amp;#34;: &amp;#34;*****&amp;#34;, &amp;#34;userId&amp;#34;: &amp;#34;*****&amp;#34; } } } If select resources in GraphiQL explorer, the query is generated.</description>
    </item>
    <item>
      <title>Monitor infrastructure and applications with New Relic</title>
      <link>https://www.sambaiz.net/en/article/399/</link>
      <pubDate>Wed, 30 Mar 2022 19:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/en/article/399/</guid>
      <description>New Relic is a SaaS that monitors infrastructure and applications, and there is Datadog as a similar service. It seems that the pricing plans were changed drastically in 2020, and it charges according to the transfer volume and the number of admin users. Therefore compared to Datadog, which charges for hosts and additional features, there is an advantage when managing a large number of instances with a small number of</description>
    </item>
  </channel>
</rss>
