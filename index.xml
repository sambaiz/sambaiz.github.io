<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sambaiz-net</title>
    <link>https://www.sambaiz.net/</link>
    <description>Recent content on sambaiz-net</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>sambaiz-net</copyright>
    <lastBuildDate>Thu, 30 Jan 2025 20:31:00 +0900</lastBuildDate>
    <atom:link href="https://www.sambaiz.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Iceberg テーブルを Glue Data Catalog に登録して Athena や Snowflake からクエリする</title>
      <link>https://www.sambaiz.net/article/525/</link>
      <pubDate>Thu, 30 Jan 2025 20:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/525/</guid>
      <description>&lt;p&gt;Glue Data Catalog に Iceberg テーブルを登録すると、他のテーブルと同様に Athena や EMR などから参照できるほか、Snowflake ではスキーマを渡すことなく &lt;a href=&#34;https://docs.snowflake.com/en/user-guide/tables-iceberg&#34;&gt;ICEBERG TABLE&lt;/a&gt; を作成することができ、メタデータの二重管理を避けることができる。また&lt;a href=&#34;https://aws.amazon.com/jp/blogs/aws/aws-glue-data-catalog-now-supports-automatic-compaction-of-apache-iceberg-tables/&#34;&gt;自動で compaction する&lt;/a&gt;機能まで付いてくる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>キーペア認証で Snowflake CLI や Terraform を実行する</title>
      <link>https://www.sambaiz.net/article/524/</link>
      <pubDate>Tue, 28 Jan 2025 01:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/524/</guid>
      <description>&lt;p&gt;Snowflake CLI はじめ各種クライアントライブラリは &lt;a href=&#34;https://docs.snowflake.com/en/developer-guide/snowflake-cli/connecting/configure-connections&#34;&gt;user_name / password&lt;/a&gt; による認証に加えてキーペアでの認証にも&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/key-pair-auth#supported-snowflake-clients&#34;&gt;対応している&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;Snowflake CLI を&lt;a href=&#34;https://docs.snowflake.com/en/developer-guide/snowflake-cli/installation/installation#label-snowcli-install-macos-installer&#34;&gt;インストール&lt;/a&gt;する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew tap snowflakedb/snowflake-cli&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install snowflake-cli&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ snow --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Snowflake CLI version: 3.3.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ユーザーに紐づける鍵は 2048 bits 以上の RSA 鍵である&lt;a href=&#34;https://docs.snowflake.com/ja/user-guide/key-pair-auth#overview&#34;&gt;必要があり&lt;/a&gt; ed25519 には現状対応していない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spark で Iceberg テーブルを作成しスキーマや write mode を変更してデータを書き込みメタデータの内容を確認する</title>
      <link>https://www.sambaiz.net/article/523/</link>
      <pubDate>Sat, 25 Jan 2025 23:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/523/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://iceberg.apache.org/&#34;&gt;Apache Iceberg&lt;/a&gt; は大規模なデータの処理を効率的に行えるようにするテーブルフォーマット。元データを書き換えることなくテーブルのスキーマを変更できる Schema Evolution、タイムトラベルや Hidden Partitioning によるディレクトリに依存しない Pruning といったことを可能にし、&lt;a href=&#34;https://iceberg.apache.org/spark-quickstart/&#34;&gt;Spark&lt;/a&gt; や &lt;a href=&#34;https://trino.io/docs/current/connector/iceberg.html&#34;&gt;Trino&lt;/a&gt;、&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/tables-iceberg&#34;&gt;Snowflake&lt;/a&gt; など様々なシステムから参照できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BigQuery から Cloud Run functions を呼び出して任意のライブラリやサービスを用いた処理を行う</title>
      <link>https://www.sambaiz.net/article/522/</link>
      <pubDate>Tue, 21 Jan 2025 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/522/</guid>
      <description>&lt;p&gt;BigQuery には SQL または JavaScript で定義できる &lt;a href=&#34;https://cloud.google.com/bigquery/docs/user-defined-functions&#34;&gt;User-defined functions&lt;/a&gt; のほかに、Athena の UDF のように Cloud Run や Cloud Run functions (&lt;a href=&#34;https://cloud.google.com/blog/products/serverless/google-cloud-functions-is-now-cloud-run-functions?hl=en&#34;&gt;旧 Cloud Functions 2nd gen&lt;/a&gt;) を呼び出す &lt;a href=&#34;https://cloud.google.com/bigquery/docs/remote-functions&#34;&gt;remote functions&lt;/a&gt; があって、任意のライブラリやサービスを用いて処理を行うことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Streamlit でウィジェットの値を元にデータを描画するアプリケーションを作って公開する</title>
      <link>https://www.sambaiz.net/article/521/</link>
      <pubDate>Sat, 18 Jan 2025 14:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/521/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://streamlit.io/&#34;&gt;Streamlit&lt;/a&gt; は Python でデータアプリケーションを開発するためのツール。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install streamlit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ streamlit --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Streamlit, version 1.41.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;button や slider、radio といった &lt;a href=&#34;https://docs.streamlit.io/develop/api-reference/widgets&#34;&gt;widgets&lt;/a&gt; で入力した値をもとに Dataframe を作って write() や line_chart() で描画できる。widgets の値を変更するたびに&lt;a href=&#34;https://docs.streamlit.io/get-started/fundamentals/main-concepts#data-flow&#34;&gt;更新が走る&lt;/a&gt;ので、必要に応じて session_state に値を保持したり重い処理の結果を&lt;a href=&#34;https://docs.streamlit.io/develop/concepts/architecture/caching&#34;&gt;キャッシュ&lt;/a&gt;したりする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCP の Workload Identity Federation を Terraform で設定してサービスアカウントのキーを作成せずに AWS から API を呼ぶ</title>
      <link>https://www.sambaiz.net/article/520/</link>
      <pubDate>Sat, 11 Jan 2025 14:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/520/</guid>
      <description>&lt;p&gt;GCP の &lt;a href=&#34;https://cloud.google.com/iam/docs/workload-identity-federation&#34;&gt;Workload Identity Federation&lt;/a&gt; は GCP 外のワークロードにサービスアカウントのキーを共有することなく一時的な権限を与えられる機能。&lt;/p&gt;&#xA;&lt;p&gt;なお、GCP から AWS は &lt;a href=&#34;https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken&#34;&gt;サービスアカウントの OIDC トークン&lt;/a&gt;による &lt;a href=&#34;https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/assume-role-with-web-identity.html&#34;&gt;AssumeRoleWithWebIdentity&lt;/a&gt; が&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html&#34;&gt;行える&lt;/a&gt;。これにより &lt;a href=&#34;https://cloud.google.com/storage-transfer/docs/source-amazon-s3?hl=ja#federated_identity&#34;&gt;Cloud Storage Transfer Service&lt;/a&gt; など一部のマネージドサービスは &lt;a href=&#34;https://cloud.google.com/storage-transfer/docs/reference/rest/v1/TransferSpec#AwsS3Data&#34;&gt;Role の Arn を渡す&lt;/a&gt;だけで AWS にアクセスできるようになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL の Lint ツール SQLFluff にカスタムルールを追加する</title>
      <link>https://www.sambaiz.net/article/519/</link>
      <pubDate>Thu, 02 Jan 2025 11:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/519/</guid>
      <description>&lt;p&gt;SQL の Lint ツール sqlfluff にはプラグインで&lt;a href=&#34;https://docs.sqlfluff.com/en/2.2.0/developingrules.html&#34;&gt;カスタムルール&lt;/a&gt;を追加する仕組みがある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sqlfluff/sqlfluff/tree/main/plugins/sqlfluff-plugin-example&#34;&gt;example plugin&lt;/a&gt; を参考にプラグインを作る。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sqlfluff/sqlfluff/blob/2.2.0/src/sqlfluff/core/rules/base.py#L670&#34;&gt;BaseRule&lt;/a&gt; を継承した Rule_XXXX クラスに、ルールを評価して &lt;a href=&#34;https://github.com/sqlfluff/sqlfluff/blob/2.2.0/src/sqlfluff/core/rules/base.py#L72&#34;&gt;LintResult&lt;/a&gt; を返す &lt;a href=&#34;https://github.com/sqlfluff/sqlfluff/blob/2.2.0/src/sqlfluff/core/rules/base.py#L761&#34;&gt;_eval()&lt;/a&gt; を実装する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# my_custom_rules/rules.py&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; sqlfluff.core.rules &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BaseRule,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LintResult,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RuleContext,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; sqlfluff.core.rules.crawlers &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; SegmentSeekerCrawler&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Rule_Example_L001&lt;/span&gt;(BaseRule):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    test rule&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    groups &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;all&amp;#34;&lt;/span&gt;,)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    config_keywords &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;aaa&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    crawl_behaviour &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; SegmentSeekerCrawler({&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;select_clause&amp;#34;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    is_fix_compatible &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;()&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__init__(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt;kwargs)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;---- init ----&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parameter: aaa=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;aaa&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_eval&lt;/span&gt;(self, context: RuleContext):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;---- eval ----&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; seg &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; context&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;segment&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;segments:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(seg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get_type(), seg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;raw&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lower())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; seg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get_type() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;select_clause_element&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; seg&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;raw&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; LintResult(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    anchor&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;seg,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    description&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Don&amp;#39;t select b!&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;__init__.py の get_rules() でこのクラスを返す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Snowflake に S3 のデータをコピーしてクエリする</title>
      <link>https://www.sambaiz.net/article/518/</link>
      <pubDate>Tue, 31 Dec 2024 23:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/518/</guid>
      <description>&lt;p&gt;Snowflake はAWS、GCP、Azure上で動作するフルマネージドなデータプラットフォーム。カラムナフォーマットで&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/intro-key-concepts#database-storage&#34;&gt;データを持ち&lt;/a&gt;、各ノードが共有のデータセットの一部をローカルにキャッシュする&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/intro-key-concepts#snowflake-architecture&#34;&gt;ハイブリッドなシェアードナッシングアーキテクチャ&lt;/a&gt;でネットワークトラフィックを削減したり、自動でマイクロパーティションに切ってきめ細かなプルーニングを行うことで効率的に大規模なクエリを実行できる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/386/&#34;&gt;カラムナフォーマットParquetの構造とReadの最適化 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Hadoop クラスタなどのインフラストラクチャの面倒を見る必要がないこと以外にも、BigQuery のような&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/data-time-travel&#34;&gt;タイムトラベル&lt;/a&gt;や、アカウント間で容易に&lt;a href=&#34;https://docs.snowflake.com/en/user-guide/data-sharing-intro&#34;&gt;データを共有&lt;/a&gt;できる特長がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Airflow から Secrets Manager に格納されている Slack の認証情報を用いて通知を飛ばす</title>
      <link>https://www.sambaiz.net/article/517/</link>
      <pubDate>Fri, 27 Dec 2024 15:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/517/</guid>
      <description>&lt;p&gt;Airflow には外部サービスの認証情報を格納するオブジェクトとして &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/howto/connection.html&#34;&gt;Connections&lt;/a&gt; がある。&lt;/p&gt;&#xA;&lt;p&gt;UI から登録するほか AIRFLOW_CONN_(conn_id) 環境変数で与えたり、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# export AIRFLOW_CONN_SLACK_API_DEFAULT=&amp;#39;slack://:xoxb-*****@/&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn_id&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;slack_api_default&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn_type&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;slack&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;xoxb-*****&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# export AIRFLOW_CONN_SLACK_DEFAULT=&amp;#39;slackwebhook://:T00000000%2FB00000000%2FXXXXXXXXXXXXXXXXXXXXXXXX@/&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connection(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn_id&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;slack_default&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn_type&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;slackwebhook&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/secrets-backends/aws-secrets-manager.html&#34;&gt;AWS&lt;/a&gt; や &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow-providers-google/stable/secrets-backends/google-cloud-secret-manager-backend.html&#34;&gt;Google Cloud&lt;/a&gt; の Secrets Manager をバックエンドとすることもできる。Google Cloud ではデフォルトで airflow-connections-(conn_id) が参照される。Cloud Composer の場合環境変数では設定できず airflow_config_overrides に (section)-(name) を渡して設定し、apache-airflow-providers-slack をインストールする必要があった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BigQuery の INFORMATION_SCHEMA でコストが高いクエリを特定する</title>
      <link>https://www.sambaiz.net/article/516/</link>
      <pubDate>Fri, 20 Dec 2024 00:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/516/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/bigquery/docs/information-schema-jobs&#34;&gt;INFORMATION_SCHEMA.JOBS&lt;/a&gt; で実行されたクエリや total_bytes_ billed が取得できる。重複しないよう statement_type = &amp;ldquo;SCRIPT&amp;rdquo; を除く。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;CASE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;WHEN&lt;/span&gt; STARTS_WITH(job_id, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;materialized_view_refresh_&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;materialized_view_refresh&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;WHEN&lt;/span&gt; STARTS_WITH(job_id, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;scheduled_query_&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;scheduled_query&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;WHEN&lt;/span&gt; STARTS_WITH(job_id, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bquxjob_&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;bq user interface&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;other&amp;#39;&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; job_type,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user_email,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  query,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;state&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  total_bytes_billed &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/* USD / TB */&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; cost&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;region&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;us.INFORMATION_SCHEMA.JOBS&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;DATE&lt;/span&gt;(creation_time) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; DATE_SUB(&lt;span style=&#34;color:#ff79c6&#34;&gt;CURRENT_DATE&lt;/span&gt;(), &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;INTERVAL&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DAY&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; statement_type &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SCRIPT&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; total_bytes_billed &lt;span style=&#34;color:#ff79c6&#34;&gt;DESC&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;マテリアライズドビューの場合、クエリの値が CALL BQ.REFRESH_MATERIALIZED_VIEW(view_name) のような形式になるため、&lt;a href=&#34;https://cloud.google.com/bigquery/docs/information-schema-tables&#34;&gt;INFORMATION_SCHEMA.TABLES&lt;/a&gt; も見る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>モンテカルロ木探索 (MCTS) でどうぶつしょうぎのゲームAIを作る</title>
      <link>https://www.sambaiz.net/article/515/</link>
      <pubDate>Thu, 12 Dec 2024 01:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/515/</guid>
      <description>&lt;p&gt;モンテカルロ木探索 (Monte Carlo Tree Search; MCTS) は AlphaGo などのゲームAIで最適な行動を探索するのに用いられているアルゴリズム。同種のアルゴリズムとしては、相手が(自分にとって)最悪の手を常に打つと仮定したときの最良の手を網羅的に探索する Mini-Max 法や、それを枝刈りすることで効率化した αβ 法がある。これらの手法が途中盤面の評価値を与えてやる必要があるのに対して、モンテカルロ木探索はランダムにゲームを進めた結果の勝ち負けをもって評価することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>astronomer-cosmos で dbt を Airflow の TaskGroup として実行する</title>
      <link>https://www.sambaiz.net/article/514/</link>
      <pubDate>Tue, 03 Dec 2024 23:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/514/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/astronomer/astronomer-cosmos&#34;&gt;astronomer-cosmos&lt;/a&gt; は dbt を Airflow の TaskGroup として動すためのライブラリ。Airflow のスケジューリングや再実行機能を用いた、データ加工の前後で行うタスクを含む包括的なワークフローを構築することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>dbt の codegen で sources.yml や staging の model、schema.yml を自動生成する</title>
      <link>https://www.sambaiz.net/article/513/</link>
      <pubDate>Tue, 03 Dec 2024 15:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/513/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hub.getdbt.com/dbt-labs/codegen/latest/&#34;&gt;codegen&lt;/a&gt; は各種ファイルを自動生成する &lt;a href=&#34;https://github.com/dbt-labs/dbt-codegen/tree/v0.13.0-b1/macros&#34;&gt;macro&lt;/a&gt; を提供する公式の &lt;a href=&#34;https://docs.getdbt.com/docs/build/packages&#34;&gt;package&lt;/a&gt;。Best practice guides でおすすめされている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/512/&#34;&gt;dbt の Best practice guides におけるモデルのレイヤー分け - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;packages.yml に追加して dbt deps でインストールする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>dbt の Best practice guides におけるモデルのレイヤー分け</title>
      <link>https://www.sambaiz.net/article/512/</link>
      <pubDate>Sun, 01 Dec 2024 12:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/512/</guid>
      <description>&lt;p&gt;dbt Labs がどのように dbt プロジェクトを構築しているかを記した &lt;a href=&#34;https://docs.getdbt.com/best-practices&#34;&gt;Best practice guides&lt;/a&gt; がある。その中の &lt;a href=&#34;https://docs.getdbt.com/best-practices/how-we-structure/1-guide-overview&#34;&gt;How we structure our dbt projects&lt;/a&gt; には、フォルダの切り方やファイル名を考えるのに決断リソースを割かなくて良いように、するべきことやするべきでないこと、その理由が示されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BigQueryのタイムトラベルやスナップショットでデータを復元する</title>
      <link>https://www.sambaiz.net/article/511/</link>
      <pubDate>Mon, 25 Nov 2024 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/511/</guid>
      <description>&lt;p&gt;BigQuery には&lt;a href=&#34;https://cloud.google.com/bigquery/docs/time-travel&#34;&gt;タイムトラベル&lt;/a&gt;機能があり、デフォルトで過去 7 日間までの任意の時点のデータに次のようにしてアクセスできる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;sambaiztest.test_dataset.test_table&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FOR&lt;/span&gt; SYSTEM_TIME &lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;OF&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2024-11-22 22:41:00+09:00&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/511/images/time_travel.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/511/images/time_travel_hu_cb148044b024ed0.png&#34; width=&#34;493&#34; height=&#34;370&#34; alt=&#34;タイムトラベルの日数&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;これによりレコードを上書きしてしまったり削除してしまった場合もデータを復元することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCP の マネージド Airflow サービスCloud Composer を Terraform で立ち上げてワークフローを動かす</title>
      <link>https://www.sambaiz.net/article/510/</link>
      <pubDate>Sun, 17 Nov 2024 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/510/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/composer?hl=en&#34;&gt;Cloud Composer&lt;/a&gt; は Apache Airflow のマネージドサービス。AWS でいう MWAA。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/428/&#34;&gt;CDK で Amazon Managed Workflow for Apache Airflow (MWAA) の環境を作成しワークフローを実行する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/composer/pricing&#34;&gt;料金&lt;/a&gt;は Composer 2 と現在プレビューの Composer 3 で異なるが、主に CPU、メモリ、ストレージ量に対してかかる。GKE 上で動くが、既存のクラスタは&lt;a href=&#34;https://cloud.google.com/composer/docs/composer-3/composer-overview?hl=ja#can_i_use_my_own_cluster_as_a_cluster&#34;&gt;利用できない&lt;/a&gt;。リソースが足りないと Worker Pod が ClashLoopBackoff や OOMになったりする。このクラスタは Composer 2 ではリストに表示されているが、3 では表示されなくなる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>dbt で BigQuery のデータを SQL で加工して新しいテーブルを作る</title>
      <link>https://www.sambaiz.net/article/509/</link>
      <pubDate>Sat, 16 Nov 2024 21:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/509/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.getdbt.com/docs/introduction&#34;&gt;dbt&lt;/a&gt; は SQL や Python でデータを加工するツール。基本的な機能を提供する OSS の CLI dbt Core と、Browser-based IDE や CI、アラートなどを&lt;a href=&#34;https://www.getdbt.com/product/dbt-core-vs-dbt-cloud&#34;&gt;含む&lt;/a&gt;サービス dbt Cloud がある。今回は dbt Core を使う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DuckDB の Go クライアントで Google Sheets のデータを SQL で取得する</title>
      <link>https://www.sambaiz.net/article/508/</link>
      <pubDate>Wed, 13 Nov 2024 23:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/508/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://duckdb.org/&#34;&gt;DuckDB&lt;/a&gt; は SQL で CSV や JSON、Parquet などを高速に読み書きできる OSS。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install duckdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ duckdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v1.1.3 19864453f7&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.help&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; usage hints.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Connected to a transient in-memory database.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Use &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.open FILENAME&amp;#34;&lt;/span&gt; to reopen on a persistent database.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;D SELECT * FROM read_csv_auto&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;test.csv&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;┌───────┬─────────┬─────────┐&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   a   │    b    │    c    │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ int64 │ varchar │ varchar │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├───────┼─────────┼─────────┤&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt; │ aaa     │ bbb     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt; │ aaa     │ ccc     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt; │ bbb     │ ddd     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    &lt;span style=&#34;color:#bd93f9&#34;&gt;40&lt;/span&gt; │ bbb     │ eee     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└───────┴─────────┴─────────┘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CLI ほか Go や Swift、&lt;a href=&#34;https://duckdb.org/docs/api/wasm/overview.html&#34;&gt;WASM&lt;/a&gt; などの&lt;a href=&#34;https://duckdb.org/docs/api/overview&#34;&gt;クライアント&lt;/a&gt; が実装されており、様々な環境で利用することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes クラスタに Argo CD をインストールして Git リポジトリの Manifest に加えた変更が同期されるようにする</title>
      <link>https://www.sambaiz.net/article/507/</link>
      <pubDate>Sun, 10 Nov 2024 23:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/507/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/argoproj/argo-cd&#34;&gt;Argo CD&lt;/a&gt; は Kubernetes 用の CD ツール。&lt;/p&gt;&#xA;&lt;p&gt;CRD や Controller などを&lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/#getting-started&#34;&gt;インストール&lt;/a&gt;する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl create namespace argocd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/applications.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/applicationsets.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/appprojects.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;serviceaccount/argocd-application-controller created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service/argocd-server-metrics created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/argocd-applicationset-controller created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/argocd-dex-server created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/argocd-notifications-controller created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/argocd-redis created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/argocd-repo-server created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/argocd-server created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;statefulset.apps/argocd-application-controller created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CLI をインストールして、admin のパスワードを取得してログインする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes クラスタに Argo Workflows をインストールしてワークフローを動かす</title>
      <link>https://www.sambaiz.net/article/505/</link>
      <pubDate>Sun, 10 Nov 2024 18:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/505/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/argoproj/argo-workflows&#34;&gt;Argo Workflows&lt;/a&gt; は Kubernetes でワークフローを実行するエンジン。&lt;/p&gt;&#xA;&lt;p&gt;CRD や UI などをクラスタに&lt;a href=&#34;https://argo-workflows.readthedocs.io/en/latest/quick-start/&#34;&gt;インストール&lt;/a&gt;する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;ARGO_WORKFLOWS_VERSION&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v3.5.12&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl create namespace argo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl apply -n argo -f &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://github.com/argoproj/argo-workflows/releases/download/&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;ARGO_WORKFLOWS_VERSION&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/quick-start-minimal.yaml&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/clusterworkflowtemplates.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/cronworkflows.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/workflowartifactgctasks.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/workfloweventbindings.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/workflows.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/workflowtaskresults.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/workflowtasksets.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;customresourcedefinition.apiextensions.k8s.io/workflowtemplates.argoproj.io created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;serviceaccount/argo created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;priorityclass.scheduling.k8s.io/workflow-controller created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/argo-server created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/workflow-controller created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/httpbin created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deployment.apps/minio created&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://argo-workflows.readthedocs.io/en/latest/walk-through/argo-cli/&#34;&gt;Argo CLI&lt;/a&gt; をインストールする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kpt で Kubernetes の Manifest を編集して apply する</title>
      <link>https://www.sambaiz.net/article/504/</link>
      <pubDate>Fri, 08 Nov 2024 09:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/504/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kptdev/kpt&#34;&gt;Kpt&lt;/a&gt; は Kubernetes の Manifest を編集する Google の OSS。kubectl に組み込まれている &lt;a href=&#34;https://kpt.dev/faq/?id=whats-the-difference-between-kpt-and-kustomize&#34;&gt;kustomize と比較して&lt;/a&gt;、ベースの Manifest からパッチを当てるのではなく、テンプレートや  &lt;a href=&#34;https://catalog.kpt.dev/&#34;&gt;Functions&lt;/a&gt; によって WYSIWYG に Manifest を編集するアプローチを取っている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenMetadata にメタデータを集約しテーブルの説明、変更履歴、データ品質や Lineage などをまとめて見られるようにする</title>
      <link>https://www.sambaiz.net/article/503/</link>
      <pubDate>Mon, 04 Nov 2024 21:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/503/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/open-metadata/OpenMetadata&#34;&gt;OpenMetadata&lt;/a&gt; はテーブルのスキーマやパイプラインなど諸々のメタデータを集約するプラットフォーム。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/503/images/openmetadata.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/503/images/openmetadata_hu_7780bc977ed5ab44.png&#34; width=&#34;600&#34; height=&#34;309&#34; alt=&#34;OpenMetadata&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;Docker Compose で&lt;a href=&#34;https://docs.open-metadata.org/latest/quick-start/local-docker-deployment&#34;&gt;立ち上げる&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://github.com/open-metadata/OpenMetadata/releases/download/1.5.7-release/docker-compose.yml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker compose -f docker-compose.yml up --detach&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; Running 10/10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Network openmetadata-docker_app_net                        Created                                                                                                                                                                         0.0s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Volume &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;openmetadata-docker_ingestion-volume-dags&amp;#34;&lt;/span&gt;         Created                                                                                                                                                                         0.0s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Volume &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;openmetadata-docker_ingestion-volume-tmp&amp;#34;&lt;/span&gt;          Created                                                                                                                                                                         0.0s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Volume &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;openmetadata-docker_es-data&amp;#34;&lt;/span&gt;                       Created                                                                                                                                                                         0.0s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Volume &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;openmetadata-docker_ingestion-volume-dag-airflow&amp;#34;&lt;/span&gt;  Created                                                                                                                                                                         0.0s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Container openmetadata_elasticsearch                       Healthy                                                                                                                                                                        16.9s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Container openmetadata_mysql                               Healthy                                                                                                                                                                        28.5s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Container execute_migrate_all                              Exited                                                                                                                                                                         27.6s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Container openmetadata_server                              Started                                                                                                                                                                        27.7s &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ✔ Container openmetadata_ingestion                           Started &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http://localhost:8585 に &lt;a href=&#34;mailto:admin@open-metadata.org&#34;&gt;admin@open-metadata.org&lt;/a&gt; / admin でログインできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neovim で Go の開発環境を作る</title>
      <link>https://www.sambaiz.net/article/502/</link>
      <pubDate>Sun, 03 Nov 2024 23:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/502/</guid>
      <description>&lt;h3 id=&#34;lsp-クライアントの設定-nvim-lspconfighttpsgithubcomneovimnvim-lspconfig&#34;&gt;LSP クライアントの設定 (&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;)&lt;/h3&gt;&#xA;&lt;p&gt;Go の LSP サーバー gopls をインストールする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go install golang.org/x/tools/gopls@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gopls version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;golang.org/x/tools/gopls v0.16.2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Neovim に LSP クライアントが &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;built-in&lt;/a&gt; されているので nvim-lspconfig にある gopls の設定を渡すだけではたらく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Beam による ETL のマネージドサービス Dataflow のサンプルコード Word Count を読んで実行する</title>
      <link>https://www.sambaiz.net/article/501/</link>
      <pubDate>Wed, 23 Oct 2024 01:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/501/</guid>
      <description>&lt;p&gt;GCP の Dataflow はデータ処理のパイプラインを構築する OSS &lt;a href=&#34;https://beam.apache.org/&#34;&gt;Apache Beam&lt;/a&gt; による、ストリーミングおよびバッチ ETL のマネージドサービス。PubSub から BigQuery にデータを流したり、機械学習を行ったりすることができる。&lt;a href=&#34;https://cloud.google.com/dataflow/pricing&#34;&gt;料金&lt;/a&gt;はジョブに実行したリソースやシャッフルしたデータ量に対してかかる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neovim のプラグインマネージャー lazy.nvim をインストールしてプラグインを入れる</title>
      <link>https://www.sambaiz.net/article/500/</link>
      <pubDate>Sun, 20 Oct 2024 21:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/500/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; は 2022年の11月に&lt;a href=&#34;https://github.com/folke/lazy.nvim/releases/tag/v1.0.0&#34;&gt;リリースされた&lt;/a&gt; nvim のプラグインマネージャー。高速に nvim が起動しプラグインは自動でインストールされる。&lt;/p&gt;&#xA;&lt;p&gt;次のスクリプトで lazy.nvim を&lt;a href=&#34;https://lazy.folke.io/installation&#34;&gt;インストール&lt;/a&gt;する。&#xA;Lua のパッケージマネージャー &lt;a href=&#34;https://luarocks.org/&#34;&gt;luarocks&lt;/a&gt; が必要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tableau Desktop を Athena に接続して年月日に分かれた日時やstructを含むテーブルを扱う</title>
      <link>https://www.sambaiz.net/article/499/</link>
      <pubDate>Mon, 14 Oct 2024 22:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/499/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.tableau.com/&#34;&gt;Tableau&lt;/a&gt; はローカルファイルや BigQuery など多様なデータソースに接続しカラムをドラッグするだけで可視化や分析ができる BI ツール。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/499/images/visualize.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/499/images/visualize_hu_fce30a754d11fb75.png&#34; width=&#34;600&#34; height=&#34;313&#34; alt=&#34;可視化&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;トレンドや予測値を追加して&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go で atomic にメモリを読み書きするための低レベルなパッケージ sync/atomic のベンチマークを取る</title>
      <link>https://www.sambaiz.net/article/498/</link>
      <pubDate>Mon, 23 Sep 2024 23:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/498/</guid>
      <description>&lt;p&gt;Go の &lt;a href=&#34;https://pkg.go.dev/sync/atomic&#34;&gt;sync/atomic&lt;/a&gt; は atomic にメモリを読み書きするための低レベルなパッケージ。arm64 の場合 &lt;a href=&#34;https://developer.arm.com/documentation/ddi0602/2024-06/Base-Instructions/LDADD--LDADDA--LDADDAL--LDADDL--Atomic-add-on-word-or-doubleword-in-memory-&#34;&gt;LDADDALD&lt;/a&gt; といった atomic にメモリを操作する CPU 命令が&lt;a href=&#34;https://github.com/golang/go/blob/go1.23.1/src/internal/runtime/atomic/atomic_arm64.s#L269&#34;&gt;実行される&lt;/a&gt;。複数の goroutine から値を読み書きする場合、通常 channel を介して通信するか sync.Mutex でロックをかける方法を取るので、扱いに注意が必要なこのパッケージの関数を自分で呼ぶ機会がなかった。ただ &lt;a href=&#34;https://github.com/prometheus/client_golang/blob/v1.20.4/prometheus/counter.go#L152&#34;&gt;Prometheus Go client&lt;/a&gt; などのライブラリで呼ばれていることはあって、どの程度差があるのか気になったのでベンチマークを取ってみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>カーディナリティを確率的に推定する HyperLogLog&#43;&#43; で膨大なデータに対する count-distinct での OOM を回避する</title>
      <link>https://www.sambaiz.net/article/497/</link>
      <pubDate>Mon, 02 Sep 2024 21:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/497/</guid>
      <description>&lt;p&gt;アクセスログのユーザー数などユニークな要素数を数える際 count(distinct column_name) のようなクエリを実行することがある。データが膨大な場合、通常の count() はデータを分割して合算することでスケールさせることができるが、distinct する場合はその方法が取れずメモリ不足によって極端に処理が遅くなったり、最悪 OOM で失敗してしまいどうしようもなくなってしまうことがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Agents for Bedrock で時間がかかったり重すぎたりする Actions を RETURN_CONTROL して Go クライアントでハンドリングする</title>
      <link>https://www.sambaiz.net/article/496/</link>
      <pubDate>Tue, 27 Aug 2024 20:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/496/</guid>
      <description>&lt;p&gt;Agents for Bedrock は Actions として Lambda 関数を登録して呼び出させることができる。ただ、その処理に時間がかる場合、Lambda のタイムアウトやリソース上限に当たったりすることが考えられる。また、重い処理を並列で実行したり、進行状況をユーザーに通知したりすることを考えると、Agent から呼び出すには都合が悪いことがある。それを解決するのが ReturnControls で Agent 側で Actions のハンドリングを行うのではなく、クライアントに呼び出すべき Action とその入力を返し、クライアントはその結果を Agent に渡すことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で Agents for Bedrock を作成し入力に基づいて Lambda 関数が呼び出されることを確認する</title>
      <link>https://www.sambaiz.net/article/495/</link>
      <pubDate>Tue, 27 Aug 2024 09:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/495/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/bedrock/agents/&#34;&gt;Agents for Amazon Bedrock&lt;/a&gt; は Bedrock の各種基盤モデルを用いて、複数のステップからなる処理を行う生成AIのエージェントを構築する機能。必要に応じて Lambda を呼び出したり、OpenSearch Serverless などと接続して RAG を行ったりできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spark の Broadcast variables や Accumulator で Executor に変数を共有する</title>
      <link>https://www.sambaiz.net/article/494/</link>
      <pubDate>Thu, 22 Aug 2024 09:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/494/</guid>
      <description>&lt;p&gt;Executor に変数を共有する仕組みとして &lt;a href=&#34;https://spark.apache.org/docs/3.5.1/rdd-programming-guide.html#broadcast-variables&#34;&gt;Broadcast variables&lt;/a&gt; と &lt;a href=&#34;https://spark.apache.org/docs/3.5.1/rdd-programming-guide.html#accumulators&#34;&gt;Accumulator&lt;/a&gt; がある。&lt;/p&gt;&#xA;&lt;p&gt;Broadcast variables はノードにキャッシュされる read-only な変数。Stageごとに共通で必要なデータは自動で broadcast され、Task の実行前にデシリアライズされるが、複数の stage で必要なデータがある場合やデシリアライズされた状態で持っておきたい場合、 SparkContext.broadcast() で明示的に変数を broadcast することが有効にはたらく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubecost の Prometheus メトリクスから Pod のラベルごとのコストを算出する</title>
      <link>https://www.sambaiz.net/article/493/</link>
      <pubDate>Wed, 17 Jul 2024 19:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/493/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.kubecost.com/&#34;&gt;Kubecost&lt;/a&gt; は Kubernetes のコストを可視化し最適化するツール。&#xA;AWS が &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/cost-monitoring.html&#34;&gt;EKS optimized bundle&lt;/a&gt; を提供しており一部 Enterprise 相当の機能を使うことができる。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/493/images/eksoptimized.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/493/images/eksoptimized_hu_efea7aed583c611e.png&#34; width=&#34;600&#34; height=&#34;184&#34; alt=&#34;EKS Optimized license&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;Helm でインストールする。Promehteus はデフォルトでインストールされるが、すでにあるものを用いることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8sのServiceの名前解決からkube-proxyのiptablesによってPodにロードバランシングされるまでの流れを追う</title>
      <link>https://www.sambaiz.net/article/492/</link>
      <pubDate>Sun, 30 Jun 2024 21:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/492/</guid>
      <description>&lt;p&gt;Kubernetes の Service は &lt;code&gt;my-svc.my-namespace.svc.cluster-domain.example&lt;/code&gt; のような FQDN を&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#a-aaaa-records&#34;&gt;持ち&lt;/a&gt;、これにリクエストすると selector が指す Pod に届く。これがどのように実現されているかを追う。EKS で立てた Kubernetes 1.28 クラスタで確認する。&lt;/p&gt;&#xA;&lt;p&gt;まず Service の FQDN から ClusterIP への名前解決は、各 Pod の /etc/resolv.conf の nameserver 設定に従い kube-dns (coredns) へ問い合わせることで行われる。なお、この IP アドレス自体も kube-dns Service の ClusterIP なので以後は同様にルーティングされることになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PromQLでメトリクスを取得・集計する</title>
      <link>https://www.sambaiz.net/article/491/</link>
      <pubDate>Sun, 09 Jun 2024 17:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/491/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://prometheus.io/docs/prometheus/2.53/querying/basics/&#34;&gt;PromQL&lt;/a&gt; は Prometheus で実行できるクエリ言語で、次のようにしてメトリクスの単一時間のサンプルを &lt;a href=&#34;https://prometheus.io/docs/prometheus/2.53/querying/basics/#instant-vector-selectors&#34;&gt;Instant vector&lt;/a&gt; として取得したり、大括弧で期間を指定することでその期間の全てのサンプルを &lt;a href=&#34;https://prometheus.io/docs/prometheus/2.53/querying/basics/#range-vector-selectors&#34;&gt;Range vector&lt;/a&gt; として取得できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KEDA (Kubernetes Event-driven Autoscaling) で Prometheus のメトリクスや時間ベースのスケーリングを行う</title>
      <link>https://www.sambaiz.net/article/490/</link>
      <pubDate>Wed, 05 Jun 2024 23:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/490/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://keda.sh/docs/2.14/concepts/&#34;&gt;KEDA&lt;/a&gt; は Kubernetes でイベントドリブンなスケーリングを行えるようにするコンポーネントで、HorizontalPodAutoscaler とともにはたらく。CPU のほか Prometheus や Cron など様々なイベントソースの &lt;a href=&#34;https://keda.sh/docs/2.14/scalers/&#34;&gt;Scaler&lt;/a&gt; が提供されており、それをもとに HPA で replicas を増減させたり、0 ↔ 1 の変更を行ったりもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LivyのREST APIを呼んでSparkジョブを実行する</title>
      <link>https://www.sambaiz.net/article/489/</link>
      <pubDate>Wed, 29 May 2024 23:27:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/489/</guid>
      <description>&lt;p&gt;Livy の &lt;a href=&#34;https://livy.apache.org/docs/latest/rest-api.html&#34;&gt;REST API&lt;/a&gt; を呼んで Spark ジョブを実行してみる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/486/&#34;&gt;Livy を EMR on EKS にインストールしSparkmagic でローカルの Jupyter Notebook から Spark のジョブを実行する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まず &lt;a href=&#34;https://livy.apache.org/docs/latest/rest-api.html#session&#34;&gt;Session&lt;/a&gt; を作成し idle 状態になるまで待つ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Langchain の SQL Database Toolkits の AgentExecutor で自然言語からSQLを生成しデータベースにアクセスする</title>
      <link>https://www.sambaiz.net/article/488/</link>
      <pubDate>Sun, 26 May 2024 20:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/488/</guid>
      <description>&lt;p&gt;Langchain の &lt;a href=&#34;https://python.langchain.com/v0.1/docs/integrations/toolkits/sql_database/&#34;&gt;SQL Database Toolkits&lt;/a&gt; は SQL を生成しデータベースにアクセスする機能を提供する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/agent_toolkits/sql/base.py#L44&#34;&gt;create_sql_agent()&lt;/a&gt; は &lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/agent_toolkits/sql/toolkit.py#L34&#34;&gt;SQLDatabaseToolkit.get_tools()&lt;/a&gt; の&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/tool.py#L50&#34;&gt;query_sql_database_tool&lt;/a&gt;: SQLを実行する&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/tool.py#L76&#34;&gt;info_sql_database_tool&lt;/a&gt;: テーブルのスキーマを取得する&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/tool.py#L98&#34;&gt;list_sql_database_tool&lt;/a&gt;: テーブル名の一覧を取得する&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/tools/sql_database/prompt.py#L14&#34;&gt;query_sql_checker_tool&lt;/a&gt;: SQLが誤っている場合は修正する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を tools として追加し&lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/community/langchain_community/agent_toolkits/sql/prompt.py#L3&#34;&gt;プロンプト&lt;/a&gt;に埋めるなどした LLM の &lt;a href=&#34;https://github.com/langchain-ai/langchain/blob/v0.1.16/libs/langchain/langchain/agents/agent.py#L915&#34;&gt;AgentExecutor&lt;/a&gt; を返す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus を CDK でインストールして Recording rules で集計したデータを New Relic に Remote write することでデータ量を節約する</title>
      <link>https://www.sambaiz.net/article/487/</link>
      <pubDate>Thu, 23 May 2024 02:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/487/</guid>
      <description>&lt;p&gt;Prometheus の &lt;a href=&#34;https://prometheus.io/docs/prometheus/2.52/configuration/recording_rules/&#34;&gt;Recording rules&lt;/a&gt; は PromQL で既存のメトリクスから新たなメトリクスを作ることができる機能。これによって集計したデータを送ることで生のデータを送るのと比べて New Relic へのデータ送信量を節約することができるが、newrelic-bundle に含まれる newrelic-prometheus-configurator の Prometheus は Agent mode で動くので Recording rules に&lt;a href=&#34;https://github.com/prometheus/prometheus/blob/v2.52.0/config/config.go#L124&#34;&gt;対応していない&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Livy を EMR on EKS にインストールしSparkmagic でローカルの Jupyter Notebook から Spark のジョブを実行する</title>
      <link>https://www.sambaiz.net/article/486/</link>
      <pubDate>Wed, 22 May 2024 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/486/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://livy.apache.org/&#34;&gt;Apache Livy&lt;/a&gt; は Spark クラスタとやり取りするための REST API を提供し、&lt;a href=&#34;https://github.com/jupyter-incubator/sparkmagic&#34;&gt;Sparkmagic&lt;/a&gt; はこの API を呼ぶことで Jupyter Notebooks からリモートの Spark クラスタでジョブを実行する。Athena for Apache Spark でも使われていて、インタラクティブにジョブを実行し結果を確認できるのはデバッグやアドホックなクエリを実行したりするのに便利だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LangChain のエコシステム LangGraph で cycle を含むグラフから LLM のエージェントを作る</title>
      <link>https://www.sambaiz.net/article/485/</link>
      <pubDate>Sun, 12 May 2024 21:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/485/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://python.langchain.com/v0.1/docs/langgraph/&#34;&gt;LangGraph&lt;/a&gt; は LangChain のエコシステムで、次のように StateGraph あるいは List[BaseMessage] をステートとする MessageGraph にノードを追加し add_edge() や add_conditional_edges() で繋げて compile() することで &lt;a href=&#34;https://python.langchain.com/v0.1/docs/expression_language/interface/&#34;&gt;Runnable&lt;/a&gt; を作る。&lt;a href=&#34;https://python.langchain.com/v0.1/docs/expression_language/&#34;&gt;LangChain Expression Language (LCEL)&lt;/a&gt; でも Runnable を繋げて DAG を作ることはできるが LangGraph だと cycle も表現できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>tcコマンドでqdiscを設定しネットワーク遅延や帯域制限を行う</title>
      <link>https://www.sambaiz.net/article/484/</link>
      <pubDate>Fri, 03 May 2024 17:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/484/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://man7.org/linux/man-pages/man8/tc.8.html&#34;&gt;tc&lt;/a&gt; はカーネルがパケットをネットワークインタフェースに送る前にキューイングしてトラフィックを制御する qdisc (queueing discipline) を設定するコマンドあるいはサブシステム。Kubernetes CNI の &lt;a href=&#34;https://github.com/containernetworking/cni.dev/blob/main/content/plugins/current/meta/bandwidth.md&#34;&gt;bandwidth plugin&lt;/a&gt; も tc によって実現されており次の &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#support-traffic-shaping&#34;&gt;annotatiton&lt;/a&gt; によって Pod の帯域を制限できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fzf と zoxide でプレビューを見ながら fuzzy completion によるファイルの選択やディレクトリへの移動を行う</title>
      <link>https://www.sambaiz.net/article/483/</link>
      <pubDate>Wed, 01 May 2024 18:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/483/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt; は &lt;a href=&#34;https://github.com/peco/peco&#34;&gt;peco&lt;/a&gt; のように fuzzy にファイルを絞って選択できるコマンド。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-tsx&#34; data-lang=&#34;tsx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install fzf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ find aaa &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; fzf &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;height &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; xargs echo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/483/images/fzf.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/483/images/fzf_hu_3bf8aa77a5e35042.png&#34; width=&#34;600&#34; height=&#34;350&#34; alt=&#34;fzfコマンド&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;—preview にコマンドを渡すことでプレビュー欄にファイルの中身を表示することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8s の HorizontalPodAutoscaler による replicas の更新と判定間隔、増減上限の設定</title>
      <link>https://www.sambaiz.net/article/482/</link>
      <pubDate>Mon, 29 Apr 2024 19:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/482/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&#34;&gt;HorizontalPodAutoscaler (HPA)&lt;/a&gt; は metrics をもとに scaleTargetRef のリソースの replicas を&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/v1.30.0/pkg/controller/podautoscaler/horizontal.go#L867&#34;&gt;更新する&lt;/a&gt;リソース。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;apiVersion&lt;/span&gt;: autoscaling/v2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;kind&lt;/span&gt;: HorizontalPodAutoscaler&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: testapp-hpa&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;scaleTargetRef&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;apiVersion&lt;/span&gt;: apps/v1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;kind&lt;/span&gt;: Deployment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: testapp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;minReplicas&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;maxReplicas&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;metrics&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#ff79c6&#34;&gt;type&lt;/span&gt;: Resource&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;resource&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: cpu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;target&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;type&lt;/span&gt;: Utilization&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;averageUtilization&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;70&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deployment の manifest に replicas が含まれていると apply したときにその値で上書きされてしまうことがあるので含めないほうがよい。ただ、だからといって replicas を消して apply すると &lt;a href=&#34;https://kubernetes.io/docs/tasks/manage-kubernetes-objects/declarative-config/#how-apply-calculates-differences-and-merges-changes&#34;&gt;kubectl.kubernetes.io/last-applied-configuration&lt;/a&gt; との merge patch がはたらきデフォルトの 1 になってしまうことに注意が必要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8s の Pod の Prirority とそれによる Preemption</title>
      <link>https://www.sambaiz.net/article/481/</link>
      <pubDate>Sat, 27 Apr 2024 21:16:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/481/</guid>
      <description>&lt;p&gt;Pod の priorityClassName を指定すると対応する PriorityClass の value がその Pod の &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/&#34;&gt;Priority&lt;/a&gt; となる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;apiVersion&lt;/span&gt;: scheduling.k8s.io/v1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;kind&lt;/span&gt;: PriorityClass&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;metadata&lt;/span&gt;: &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: low-priority&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;value&lt;/span&gt;: -&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;globalDefault&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pods can be preempted&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;apiVersion&lt;/span&gt;: apps/v1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;kind&lt;/span&gt;: Deployment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;priorityClassName&lt;/span&gt;: low-priority&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pod がスケジューリングされる際にその preemptionPolicy がデフォルトの PreemptLowerPriority のとき、それより低い Priority の Pod を Preempt してリクエストリソースを確保する。また、ノードのリソース不足の際にの Eviction にも Priority が関係する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NewRelicのアラートをEventBridgeを通してLambdaで受ける</title>
      <link>https://www.sambaiz.net/article/480/</link>
      <pubDate>Tue, 23 Apr 2024 22:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/480/</guid>
      <description>&lt;p&gt;NewRelic のアラートの Destination には Slack や PagerDuty などがあり、Workflows でこれらを指定し NRQL で追加のデータを付加することもできる。ただアラート文面をカスタマイズしたり、別の処理を行ったりするには Lambda などでハンドリングする必要がある。Webhook &amp;amp; Custom header で受けることもできるが EventBridge だと外にエンドポイントを開く必要がない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apple silicon の Mac で入出力音声を合わせて録画する</title>
      <link>https://www.sambaiz.net/article/479/</link>
      <pubDate>Tue, 23 Apr 2024 07:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/479/</guid>
      <description>&lt;p&gt;Mac の shift＋command＋5 などで画面録画すると自分の声しか入らない。仮想オーディオデバイスに入出力音声を流しマイクとして指定することで合わせて録画したい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pixie の PxL script で Kubernetes クラスタでの通信を取得する</title>
      <link>https://www.sambaiz.net/article/478/</link>
      <pubDate>Sun, 07 Apr 2024 21:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/478/</guid>
      <description>&lt;p&gt;Pixie CLI を&lt;a href=&#34;https://docs.px.dev/installing-pixie/install-guides/community-cloud-for-pixie#3.-install-the-pixie-cli&#34;&gt;インストール&lt;/a&gt;してログインする。New Relic から使っている場合はインストールコマンドに含まれている api key を渡す。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/466/&#34;&gt;CDKでEKSクラスタにnewrelic-bundleをインストールしてモニタリングする - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ bash -c &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;curl -fsSL https://withpixie.ai/install.sh&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ px version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pixie CLI&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0.8.2+Distribution.401c92c.20230531033620.1.jenkins&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ px auth login --api_key&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;xxxxx&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Pixie CLI&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Authentication Successful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.px.dev/tutorials/pxl-scripts/write-pxl-scripts/&#34;&gt;PxL Script&lt;/a&gt; で pixie が収集しているデータの &lt;a href=&#34;https://docs.px.dev/reference/datatables&#34;&gt;table&lt;/a&gt; を読み込んで表示してみる。スクリプトを書く際はビルトインの&lt;a href=&#34;https://github.com/pixie-io/pixie/tree/release/vizier/v0.14.8/src/pxl_scripts&#34;&gt;スクリプト&lt;/a&gt;が参考になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GOGCとGOMEMLIMITによるGoのGC頻度の調整とtraceでの動作確認</title>
      <link>https://www.sambaiz.net/article/477/</link>
      <pubDate>Sat, 06 Apr 2024 20:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/477/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/gc-guide&#34;&gt;A Guide to the Go Garbage Collector&lt;/a&gt; によると Go の GC はグローバル変数やローカル変数であるルートのオブジェクトやポインタから参照されているものを mark していき mark されなかったものを sweep する mark-sweep と呼ばれる形式で行われる。これにかかる&lt;a href=&#34;https://go.dev/doc/gc-guide#Understanding_costs&#34;&gt;コスト&lt;/a&gt;はヒープサイズが大きいほど大きくなるが、新しく割り当てられたメモリだけでなく既存のライフタイムの長いものも対象となるので頻度を下げることで CPU への負荷を抑えることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes のノードのリソース不足による terminationGracePeriodSeconds を待たない evict</title>
      <link>https://www.sambaiz.net/article/476/</link>
      <pubDate>Sun, 31 Mar 2024 16:07:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/476/</guid>
      <description>&lt;p&gt;emptyDir の volume を含む &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-emphemeralstorage-consumption&#34;&gt;ephemeral-storage&lt;/a&gt; や memory の requests のみを指定した場合 pod はそれ以上のリソースを使うことが&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits&#34;&gt;できる&lt;/a&gt;が、それによってノードのリソースが枯渇しないよう kubelet が 次のシグナルを監視して pod を &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/node-pressure-eviction/&#34;&gt;evict する&lt;/a&gt;ことがある。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;memory.available&lt;/li&gt;&#xA;&lt;li&gt;nodefs.available&lt;/li&gt;&#xA;&lt;li&gt;nodefs.inodesFree&lt;/li&gt;&#xA;&lt;li&gt;imagefs.available&lt;/li&gt;&#xA;&lt;li&gt;imagefs.inodesFree&lt;/li&gt;&#xA;&lt;li&gt;pid.available&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;これらに対して &lt;a href=&#34;https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/#kubelet-config-k8s-io-v1beta1-KubeletConfiguration&#34;&gt;KubeletConfiguration&lt;/a&gt; の evictionSoft と evictionHard で閾値を設定することができ、soft を超えただけでは evict されるまで eviction-max-pod-grace-period の猶予があるが、hard も超えると即座に evict されてしまう。いずれの場合も pod の &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination&#34;&gt;terminationGracePeriodSeconds&lt;/a&gt; は考慮されない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでEKSクラスタにExternalDNSをインストールしてServiceやIngressで指定したホストをRoute53に登録する</title>
      <link>https://www.sambaiz.net/article/475/</link>
      <pubDate>Wed, 20 Mar 2024 15:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/475/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns&#34;&gt;ExternalDNS&lt;/a&gt; は Kubernetes の Service や Ingress の host と外部の DNS のレコードを同期するアプリケーション。Route53 のレコードの作成は CDK で行うこともできるが cluster.addManifest() してから非同期に作られ、Controller によって管理される ELB の扱いが難しい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでALBとS3をOriginとするCloudFrontのDistributionを作成する</title>
      <link>https://www.sambaiz.net/article/474/</link>
      <pubDate>Wed, 13 Mar 2024 23:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/474/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cloudfront/?nc1=h_ls&#34;&gt;Amazon CloudFront&lt;/a&gt; は CDN のサービスで、&#xA;エッジサーバーにレスポンスをキャッシュすることでレイテンシを改善させたりオリジンへの負荷を軽減させたりすることができる。&#xA;S3 などをオリジンとする静的ファイルの配信が主なユースケースではあるが、ALB などの前段に置くことで動的なレスポンスを返すこともできる。&#xA;その場合、キャッシュを無効にすることになるのでオリジンへのリクエスト数は減らないがコネクションを使い回せる分いくらか負荷が軽減されるのと、&#xA;エッジサーバーから先は AWS 内のネットワークを通るのでレイテンシの改善も期待できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分散KVS etcdの CAP/PACELC 定理における立ち位置と合意アルゴリズムRaft</title>
      <link>https://www.sambaiz.net/article/473/</link>
      <pubDate>Mon, 11 Mar 2024 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/473/</guid>
      <description>&lt;p&gt;etcd は Kubernetes でも使われている分散KVS。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/356/&#34;&gt;Raspberry PiでおうちKubernetesクラスタを構築する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kubernetes のドキュメントには etcd is a consistent and highly-available key value store と&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/&#34;&gt;書いてあり&lt;/a&gt;、であれば CAP 定理の P (Partition tolerance) を妥協しているのかと考えてしまうが、分散システムのネットワークが分断された場合 CA を維持するのは難しい気がする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes の sidecar で logrotate する</title>
      <link>https://www.sambaiz.net/article/472/</link>
      <pubDate>Thu, 07 Mar 2024 01:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/472/</guid>
      <description>&lt;p&gt;ログを出力するアプリケーションと、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/sirupsen/logrus&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;logFile, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; os.&lt;span style=&#34;color:#50fa7b&#34;&gt;OpenFile&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/var/log/app/test.log&amp;#34;&lt;/span&gt;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, &lt;span style=&#34;color:#bd93f9&#34;&gt;0666&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;logrus.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;failed to open file&amp;#34;&lt;/span&gt;, err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;logrus.&lt;span style=&#34;color:#50fa7b&#34;&gt;SetOutput&lt;/span&gt;(logFile)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;i &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ticker &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; time.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewTicker&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; time.Millisecond)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;ticker.C&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;logrus.&lt;span style=&#34;color:#50fa7b&#34;&gt;Print&lt;/span&gt;(i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;logrotate をインストールしたイメージを作り、&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKSクラスタにAWS Load Balancer ControllerをインストールしてALBのIngressを立てる</title>
      <link>https://www.sambaiz.net/article/471/</link>
      <pubDate>Mon, 26 Feb 2024 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/471/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/&#34;&gt;AWS Load Balancer Controller&lt;/a&gt; は Kubernetes のリソースに対応する ELB を作成し管理するコントローラー。&#xA;必要な &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.0/docs/install/iam_policy.json&#34;&gt;Policy&lt;/a&gt; を ServiceAccount に与えて &lt;a href=&#34;https://artifacthub.io/packages/helm/aws/aws-load-balancer-controller&#34;&gt;Helm Chart&lt;/a&gt; でインストールできるが、CDK でクラスタを作る場合は albController でバージョンを指定することでこれを&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/798ef6789c53fc1ba28ffefa480889d5b0c9b151/packages/aws-cdk-lib/aws-eks/lib/alb-controller.ts#L304&#34;&gt;やってくれる&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ローカルのK8s上でairによるGoのアプリケーションのライブリロードを行いVSCodeからdelveでリモートデバッグする</title>
      <link>https://www.sambaiz.net/article/470/</link>
      <pubDate>Wed, 21 Feb 2024 19:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/470/</guid>
      <description>&lt;h2 id=&#34;air-によるライブリロード&#34;&gt;air によるライブリロード&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cosmtrek/air&#34;&gt;air&lt;/a&gt; は Go のアプリケーションをライブリロードするツール。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go install github.com/cosmtrek/air@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;air init すると&lt;a href=&#34;https://github.com/cosmtrek/air/blob/v1.49.0/air_example.toml&#34;&gt;設定ファイル&lt;/a&gt;が作成される。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ air init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat .air.toml &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;root&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;tmp_dir&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tmp&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;build&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;args_bin&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;[]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bin&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./tmp/main&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;go build -o ./tmp/main .&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;delay&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次のようなサーバーのコードに対して&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kustomize の Component である環境でのみ必要なリソースを記述する</title>
      <link>https://www.sambaiz.net/article/469/</link>
      <pubDate>Thu, 15 Feb 2024 09:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/469/</guid>
      <description>&lt;p&gt;Kustomize で local 環境でのみ開発用の DB を動かそうとしたところエラーになってしまった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/311/&#34;&gt;kustomizeでkubernetesのmanifestを環境ごとに生成する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tree manifest &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;manifest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── base&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── app.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── kustomization.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── local&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── kustomization.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── local_db_deployment.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── local_db_service.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat manifest/local/kustomization.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;apiVersion&lt;/span&gt;: kustomize.config.k8s.io/v1beta1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;kind&lt;/span&gt;: Kustomization&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;resources&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- ../base&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;patches&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#ff79c6&#34;&gt;path&lt;/span&gt;: local_db_deployment.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#ff79c6&#34;&gt;path&lt;/span&gt;: local_db_service.yaml&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl kustomize manifest/local&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;error&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;no&lt;/span&gt; matches for Id Deployment.v1.apps/local-db-deployment.[noNs]; failed to find unique target for patch Deployment.v1.apps/local-db-deployment.[noNs]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;make&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;***&lt;/span&gt; [kustomize] Error 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;patches では base にないリソースの追加は行えないので代わりに &lt;a href=&#34;https://kubectl.docs.kubernetes.io/guides/config_management/components/&#34;&gt;Component&lt;/a&gt; を用いる。Component に対して patch を当てることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKのAwsCustomResourceでAWSのAPIを呼ぶ</title>
      <link>https://www.sambaiz.net/article/468/</link>
      <pubDate>Tue, 30 Jan 2024 22:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/468/</guid>
      <description>&lt;p&gt;CDKでリソース作成後にしか取得できない値を渡す必要があるとき Describe API を呼びたいことがある。通常、このような CloudFormation の管理外のことを行うには自前のLambdaを用意して CustomResource を作成することになるが、AWS の API を&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/v2.124.0/packages/%40aws-cdk/custom-resource-handlers/lib/custom-resources/aws-custom-resource-handler/aws-sdk-v3-handler.ts#L122&#34;&gt;呼ぶ&lt;/a&gt;だけだったら &lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.custom_resources.AwsCustomResource.html&#34;&gt;AwsCustomResource&lt;/a&gt; を用いることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SGやネットワークACLによって拒否されたトラフィックをVPCフローログとCloudWatch Logs Insightで確認する</title>
      <link>https://www.sambaiz.net/article/467/</link>
      <pubDate>Mon, 22 Jan 2024 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/467/</guid>
      <description>&lt;p&gt;VPC内のトラフィックを許可/拒否する設定に、セキュリティグループとサブネットレベルの&lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html&#34;&gt;ネットワークACL&lt;/a&gt;がある。&#xA;セキュリティグループではインバウンドで許可されたリクエストに対するレスポンスはアウトバウンドの設定に関わらず許可されるが、ネットワークACLはリクエストとレスポンスそれぞれに対してステートレスに判定する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでEKSクラスタにnewrelic-bundleをインストールしてモニタリングする</title>
      <link>https://www.sambaiz.net/article/466/</link>
      <pubDate>Sat, 13 Jan 2024 21:07:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/466/</guid>
      <description>&lt;p&gt;NewRelic の &lt;a href=&#34;https://docs.newrelic.com/docs/kubernetes-pixie/kubernetes-integration/installation/kubernetes-integration-install-configure/&#34;&gt;Kubernetes Integration&lt;/a&gt; の各種コンポーネントをまとめた&#xA;&lt;a href=&#34;https://github.com/newrelic/helm-charts/tree/master/charts/nri-bundle&#34;&gt;nri-bundle&lt;/a&gt; という Helm Chart が提供されており、Guided install を進めると渡すパラメータが生成されるのでこれを CDK に書き写した。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/466/images/guided_install.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/466/images/guided_install_hu_6a5d885c1facb0c.png&#34; width=&#34;600&#34; height=&#34;228&#34; alt=&#34;Guided install&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;Chart を見ると認証情報はそのまま文字列で渡すほか Secret を指定することもできたので、External Secrets で SecretsManager から取り込む。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で External Secrets Operator をインストールし Secrets Manager のデータを Kubernetes の Secret として読めるようにする</title>
      <link>https://www.sambaiz.net/article/465/</link>
      <pubDate>Thu, 11 Jan 2024 20:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/465/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/external-secrets/external-secrets&#34;&gt;External Secrets Operator (ESO)&lt;/a&gt; は外部のサービスに保存されているシークレットを Kubernetes の Secret として読めるようにする Operator で、&#xA;deprecated になった &lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets&#34;&gt;Kubernetes External Secrets (KES)&lt;/a&gt; の&lt;a href=&#34;https://github.com/external-secrets/kubernetes-external-secrets/issues/864&#34;&gt;後継&lt;/a&gt;。&#xA;今回はこれを CDK でインストールし、Secrets Manager のデータを含む Secret を作る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jira と Toggl と Make でタスクにかかった時間を計測してGoogleカレンダーで可視化する</title>
      <link>https://www.sambaiz.net/article/464/</link>
      <pubDate>Thu, 11 Jan 2024 09:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/464/</guid>
      <description>&lt;p&gt;個人的なタスクの管理のために色々なサービスを使ってきたが最近は &lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;Jira&lt;/a&gt; を使っている。&#xA;Jira というと以前は使いづらい印象があったが 2018 年に &lt;a href=&#34;https://www.atlassian.com/ja/software/jira/next-gen&#34;&gt;次世代プロジェクト&lt;/a&gt; というものがリリースされたようで、&#xA;今使ってみると案外良い感じだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python の cProfile や line_profile でプロファイルを取って遅いコードを改善する</title>
      <link>https://www.sambaiz.net/article/463/</link>
      <pubDate>Wed, 03 Jan 2024 23:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/463/</guid>
      <description>&lt;p&gt;Python でヒープソートを実装したのだが、ビルトインの heapq を用いたものと比べて遥かに遅い。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Heap&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self, values, compare):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; values&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;compare &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; compare&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;reversed&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap) &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__down(i)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;push&lt;/span&gt;(self, value):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(value)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__up(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;delete&lt;/span&gt;(self, idx):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; idx &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__down(idx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__up(idx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;pop&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;delete(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;__parent_idx&lt;/span&gt;(self, idx):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (idx &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; idx &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;__left_child_idx&lt;/span&gt;(self, idx):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (idx &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap) &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;__right_child_idx&lt;/span&gt;(self, idx):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (idx &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (idx &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap) &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;__up&lt;/span&gt;(self, idx):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; idx &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;compare(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__parent_idx(idx)], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx]):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__parent_idx(idx)] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__parent_idx(idx)], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            idx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__parent_idx(idx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;__down&lt;/span&gt;(self, idx):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; idx &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            minIdx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__left_child_idx(idx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; minIdx &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__right_child_idx(idx) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;compare(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__right_child_idx(idx)],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[minIdx]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    minIdx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;__right_child_idx(idx)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;compare(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[minIdx]):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[minIdx] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[minIdx], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heap[idx]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            idx &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; minIdx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;my_heap_sort&lt;/span&gt;(data):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    minheap &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Heap([], &lt;span style=&#34;color:#ff79c6&#34;&gt;lambda&lt;/span&gt; a, b: a &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; data:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        minheap&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;push(d)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ret &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(data)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(minheap&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pop())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;builtin_heapq_sort&lt;/span&gt;(data):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    heap &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; data:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        heapq&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heappush(heap, d)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ret &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(heap)):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;append(heapq&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;heappop(heap))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まずは &lt;a href=&#34;https://docs.python.org/3/library/profile.html&#34;&gt;cProifile&lt;/a&gt; でプロファイルを取ってみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>docker build 時に 1Password の SSH agent をマウントして プライベートリポジトリを git pull できるようにする</title>
      <link>https://www.sambaiz.net/article/462/</link>
      <pubDate>Wed, 27 Dec 2023 19:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/462/</guid>
      <description>&lt;p&gt;docker build 時にコンテナ内から SSH 通信するのに、秘密鍵を secret としてマウントしたりする方法があるが、&lt;a href=&#34;https://developer.1password.com/docs/ssh/agent/compatibility/#ssh-auth-sock&#34;&gt;1Password&lt;/a&gt; などの SSH agent を用いている場合もある。&#xA;&lt;a href=&#34;https://docs.docker.com/build/building/context/#private-repositories&#34;&gt;&amp;ndash;ssh&lt;/a&gt; で SSH Agent のソケットや鍵を指定すると Dockerfile ではその辺りの違いを意識することなく SSH 通信できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fuzzing で Go の関数に想定外の入力が渡された際のバグを見つける</title>
      <link>https://www.sambaiz.net/article/461/</link>
      <pubDate>Sun, 17 Dec 2023 13:24:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/461/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://go.dev/doc/security/fuzz/&#34;&gt;Fuzzing&lt;/a&gt; はランダムなデータを入力とするテスト手法で、Go では 1.18 からサポートされている。&lt;/p&gt;&#xA;&lt;p&gt;次の FizzBuzz 関数をテストする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FizzBuzz&lt;/span&gt;(n &lt;span style=&#34;color:#8be9fd&#34;&gt;uint64&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;FizzBuzz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Fizz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Buzz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; strconv.&lt;span style=&#34;color:#50fa7b&#34;&gt;Itoa&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(n))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まずはテーブルドリブンテストを行う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKSクラスタによるIPアドレスの枯渇とIPv6への移行</title>
      <link>https://www.sambaiz.net/article/460/</link>
      <pubDate>Fri, 15 Dec 2023 01:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/460/</guid>
      <description>&lt;p&gt;EKSクラスタである程度規模の大きいアプリケーションを動かしたところサブネットのIPアドレスが枯渇してしまった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ipアドレス枯渇の要因&#34;&gt;IPアドレス枯渇の要因&lt;/h2&gt;&#xA;&lt;p&gt;Pod の IP アドレスは &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s&#34;&gt;VPC CNI&lt;/a&gt; の ipamd (IP Address Management Daemon) によって割り当てられるが、これはインスタンスのセカンダリIPアドレスから払い出されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKで作成したEKSクラスタのノードにセキュリティグループを設定する</title>
      <link>https://www.sambaiz.net/article/459/</link>
      <pubDate>Tue, 05 Dec 2023 20:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/459/</guid>
      <description>&lt;p&gt;aws_eks.Clsuter を作る際に渡せる &lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks.Cluster.html#securitygroup&#34;&gt;securityGroup&lt;/a&gt; はノードでなくコントロールプレーンの ENI に紐づく SG となっている。&lt;/p&gt;&#xA;&lt;p&gt;Cluster に &lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks.Cluster.html#defaultcapacity-1&#34;&gt;defaultCapacity&lt;/a&gt; というフィールドがあるので、&#xA;ここから SG を追加しようとしたが何も起こらない。&#xA;EKS クラスタを作成する際、&lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_eks.Cluster.html#defaultcapacitytype&#34;&gt;DefaultCapacityType&lt;/a&gt; がデフォルトの NODEGROUP のとき、defaultCapacity の数のノードから構成され、EKS によって drain などが行われる&lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html&#34;&gt;マネージドノードグループ&lt;/a&gt;が作られるが、defaultCapacity は DefaultCapacityType が EC2 のときにしか値が入らないのだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Canvas の Custom models で AutoML のジョブをノーコードで実行する</title>
      <link>https://www.sambaiz.net/article/458/</link>
      <pubDate>Thu, 16 Nov 2023 23:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/458/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/sagemaker/canvas/&#34;&gt;SageMaker Canvas&lt;/a&gt; は&#xA;&lt;a href=&#34;https://aws.amazon.com/sagemaker/jumpstart/&#34;&gt;SageMaker JumpStart&lt;/a&gt; で提供されている学習済みモデルを利用できるインタフェースおよび、&#xA;AutoML の機能である &lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html&#34;&gt;SageMaker Autopilot&lt;/a&gt; を用いた学習ジョブを&#xA;ノーコードで実行できる機能を提供するサービス。&lt;/p&gt;</description>
    </item>
    <item>
      <title>パブリックIPv4アドレスを持たないEC2インスタンスがIPv6で外部と通信するために必要なリソースをCDKで作成する</title>
      <link>https://www.sambaiz.net/article/457/</link>
      <pubDate>Mon, 06 Nov 2023 09:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/457/</guid>
      <description>&lt;p&gt;まもなくEIP以外の&lt;a href=&#34;https://aws.amazon.com/jp/blogs/aws/new-aws-public-ipv4-address-charge-public-ip-insights/&#34;&gt;パブリックIPv4アドレスにも課金&lt;/a&gt;されるようになるためIPv6への移行を進めていきたい今日この頃、CDK で IPv6 環境を構築し、外部と通信する際に必要なリソースや挙動を確認してみた。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;(追記: 2024-01-29) &lt;a href=&#34;https://github.com/aws/aws-cdk/releases/tag/v2.122.0&#34;&gt;v2.122.0&lt;/a&gt; で ec2.Vpc に ipProtocol: ec2.IpProtocol.DUAL_STACK が追加され、これを指定することで IPv6 のためのリソースを自動で作ることができるようになった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのcontainer/heap packageを読む</title>
      <link>https://www.sambaiz.net/article/456/</link>
      <pubDate>Sun, 05 Nov 2023 21:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/456/</guid>
      <description>&lt;p&gt;Goの標準パッケージに &lt;a href=&#34;https://pkg.go.dev/container/heap&#34;&gt;container/heap&lt;/a&gt; というものがあり、この interface を用いて min/max heap や priority queue を実装できる。昔からある package で、Generics を用いた &lt;a href=&#34;https://github.com/golang/go/issues/47632&#34;&gt;proposal&lt;/a&gt; も上がっている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/253/&#34;&gt;C++ STLのContainersとAlgorithms - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で EKS クラスタに Karpenter をインストールし柔軟で高速なオートスケールを行う</title>
      <link>https://www.sambaiz.net/article/455/</link>
      <pubDate>Fri, 13 Oct 2023 20:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/455/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://karpenter.sh/&#34;&gt;Karpenter&lt;/a&gt; は AWS によって開発されている Kubernetes クラスタのノードを増減させる OSS。&#xA;標準の &lt;a href=&#34;https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/cloudprovider/aws/README.md&#34;&gt;Cluster Autoscaler&lt;/a&gt; と比べて Auto Scaling Group を介さない柔軟で高速なプロビジョニングを行うことができる。&#xA;現状は EKS にしか対応していないが、他のクラウドについても&lt;a href=&#34;https://karpenter.sh/docs/faq/#what-cloud-providers-are-supported&#34;&gt;対応できるようになっている&lt;/a&gt;らしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>python-fireでコマンドライン引数が関数やメソッドに渡るようにする</title>
      <link>https://www.sambaiz.net/article/454/</link>
      <pubDate>Tue, 26 Sep 2023 09:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/454/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/google/python-fire&#34;&gt;python-fire&lt;/a&gt; は&#xA;Python のオブジェクトから CLI を作れるライブラリ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install fire&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次のように fire.Fire() でラップするだけでコマンドライン引数を関数やメソッドに渡すことができる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat main&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; fire&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;FizzBuzz&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;fizzbuzz&lt;/span&gt;(self, num):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ret &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ret &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fizz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; num &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ret &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;buzz&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(ret) &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;str&lt;/span&gt;(num)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;fizzbuzzs&lt;/span&gt;(self, nums):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; [self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;fizzbuzz(num) &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; num &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; nums]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fire&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Fire(FizzBuzz)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python main&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;py fizzbuzzs &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;nums&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;[2,21,30]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fizz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fizzbuzz&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;引数は ast.literal_eval() で文字列や数値、list などに&lt;a href=&#34;https://github.com/google/python-fire/blob/master/fire/parser.py#L114&#34;&gt;評価される&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chrome extension の Content scripts と Service workers</title>
      <link>https://www.sambaiz.net/article/453/</link>
      <pubDate>Mon, 18 Sep 2023 22:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/453/</guid>
      <description>&lt;h2 id=&#34;content-scriptshttpsdeveloperchromecomdocsextensionsmv3content_scripts&#34;&gt;&lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/content_scripts&#34;&gt;Content scripts&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Content scripts はページのコンテキストで動くスクリプトで主に DOM 操作を行うのに用いられる。&#xA;Manifest の &lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/manifest/content_scripts/&#34;&gt;content_scripts&lt;/a&gt; フィールドの&#xA;matches に一致したページで css や js が挿入される。&#xA;挿入タイミングは css が DOM の構築前で、&#xA;js は &lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/content_scripts/#run_time&#34;&gt;run_at&lt;/a&gt; によって指定できる。&#xA;デフォルトの document_idle では window.onload 以後に挿入されることが保証されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenAIのGPTを国会会議録の総理大臣の発言でファインチューニングする</title>
      <link>https://www.sambaiz.net/article/452/</link>
      <pubDate>Mon, 11 Sep 2023 23:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/452/</guid>
      <description>&lt;p&gt;OpenAI は GPT による&lt;a href=&#34;https://platform.openai.com/docs/api-reference/chat/create&#34;&gt;会話文の生成&lt;/a&gt;や&#xA;文章を&lt;a href=&#34;https://platform.openai.com/docs/api-reference/embeddings/create&#34;&gt;ベクトルに変換する&lt;/a&gt;ほかに&#xA;独自のデータセットによってモデルを&lt;a href=&#34;https://platform.openai.com/docs/guides/fine-tuning&#34;&gt;ファインチューニング&lt;/a&gt;する API を提供しており、&#xA;これを用いることで出力の質を上げたり few-shot learning の例示にかかるコストを節約したりすることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerのHuggingFaceModelでOpenCALM-7BやELYZA-japanese-Llama-2-7bをTGIコンテナでデプロイし日本語の文章を生成する</title>
      <link>https://www.sambaiz.net/article/451/</link>
      <pubDate>Tue, 05 Sep 2023 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/451/</guid>
      <description>&lt;p&gt;最近 &lt;a href=&#34;https://www.cyberagent.co.jp/news/detail/id=28817&#34;&gt;CyberAgentによる&lt;/a&gt;商用利用可能な68億パラメータの日本語LLMである&#xA;&lt;a href=&#34;https://huggingface.co/cyberagent/open-calm-7b&#34;&gt;OpenCALM-7B&lt;/a&gt; や&#xA;東大松尾研発の&lt;a href=&#34;https://prtimes.jp/main/html/rd/p/000000034.000047565.html&#34;&gt;ELYZAによる&lt;/a&gt; Llama2 ベースの &lt;a href=&#34;https://huggingface.co/elyza/ELYZA-japanese-Llama-2-7b&#34;&gt;ELYZA-japanese-Llama-2-7b&lt;/a&gt; など日本語LLMがHugging Face に公開されてきている。&#xA;SageMaker SDK には HuggingFaceModel クラスがあり、これを用いるとモデルIDを指定してデプロイできる。&#xA;また、Hugging Face の Deploy ボタンを押すと SageMaker で最低限動かすためのコードを確認できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerのBatch Transformのパラメータの挙動をentrypointの関数の呼び出しと引数から確認する</title>
      <link>https://www.sambaiz.net/article/448/</link>
      <pubDate>Mon, 14 Aug 2023 18:16:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/448/</guid>
      <description>&lt;p&gt;SageMaker の &lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html&#34;&gt;Batch Transform&lt;/a&gt; は単発のバッチ推論ジョブを実行する機能。&#xA;その際推論エンドポイントなどの場合と同じく呼ばれる Model の entrypoint の関数とその引数から、ジョブのパラメータがどのようにはたらくかを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javaでの互換性のないライブラリのバージョン衝突問題をrelocationや独自のクラスローダーによって解消する</title>
      <link>https://www.sambaiz.net/article/443/</link>
      <pubDate>Tue, 08 Aug 2023 22:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/443/</guid>
      <description>&lt;p&gt;Javaで自身や依存しているライブラリが異なるバージョンのライブラリに依存している場合、&#xA;通常、uber-jarにしたとしてもその中のクラスが優先的に読まれたりすることはなく、クラスパスの前にあるクラスがロードされることになるが、&#xA;互換性のないものがあると俗に言う &lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Classloader#:~:text=2%5D%5B6%5D-,JAR%20hell%5Bedit%5D,-JAR%20hell%20is&#34;&gt;JAR hell&lt;/a&gt; と呼ばれる状態に陥り、&#xA;実行時の NoSuchMethodError や意図しない挙動をする可能性がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ssh-over-ssm を ProxyCommand に設定して libssh の ssh_connect() するとタイムアウトしてしまう原因と解決法</title>
      <link>https://www.sambaiz.net/article/450/</link>
      <pubDate>Sun, 30 Jul 2023 16:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/450/</guid>
      <description>&lt;p&gt;Private subnet の RDS に接続するにあたり、&#xA;Sandbox Mode で動く &lt;a href=&#34;https://sequel-ace.com/&#34;&gt;Sequel Ace&lt;/a&gt; では ssh-over-ssm を ProxyCommand とする SSH トンネリングを&lt;a href=&#34;https://github.com/Sequel-Ace/Sequel-Ace/issues/1450&#34;&gt;行えない&lt;/a&gt;ようだったので、&#xA;この Issue で紹介されている &lt;a href=&#34;https://tableplus.com/&#34;&gt;TablePlus&lt;/a&gt; を試してみたのだがこれでも接続できなかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ssh-over-ssm で Session Manager を通して EC2 インスタンスに SSH 接続する</title>
      <link>https://www.sambaiz.net/article/449/</link>
      <pubDate>Thu, 29 Jun 2023 07:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/449/</guid>
      <description>&lt;p&gt;Session Manager は単体でもコマンドを実行したりポートフォワーディングすることができるが &amp;ndash;document-name AWS-StartSSHSession を渡すことで &lt;a href=&#34;https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started-enable-ssh-connections.html&#34;&gt;SSH接続&lt;/a&gt; することもできる。&#xA;このドキュメントの中身は AWS-StartPortForwardingSession と同じく sessionType Port となっており、SSM Agent は対象のポートと &lt;a href=&#34;https://github.com/aws/amazon-ssm-agent/blob/2b7ab82bbf39190dbb237a609e4d1dc048a686a1/agent/session/plugins/port/port.go#L110&#34;&gt;TCP コネクションを確立する&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Inference Recommender でコスト最適なインスタンスタイプの推論エンドポイントを立てる</title>
      <link>https://www.sambaiz.net/article/447/</link>
      <pubDate>Thu, 15 Jun 2023 09:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/447/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/inference-recommender.html&#34;&gt;SageMaker Inference Recommender&lt;/a&gt; は、&#xA;推論エンドポイントのインスタンスタイプや設定の候補を挙げてくれる機能。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/290/&#34;&gt;SageMakerで学習したPyTorchのモデルをElastic Inferenceを有効にしてデプロイする - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;以前作成した MNIST の PyTorch モデルに対して Inference Recommender の Job を実行し、最もコストが低いインスタンスタイプで推論エンドポイントを立ててみる。&#xA;全体のコードは &lt;a href=&#34;https://github.com/sambaiz/sagemaker-inference-recommendation-test&#34;&gt;GitHub&lt;/a&gt; にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Processing で前処理を行って Training で学習したモデルのパラメータや精度を Experiments で記録する</title>
      <link>https://www.sambaiz.net/article/442/</link>
      <pubDate>Thu, 04 May 2023 19:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/442/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/experiments.html&#34;&gt;SageMaker Experiments&lt;/a&gt;は&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html&#34;&gt;Processing&lt;/a&gt; での前処理や&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/sagemaker/latest/dg/train-model.html&#34;&gt;Training&lt;/a&gt; での学習に用いたパラメータやモデルの精度を記録する機能。&#xA;今回は前処理から学習までの流れを Experiments の Run として追跡し、複数の結果を比較できることを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spark の MLlib で k-means法によるクラスタリングを行う</title>
      <link>https://www.sambaiz.net/article/446/</link>
      <pubDate>Sun, 09 Apr 2023 17:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/446/</guid>
      <description>&lt;p&gt;Spark には &lt;a href=&#34;https://spark.apache.org/docs/latest/ml-guide.html&#34;&gt;MLlib&lt;/a&gt; という機械学習のライブラリがあり、&#xA;今回はその中の &lt;a href=&#34;https://spark.apache.org/docs/latest/ml-clustering.html#k-means&#34;&gt;Kmeans&lt;/a&gt; によるクラスタリングを行う。&#xA;k-means法は各データのクラスタを事前に決めた数からランダムに決めて、クラスタごとに中心を取ってから、各データのクラスタを最も近い中心のクラスタに変更する、というのを収束するまで繰り返すという手法。&#xA;Kmeans には収束が早い k-means++法が実装されており、distanceMeasure はデフォルトで euclidean となっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Task nodes で EMR クラスタのスケールインを高速化する</title>
      <link>https://www.sambaiz.net/article/445/</link>
      <pubDate>Sun, 19 Mar 2023 22:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/445/</guid>
      <description>&lt;p&gt;EMR クラスタは YARN の ResourceManager などが動く Master (primary) node と、 Core nodes および Task nodes から&lt;a href=&#34;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html&#34;&gt;構成される&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/427/&#34;&gt;Hadoop YARN によってアプリケーションにリソースが割り当てられる流れと割り当てられているリソース量の確認 - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>S3のバージョニングを有効にして誤って上書きや削除してしまったオブジェクトを復旧できるようにする</title>
      <link>https://www.sambaiz.net/article/444/</link>
      <pubDate>Wed, 15 Mar 2023 22:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/444/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/userguide/Versioning.html&#34;&gt;S3のバージョニング&lt;/a&gt;は S3 の Bucket に設定できる項目で、&#xA;有効にすると全ての PUT したデータがバージョンIDと共に残るようになり、DELETE した際も実際に削除はせず Delete marker が最新のバージョンとして書き込まれるようになる。&#xA;最新バージョンが削除マーカーのオブジェクトを GET するとオブジェクトがないときと同様に Not found になるが、Delete marker のバージョンを削除するとそのオブジェクトを再度取得できるようになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>相関比でカテゴリ変数と目的変数の相関の強さを表す</title>
      <link>https://www.sambaiz.net/article/441/</link>
      <pubDate>Thu, 09 Mar 2023 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/441/</guid>
      <description>&lt;p&gt;単に相関係数というと共分散 \(\mathrm{Cov}(x,y) = E[(x - \bar{x})(y - \bar{y})]\) と標準偏差 \(\sigma_x = \sqrt{E[(x-\bar{x})^2]}\) で表されるピアソンの積率相関係数のことを指すことが多い。&lt;/p&gt;&#xA;&lt;p&gt;$$ \rho_{xy} = \frac{\mathrm{Cov}(x,y)}{\sigma_x \sigma_y} $$&lt;/p&gt;&#xA;&lt;p&gt;ただ、この係数は量的変数同士の線形な相関を表すものなので質的変数であるカテゴリ変数に対しては用いることができない。&#xA;質的変数と量的変数の相関は、全変動 \(\Sigma(x-\bar{x})^2\) に対する級間変動 (= 全変動 - 級内変動) の割合である相関比で表すことができる。&#xA;0から1までの値を取り1に近いほど相関が強いと言える。例えば全カテゴリの平均値が等しい場合0となり相関がないということになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>sbt-assembly で依存ライブラリを含んだ über-jar を生成する</title>
      <link>https://www.sambaiz.net/article/440/</link>
      <pubDate>Sun, 05 Mar 2023 22:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/440/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/sbt/sbt-assembly&#34;&gt;sbt-assembly&lt;/a&gt; は依存ライブラリを含んだ über-jar (fat-jar) を生成するためのプラグイン。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat peojcts/plugins.sbt &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addSbtPlugin&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;com.eed3si9n&amp;#34;&lt;/span&gt; % &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sbt-assembly&amp;#34;&lt;/span&gt; % &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2.1.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sbt assembly&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ java -jar ./target/scala-2.13/sbt-assembly-test-0.1.0-SNAPSHOT.jar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello world!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依存ライブラリの依存先も含めて複数の JAR が同じパスのファイルを含み、その中身が異なっている場合、Deduplicate found different file contents エラーになってしまうので、&#xA;その際は &lt;a href=&#34;https://github.com/sbt/sbt-assembly#assembly-task&#34;&gt;assemblyMergeStrategy&lt;/a&gt; でそれをどのように解決するかを設定する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>平衡二分探索木 AVL木 を Go で実装して高さが最小限に保たれることを確認する</title>
      <link>https://www.sambaiz.net/article/439/</link>
      <pubDate>Sat, 25 Feb 2023 00:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/439/</guid>
      <description>&lt;p&gt;AVL木は二分探索木の一種である平衡二分探索木の一つで、高さを最小限に保つことで操作の計算量を抑えることができる。&#xA;変更があるたびに左右の部分木のバランスを見て高さに2以上の差がある場合、回転してリバランスする。&#xA;他の平衡二分探索木としては赤黒木などがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena for Apache Spark の Notebook で DataFrame.toPandas().plot() した際の日本語が文字化けしないようにする</title>
      <link>https://www.sambaiz.net/article/438/</link>
      <pubDate>Mon, 06 Feb 2023 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/438/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/athena/latest/ug/notebooks-spark.html&#34;&gt;Athena for Apache Spark&lt;/a&gt; は re:Invent 2022 で発表された マネージドでサーバーレスな Jupyter Notebook からインタラクティブに Spark による分析が行える機能。&#xA;Athena は アドホックに SQL を実行して分析できる手軽さと、サーバーレスによって使ってない時間帯は料金がかからない利点があったが、&#xA;重いクエリを実行すると scale factor やタイムアウトによって失敗することがあったので今回 Spark が動かせるようになり用途の幅の広がりを感じる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java から Go でビルドした shared library を JNI と JNA で呼び出した際の速度を比較する</title>
      <link>https://www.sambaiz.net/article/437/</link>
      <pubDate>Sun, 29 Jan 2023 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/437/</guid>
      <description>&lt;p&gt;JNI (Java Native Interface) は Java から JVM 外で実行される C/C++ のネイティブコードを呼び出したり、ネイティブコードから Java のコードを呼び出すためのインタフェースで、&#xA;これにより重い処理を高速化したり複数プラットフォームで処理を共通化することができる。&#xA;Java からネイティブコードを呼ぶのは &lt;a href=&#34;https://github.com/java-native-access/jna&#34;&gt;JNA (Java Native Access)&lt;/a&gt; というライブラリを用いることでもでき、&#xA;実装は簡単だが、速度についてはなるべく問題にならないよう配慮はされているものの JNI と比べると差があるようだ。&#xA;そこで実際に JNI と JNA で簡単な shared library を呼び出した際の速度を比較してみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JMH で Java のコードのベンチマークを取る</title>
      <link>https://www.sambaiz.net/article/435/</link>
      <pubDate>Sat, 28 Jan 2023 17:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/435/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/openjdk/jmh&#34;&gt;JMH (Java Microbenchmark Harness)&lt;/a&gt; は Java のベンチマークツール。&#xA;小さなコードを単純に実行するとコードが大きいときには行われない JIT コンパイルなどの最適化がはたらくことで実際よりパフォーマンスが高く出ることがあるが、&#xA;JMH はこれを防ぐことでより正確にベンチマークを取ることができるそうだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python の組み込みコンテナと collections.deque</title>
      <link>https://www.sambaiz.net/article/436/</link>
      <pubDate>Mon, 09 Jan 2023 16:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/436/</guid>
      <description>&lt;p&gt;(C)Python には list, tuple, dict, set が組み込まれており、&lt;a href=&#34;https://docs.python.org/3/library/collections.html&#34;&gt;collections&lt;/a&gt; モジュールで deque が実装されている。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Python &lt;span style=&#34;color:#bd93f9&#34;&gt;3.10&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;listhttpsdocspythonorg3librarystdtypeshtmllist&#34;&gt;&lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#list&#34;&gt;list&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;連結リストではなく可変長配列で&lt;a href=&#34;https://docs.python.org/3/faq/design.html#how-are-lists-implemented-in-cpython&#34;&gt;実装されている&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/253/&#34;&gt;C++ STLのContainersとAlgorithms - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で EKS クラスタを立ち上げ EMR on EKS に登録し Spark のジョブを動かす</title>
      <link>https://www.sambaiz.net/article/434/</link>
      <pubDate>Mon, 02 Jan 2023 14:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/434/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/emr/latest/EMR-on-EKS-DevelopmentGuide/emr-eks.html&#34;&gt;EMR on EKS&lt;/a&gt; は EKS 上で Spark を動かす機能。&#xA;通常の EMR が Hadoop クラスタの管理も行うのに対して、EMR on EKS はコンテナの起動のみを担う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/409/&#34;&gt;AWS CLIでEMRクラスタを立ち上げSparkのアプリケーションを実行する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hadoop YARN でリソースの割り当てを行う Scheduler と Dominant Resource Fairness (DRF)</title>
      <link>https://www.sambaiz.net/article/433/</link>
      <pubDate>Sat, 24 Dec 2022 22:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/433/</guid>
      <description>&lt;p&gt;YARN の ResourceManager はクライアントからアプリケーションを受け取って ApplicationMaster を立ち上げる ApplicationsManager と、&#xA;ApplicationMaster からリクエストを受けリソースの割り当てを行う &lt;a href=&#34;https://github.com/apache/hadoop/blob/release-3.3.5-RC0/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/YarnScheduler.java&#34;&gt;Scheduler&lt;/a&gt; から構成される。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/427/&#34;&gt;Hadoop YARN によってアプリケーションにリソースが割り当てられる流れと割り当てられているリソース量の確認 - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Airflow の Callback で複数の Task からなる処理のリトライを行う</title>
      <link>https://www.sambaiz.net/article/432/</link>
      <pubDate>Sun, 18 Dec 2022 17:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/432/</guid>
      <description>&lt;p&gt;EMR クラスタで処理を行う際、EmrAddStepsOperator で EMR クラスタに Step を追加した後、EmrStepSensor でその実行が終わるのを待つが、&#xA;Step の処理が失敗しても Failed するのは Sensor の方なので、リトライしても Step が再実行されないという問題がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudTrail で AWS 上のリソースの操作記録を確認する</title>
      <link>https://www.sambaiz.net/article/431/</link>
      <pubDate>Tue, 06 Dec 2022 21:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/431/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/cloudtrail&#34;&gt;AWS CloudTrail&lt;/a&gt; は AWS の API の呼び出しを記録するサービスで、セキュリティ監査や GuardDuty など他のサービスで用いられる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/430/&#34;&gt;GuardDuty, Inspector, Macie などによって検出されたセキュリティ上の問題を AWS Security Hub で確認する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>GuardDuty, Inspector, Macie などによって検出されたセキュリティ上の問題を AWS Security Hub で確認する</title>
      <link>https://www.sambaiz.net/article/430/</link>
      <pubDate>Sun, 04 Dec 2022 10:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/430/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/security-hub&#34;&gt;AWS Security Hub&lt;/a&gt; は 各種サービスによって検出されたセキュリティ上の問題をまとめて確認できるサービス。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/430/images/findings.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/430/images/findings_hu_2810ff685600b2fc.png&#34; width=&#34;600&#34; height=&#34;279&#34; alt=&#34;findings&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;h2 id=&#34;セキュリティ標準httpsdocsawsamazoncomsecurityhublatestuserguidestandards-availablehtml&#34;&gt;&lt;a href=&#34;https://docs.aws.amazon.com/securityhub/latest/userguide/standards-available.html&#34;&gt;セキュリティ標準&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Security Hub は次のセキュリティ標準をサポートしており、有効にすると &lt;a href=&#34;https://docs.aws.amazon.com/config/latest/developerguide/WhatIsConfig.html&#34;&gt;AWS Config&lt;/a&gt; にルールが作成される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Airflow で 過去の Task への依存を表す</title>
      <link>https://www.sambaiz.net/article/429/</link>
      <pubDate>Wed, 30 Nov 2022 09:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/429/</guid>
      <description>&lt;p&gt;定期的な集計の際に過去の集計値が必要になることがあるが、そのようなワークフローを単純に定期実行すると、処理が間に合わなかったり失敗した際にそれ以後の処理が連鎖的に失敗してしまう。&#xA;Airflow では次の方法で過去の Task への依存を記述することができ、これによって過去の集計が終わるのを待ったり、失敗時に依存しているものだけをまとめて再実行することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK で Amazon Managed Workflow for Apache Airflow (MWAA) の環境を作成しワークフローを実行する</title>
      <link>https://www.sambaiz.net/article/428/</link>
      <pubDate>Mon, 28 Nov 2022 19:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/428/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/managed-workflows-for-apache-airflow&#34;&gt;Amazon Managed Workflow for Apache Airflow (MWAA)&lt;/a&gt; は&#xA;&lt;a href=&#34;https://airflow.apache.org/&#34;&gt;Apache Airflow&lt;/a&gt; のマネージドサービス。&#xA;サーバーレスの Step Functions とは異なりインスタンス時間のコストが&lt;a href=&#34;https://aws.amazon.com/managed-workflows-for-apache-airflow/pricing/&#34;&gt;かかる&lt;/a&gt;が、&#xA;Airflow の豊富な機能や、AWSを含むサードパーティの &lt;a href=&#34;https://airflow.apache.org/docs/#providers-packagesdocsapache-airflow-providersindexhtml&#34;&gt;Providers packages&lt;/a&gt; が利用できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hadoop YARN によってアプリケーションにリソースが割り当てられる流れと割り当てられているリソース量の確認</title>
      <link>https://www.sambaiz.net/article/427/</link>
      <pubDate>Wed, 23 Nov 2022 18:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/427/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/YARN.html&#34;&gt;YARN&lt;/a&gt; は Hadoop クラスタのリソース管理やスケジューリングを行うモジュール。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリケーションにリソースが割り当てられる流れhttpshadoopapacheorgdocsstablehadoop-yarnhadoop-yarn-sitewritingyarnapplicationshtml&#34;&gt;&lt;a href=&#34;https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/WritingYarnApplications.html&#34;&gt;アプリケーションにリソースが割り当てられる流れ&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;ResourceManager (RM)&lt;/strong&gt; がクライアントからアプリケーションを受け取ると、&lt;strong&gt;ApplicationMaster (AM)&lt;/strong&gt; を立ち上げアプリケーションの実行に必要な情報を受け渡す。&#xA;ApplicationMaster は ResourceManager にリソースの割り当てをリクエストし、割り当てられたら各ノードで動いている &lt;strong&gt;NodeManagers (NMs)&lt;/strong&gt; とやり取りしてコンテナを立ち上げアプリケーションを動かす。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Compose の service に AWS のクレデンシャルを渡す</title>
      <link>https://www.sambaiz.net/article/426/</link>
      <pubDate>Wed, 23 Nov 2022 15:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/426/</guid>
      <description>&lt;p&gt;ローカルで Docker コンテナを動かす際に AWS のクレデンシャルを渡すため ~/.aws を&lt;a href=&#34;https://docs.docker.com/storage/volumes/&#34;&gt;マウント&lt;/a&gt;することがあるが、&#xA;Docker Compose でも &lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes&#34;&gt;volumes&lt;/a&gt; で同様のことができる。&#xA;また、&lt;a href=&#34;https://docs.docker.com/compose/compose-file/compose-file-v3/#secrets&#34;&gt;secrets&lt;/a&gt; というのもあって、&#xA;&lt;a href=&#34;https://docs.docker.com/engine/swarm/secrets/&#34;&gt;ドキュメント&lt;/a&gt; によると Swarm 前提の機能に見えるが、実際は&lt;a href=&#34;https://github.com/docker/compose/issues/8707&#34;&gt;スタンドアロンで動く&lt;/a&gt;。&#xA;ただし、これは開発用のためのもので実際はただ bind しているだけのようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker Compose で Apache Airflow を起動しワークフローを実行する</title>
      <link>https://www.sambaiz.net/article/425/</link>
      <pubDate>Sat, 19 Nov 2022 16:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/425/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://airflow.apache.org/&#34;&gt;Apache Airflow&lt;/a&gt;はワークフローのスケジューリングやパイプラインの可視化などを行うOSS。&#xA;スケーラブルで豊富な機能を持ち、&#xA;リポジトリに含まれている AWS や Slack といったサードパーティの &lt;a href=&#34;https://airflow.apache.org/docs/#providers-packagesdocsapache-airflow-providersindexhtml&#34;&gt;Providers packages&lt;/a&gt; に加えて、&#xA;自前の Operator を実装して拡張できるようになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>New RelicでAWSのコストをモニタリングする</title>
      <link>https://www.sambaiz.net/article/424/</link>
      <pubDate>Sun, 13 Nov 2022 15:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/424/</guid>
      <description>&lt;h2 id=&#34;billingのメトリクスの可視化&#34;&gt;Billingのメトリクスの可視化&lt;/h2&gt;&#xA;&lt;p&gt;Billing のメトリクスは CloudWatch にあるので、&lt;strong&gt;us-east-1&lt;/strong&gt; の全てのメトリクスを CloudWatch Metric Streams で送っていれば次のようなクエリで参照できる。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/424/images/billing_metrics.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/424/images/billing_metrics_hu_fbef121af60b76f9.png&#34; width=&#34;600&#34; height=&#34;257&#34; alt=&#34;Billingのメトリクス&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;max&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.EstimatedCharges&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;min&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.EstimatedCharges&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; daily_usage&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt; Metric&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt; aws.Namespace &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;AWS/Billing&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;metricName&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aws.billing.EstimatedCharges&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.ServiceName&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FACET monthOf(&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;timestamp&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;), &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;aws.billing.ServiceName&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TIMESERIES &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;day&lt;/span&gt; SLIDE &lt;span style=&#34;color:#ff79c6&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;day&lt;/span&gt; SINCE &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt; week ago&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;入っている値が月の累積値なので &lt;a href=&#34;https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/nrql-query-tutorials/create-smoother-charts-sliding-windows/&#34;&gt;Sliding window&lt;/a&gt; で一日前との差分を取ることで日のコストを出している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scala 2/3 の列挙型と既存の型へのフィールドの追加</title>
      <link>https://www.sambaiz.net/article/423/</link>
      <pubDate>Sat, 12 Nov 2022 23:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/423/</guid>
      <description>&lt;h2 id=&#34;scala-2&#34;&gt;Scala 2&lt;/h2&gt;&#xA;&lt;p&gt;Scala 2 には Java のような enum は存在せず　&lt;a href=&#34;https://www.scala-lang.org/api/2.13.x/scala/Enumeration.html&#34;&gt;Enumeration&lt;/a&gt; や case object が用いられる。&#xA;また、implicit class を import することで既存の型へフィールドを追加することができる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;trait&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Animal&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Animal&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Animal&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Cat&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Animal&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Converter&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;implicit&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;AnimalConverter&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;animal&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;Animal&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; hello&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; animal &lt;span style=&#34;color:#ff79c6&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Animal&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;wan!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Animal&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Cat&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nya!&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; Converter.AnimalConverter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;App&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; main&lt;span style=&#34;color:#ff79c6&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Animal&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;Cat&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;hello&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// nya!&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;scala-3&#34;&gt;Scala 3&lt;/h2&gt;&#xA;&lt;p&gt;Scala 3 で &lt;a href=&#34;https://docs.scala-lang.org/scala3/reference/enums/enums.html&#34;&gt;enum&lt;/a&gt; や &lt;a href=&#34;https://docs.scala-lang.org/scala3/reference/contextual/extension-methods.html&#34;&gt;extension&lt;/a&gt;&#xA;が追加されたことにより次のように書けるようになった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Cost Management でコストをモニタリングし最適化する</title>
      <link>https://www.sambaiz.net/article/422/</link>
      <pubDate>Thu, 10 Nov 2022 21:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/422/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/cost-management/latest/userguide/what-is-costmanagement.html&#34;&gt;AWS Cost Management&lt;/a&gt;は&#xA;コストのモニタリングや予測、最適化のための機能群。&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-what-is.html&#34;&gt;Billing&lt;/a&gt; にもレポートなど類似の機能があるが、&#xA;Billing が 現在のコストを管理するための機能群なのに対して、Cost Management は将来のコストをターゲットとしているようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub ActionsからOIDCでassumeできるRoleをCDKで作成する</title>
      <link>https://www.sambaiz.net/article/421/</link>
      <pubDate>Sun, 30 Oct 2022 02:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/421/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/aws-actions/configure-aws-credentials&#34;&gt;aws-actions/configure-aws-credentials&lt;/a&gt; は AWS の Role を assume する Actionで、&#xA;Access Key による認証もサポートしているが、&lt;a href=&#34;https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect&#34;&gt;GitHub の OIDC Provider&lt;/a&gt;&#xA;が発行した JWT を用いることで認証情報を持つことなくセキュアにAPIを呼ぶことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ScalaでSparkのアプリケーションを開発してGitHub ActionsでデプロイしEMRでリモートデバッグする</title>
      <link>https://www.sambaiz.net/article/420/</link>
      <pubDate>Fri, 21 Oct 2022 23:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/420/</guid>
      <description>&lt;p&gt;Spark は開発で用いられている Scala に加えて Java や Python のAPIを提供しており、技術スタックや他コンポーネントとの兼ね合いなどによって選択することができる。&lt;/p&gt;&#xA;&lt;p&gt;Python は データ分析や機械学習のスキルセットとの親和性の高さや Glue Studio 上で編集して実行できる手軽さがある一方、エラーが分かりづらく JVM と Python Worker 間でデータをやり取りする必要があるのでパフォーマンスの点でも不利。&#xA;また、JVM の制御の外である Python インタプリタが YARN などのリソースマネージャによって割り当てられた以上のメモリを確保してしまうと executor が kill されてしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SparkをビルドしIntelliJでリモートデバッグする</title>
      <link>https://www.sambaiz.net/article/419/</link>
      <pubDate>Sun, 09 Oct 2022 19:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/419/</guid>
      <description>&lt;h2 id=&#34;コマンドラインでのビルドhttpssparkapacheorgdocs330building-sparkhtml&#34;&gt;&lt;a href=&#34;https://spark.apache.org/docs/3.3.0/building-spark.html&#34;&gt;コマンドラインでのビルド&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone &lt;span style=&#34;color:#6272a4&#34;&gt;--branch v3.3.0 --depth 1 https://github.com/apache/spark.git &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://asdf-vm.com/guide/getting-started.html#_3-install-asdf&#34;&gt;asdf&lt;/a&gt; で Java 8 をインストールする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install asdf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;e &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;\n. $(brew --prefix asdf)/libexec/asdf.sh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ${ZDOTDIR:&lt;span style=&#34;color:#ff79c6&#34;&gt;-~&lt;/span&gt;}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;.zshrc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf &lt;span style=&#34;color:#6272a4&#34;&gt;--version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;v0.&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf plugin&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;add&lt;/span&gt; java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf list&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;all&lt;/span&gt; java&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf install java corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ asdf &lt;span style=&#34;color:#ff79c6&#34;&gt;global&lt;/span&gt; java corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;. ~/.asdf/plugins/java/set-java-home.zsh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;~/&lt;/span&gt;.zprofile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ java &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openjdk &lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.8.0_342&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenJDK Runtime Environment Corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; (build &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;_342&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;b07)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OpenJDK &lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Bit&lt;/span&gt; Server VM Corretto&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;07&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; (build &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;342&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;b07, mixed &lt;span style=&#34;color:#ff79c6&#34;&gt;mode&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ビルドが通ることを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>deanishe/awgo で Alfred の Workflows で動かすスクリプトを実装する</title>
      <link>https://www.sambaiz.net/article/418/</link>
      <pubDate>Mon, 26 Sep 2022 12:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/418/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/deanishe/awgo&#34;&gt;deanishe/awgo&lt;/a&gt; は Alfred の Workflows で動かすスクリプトを実装するためのライブラリ。&#xA;&lt;a href=&#34;https://pkg.go.dev/github.com/deanishe/awgo#Feedback.NewItem&#34;&gt;NewItem()&lt;/a&gt; で &lt;a href=&#34;https://www.alfredapp.com/help/workflows/inputs/script-filter/json/&#34;&gt;Script Filter JSON&lt;/a&gt; を出力して次の要素に値を渡せるほか&#xA;&lt;a href=&#34;https://pkg.go.dev/github.com/deanishe/awgo/keychain&#34;&gt;keychain&lt;/a&gt; を読み書きしたり&#xA;wf.Args() を呼び workflow:log を引数に渡すことでログを表示する &lt;a href=&#34;https://pkg.go.dev/github.com/deanishe/awgo#MagicAction&#34;&gt;MagicAction&lt;/a&gt; を実行したりできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spark SQLのJOIN時に余分なパーティションが読まれる例とDynamic Partition Pruning (DPP)</title>
      <link>https://www.sambaiz.net/article/417/</link>
      <pubDate>Sun, 11 Sep 2022 16:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/417/</guid>
      <description>&lt;h2 id=&#34;クエリの例&#34;&gt;クエリの例&lt;/h2&gt;&#xA;&lt;p&gt;Spark 3.1.1 ベースの Glue 3.0 で、TPC-DS (scale=1000) の sales テーブルと sales のIDでパーティションを切った store_sales テーブルを JOIN する次のクエリを実行すると 10 DPS で 1分4秒 かかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EMRクラスタで動かしたSparkのログをFluent BitでNew Relicに集約する</title>
      <link>https://www.sambaiz.net/article/416/</link>
      <pubDate>Sun, 04 Sep 2022 14:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/416/</guid>
      <description>&lt;p&gt;Cluster modeでSpark jobを動かすとログが step/ 下に出力されないためコンソール上でもログを確認しづらいのでNew Relicに集約してみる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/409/&#34;&gt;AWS CLIでEMRクラスタを立ち上げSparkのアプリケーションを実行する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena v2でparquetをソースとしmapフィールドを持つテーブルのクエリが成功したり失敗したりする原因</title>
      <link>https://www.sambaiz.net/article/415/</link>
      <pubDate>Tue, 16 Aug 2022 21:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/415/</guid>
      <description>&lt;p&gt;次のようなmapのフィールドを含むログをjsonなどで出力し、Glue Studioでparquetに変換してAthenaでクエリを実行すると、ものによってクエリが成功したり失敗したりする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EMRでSparkを動かす際の設定</title>
      <link>https://www.sambaiz.net/article/414/</link>
      <pubDate>Sat, 13 Aug 2022 19:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/414/</guid>
      <description>&lt;p&gt;AWSでSparkのアプリケーションを動かすマネージドサービスにはEMRとGlueがあって、&#xA;Glueがサーバーレスで手軽にETLジョブを動かすことができる一方、EMRはリソースやパラメータを細かくチューニングすることができる。&#xA;裏を返せば設定が適切でないとリソースをフル活用できず、特にメモリについては余っているにもかかわらずOOMで失敗してしまうことがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Javaで発生したOOMの原因をGCログとヒープダンプから探る</title>
      <link>https://www.sambaiz.net/article/413/</link>
      <pubDate>Thu, 11 Aug 2022 08:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/413/</guid>
      <description>&lt;h2 id=&#34;gcログの可視化&#34;&gt;GCログの可視化&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-Xloggc:/tmp/gc.log&lt;/li&gt;&#xA;&lt;li&gt;-XX:+PrintGCDetails&lt;/li&gt;&#xA;&lt;li&gt;-XX:+PrintGCDateStamps&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;で次のようなGCのログが出力される。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /tmp/gc.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:30.738+0000: [GC (Allocation Failure) [PSYoungGen: 638269K-&amp;gt;3108K(665600K)] 2017703K-&amp;gt;1382542K(2063872K), 0.0084360 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:31.320+0000: [GC (Allocation Failure) [PSYoungGen: 640548K-&amp;gt;2565K(666624K)] 2019982K-&amp;gt;1382000K(2064896K), 0.0086070 secs] [Times: user=0.05 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:31.878+0000: [GC (Allocation Failure) [PSYoungGen: 640005K-&amp;gt;2565K(667136K)] 2019440K-&amp;gt;1382000K(2065408K), 0.0086495 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2022-08-08T16:35:32.451+0000: [GC (Allocation Failure) [PSYoungGen: 643589K-&amp;gt;3301K(668672K)] 2023024K-&amp;gt;1382736K(2066944K), 0.0087513 secs] [Times: user=0.04 sys=0.00, real=0.01 secs] &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/chewiebug/GCViewer&#34;&gt;GCViewer&lt;/a&gt;でこのファイルを開くと次のようなグラフが描画される。&#xA;上部がNew領域、下部がOld領域を表し、Old領域の使用量である紫の線が一杯になると黒い線のFull GCが走り、ヒープ使用量の合計である青い線も下がっている。&#xA;この例では徐々にGCでの減り分が少なくなっていき、後半はほとんど真っ黒なので常にFull GCが発生していることが分かる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebAssemblyでGoの関数をブラウザのJavaScriptから呼び出す</title>
      <link>https://www.sambaiz.net/article/412/</link>
      <pubDate>Sat, 30 Jul 2022 00:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/412/</guid>
      <description>&lt;p&gt;ボタンを押すとGoで実装された関数が呼ばれその中でテキストの値が更新される。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/412/images/wasm.gif&#34; width=&#34;487&#34; height=&#34;223&#34; alt=&#34;goの関数による値の更新&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version go1.18 darwin/amd64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/syscall/js&#34;&gt;syscall/js&lt;/a&gt; packageでjs側の変数を参照したり関数を呼び出すことができる。&#xA;&lt;a href=&#34;https://go.dev/doc/go1.12#minor_library_changes&#34;&gt;Go 1.12&lt;/a&gt;で破壊的変更があり NewCallback() は FuncOf() に変更された。&#xA;返り値は &lt;a href=&#34;https://pkg.go.dev/syscall/js#ValueOf&#34;&gt;js.ValueOf()&lt;/a&gt; に対応している型である必要がありstructを返すとエラーになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JDWPを有効にしてリモートマシンで動いているJavaアプリケーションをデバッグする</title>
      <link>https://www.sambaiz.net/article/411/</link>
      <pubDate>Sun, 24 Jul 2022 21:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/411/</guid>
      <description>&lt;h2 id=&#34;jdwpを有効にするhttpsdocsoraclecomjavase7docstechnotesguidesjpdaconninvhtml&#34;&gt;&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&#34;&gt;JDWPを有効にする&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;実行時に &lt;a href=&#34;https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/conninv.html&#34;&gt;-agentlib:jdwp&lt;/a&gt; を渡すとJVMとデバッガーがやり取りする際に用いられるJDWP(Java Debug Wire Protocol)を有効にできる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;transport=dt_socket,server=y,address=*:5005 5005番ポートでデバッガーを待ち受ける。Java 8以前は *: が不要。&lt;/li&gt;&#xA;&lt;li&gt;suspend=n メインクラスがロードされる直前にJVMを一時停止しない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;処理が終わると終了するタイプのアプリケーションでは、先にデバッガーを起動し待ち受けておいて、server=n で接続しにいったり、&#xA;suspend=y にしてデバッガーが接続されるまで停止させることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CopilotでECS on Fargate上にコンテナをデプロイしECS Execによるコマンドの実行やSession Managerによるポートフォワーディングを行う</title>
      <link>https://www.sambaiz.net/article/410/</link>
      <pubDate>Sat, 23 Jul 2022 13:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/410/</guid>
      <description>&lt;p&gt;リモートマシンで動作中のアプリケーションを調査する際に、非コンテナ環境であればsshdが動いていることが多いのでSSH接続してコマンドを実行することがあるが、&#xA;コンテナでは大抵動いていないので中に入れない。どうしても必要であれば動かすという手もあるがポートの開放や鍵の管理の点でなるべく避けたい。&#xA;今回はECS on Fargateのコンテナでsshdを動かすことなくコマンドの実行やポートフォワーディングを行う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CLIでEMRクラスタを立ち上げSparkのアプリケーションを実行する</title>
      <link>https://www.sambaiz.net/article/409/</link>
      <pubDate>Wed, 22 Jun 2022 00:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/409/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/emr/&#34;&gt;Amazon EMR&lt;/a&gt;はEC2やEKS上にSparkやHive, Prestoのクラスタを構築するサービス。&#xA;SparkのマネージドサービスであるGlueと比べると、Glueはサーバーレスで手軽にSparkによるETL処理をを行えるのに対して、EMRはスポットインスタンスなどを利用したコストパフォーマンスの良さと詳細なチューニングを行うことができるという特長があるが、&lt;a href=&#34;https://aws.amazon.com/jp/emr/serverless/&#34;&gt;EMR Serverless&lt;/a&gt;がリリースされたのでその差は少し縮まっているように感じる。Glueにはスキーマを指定する必要がない&lt;a href=&#34;https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-crawler-pyspark-extensions-dynamic-frame.html&#34;&gt;DynamicFrame&lt;/a&gt;や前の続きから実行できるBookmarkといった便利な機能もあるが、重い処理を立て続けに実行するとコストが嵩んだりDPUなどのクォータに引っかかることもあるので適宜使い分けていきたい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NewRelicのMetricsとEventsの特性とNRQLによるクエリ</title>
      <link>https://www.sambaiz.net/article/408/</link>
      <pubDate>Thu, 09 Jun 2022 20:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/408/</guid>
      <description>&lt;p&gt;NewRelicはテレメトリデータを、&lt;a href=&#34;https://docs.newrelic.com/docs/data-apis/understand-data/new-relic-data-types/&#34;&gt;MELT&lt;/a&gt;と呼ばれる、&#xA;Metrics, Events, Logs, Tracesに分類している。&#xA;送られたデータは標準SQL-likeの&lt;a href=&#34;https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/get-started/introduction-nrql-new-relics-query-language/&#34;&gt;NRQL&lt;/a&gt;で参照しダッシュボードに表示したりアラートの条件にすることができるが、データの種類によっては必要な値が得られないことがある。&lt;/p&gt;&#xA;&lt;h2 id=&#34;metricshttpsdocsnewreliccomdocsdata-apisunderstand-datanew-relic-data-typesmetrics&#34;&gt;&lt;a href=&#34;https://docs.newrelic.com/docs/data-apis/understand-data/new-relic-data-types/#metrics&#34;&gt;Metrics&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;定期的に送られる集計値。集計値を持つことで転送量が抑えられ長期に渡るトレンドを追いやすくなるが、後で集計するための情報が失われてしまうというトレードオフがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>最大フロー問題と最小カット問題とFord-Fulkersonのアルゴリズム</title>
      <link>https://www.sambaiz.net/article/407/</link>
      <pubDate>Sun, 05 Jun 2022 18:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/407/</guid>
      <description>&lt;h2 id=&#34;最大フロー問題&#34;&gt;最大フロー問題&lt;/h2&gt;&#xA;&lt;p&gt;最大フロー問題は容量を持つパスで構成されるネットワークでのソースからシンクまでのフローを最大化する問題。&#xA;各パスを流れるフローがその容量を超えず各ノードに入る量と出る量が乖離しないようにソースからシンクまで全量を送る必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Segment TreeとBineary Indexed Tree (BIT)で部分和を求める</title>
      <link>https://www.sambaiz.net/article/406/</link>
      <pubDate>Sun, 29 May 2022 19:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/406/</guid>
      <description>&lt;h2 id=&#34;segment-tree&#34;&gt;Segment Tree&lt;/h2&gt;&#xA;&lt;p&gt;配列の各区間での計算結果をノードに持つことで任意の区間での計算をO(log n)で行えるようにした完全二分木。&#xA;以下の例では和を持っているが最小値にすれば&lt;a href=&#34;https://en.wikipedia.org/wiki/Range_minimum_query&#34;&gt;Range Minimum Query (RMQ)&lt;/a&gt;を解くことができ、ソートした列を持てばマージソートになる。値を更新する際は下から順に再計算していく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athenaで他アカウントのテーブルを参照するために必要な設定</title>
      <link>https://www.sambaiz.net/article/405/</link>
      <pubDate>Tue, 17 May 2022 23:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/405/</guid>
      <description>&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/405/images/structure.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/405/images/structure_hu_6504d01ea0a575e6.png&#34; width=&#34;600&#34; height=&#34;197&#34; alt=&#34;構成&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/392/&#34;&gt;Redshift Serverlessと他のサーバーレス集計サービス、Glue Data Catalogのテーブルへのクエリ実行 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;クエリを実行するBorrower Accountから、Data Catalogやデータが存在するOwner Accountのリソースにアクセスする必要がある。&#xA;他アカウントのリソースにアクセスする手段としてはアクセストークンやAssumeRoleによるものもあるが、&#xA;今回の場合クエリの実行に用いるRoleにBorrower AccountのAthenaの権限も必要なので、1つのRoleで両方のアカウントのリソースにアクセスできるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>繰り返しコマンドを実行する際都度プロセスを生成する場合と常駐させておきUNIXドメインソケットで入出力を行う場合の速度比較</title>
      <link>https://www.sambaiz.net/article/404/</link>
      <pubDate>Fri, 06 May 2022 20:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/404/</guid>
      <description>&lt;p&gt;一部の処理が異なる言語で書かれているなどしてコマンドを繰り返し実行するとプロセス生成の度にメモリ領域の確保などのオーバーヘッドが発生する。常時プロセスを動かしておきプロセス間通信で入出力を行えばこれを回避できそうだが実際どれくらい速度に差が出るのかGoでコマンドを作ってベンチマークを取ってみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NewRelic CodeStreamでコードの質問やデバッグを効率的に行えるようにする</title>
      <link>https://www.sambaiz.net/article/403/</link>
      <pubDate>Wed, 04 May 2022 22:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/403/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://newrelic.com/jp/codestream&#34;&gt;New Relic CodeStream&lt;/a&gt;はIDE上でコードの質問やIssue/PRの作成、デバッグを行う際に役に立つプラグインで、IntelliJやVSCodeなどで提供されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athenaのデータソースコネクタとユーザー定義関数(UDF)を実装する</title>
      <link>https://www.sambaiz.net/article/402/</link>
      <pubDate>Sat, 23 Apr 2022 18:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/402/</guid>
      <description>&lt;p&gt;AthenaにはLambdaをコネクタとしてS3以外のデータソースにアクセスできるFederate Queryという機能があって、&lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation&#34;&gt;公式のリポジトリ&lt;/a&gt;でBigQueryやSnowflakeなど様々なデータソースのコネクタが提供されているが自作することもできる。&#xA;今回は&lt;a href=&#34;https://github.com/awslabs/aws-athena-query-federation/tree/master/athena-example&#34;&gt;Example Connector&lt;/a&gt;を参考にしながら最低限のコネクタを実装しその動作を確認する。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/athena-connector-udf-example&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudWatch Logsを介さずにLambdaのテレメトリを行うnewrelic-lambda-extensionとその仕組み</title>
      <link>https://www.sambaiz.net/article/401/</link>
      <pubDate>Fri, 08 Apr 2022 12:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/401/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/get-started/monitoring-aws-lambda-serverless-monitoring&#34;&gt;New RelicにLambdaのログを転送する&lt;/a&gt;には、CloudWatch Logsに出力したものをサブスクライブして送るLambda function &lt;a href=&#34;https://github.com/newrelic/aws-log-ingestion&#34;&gt;aws-log-ingestion&lt;/a&gt;を用いる従来の方法のほかに、Lambda layer &lt;a href=&#34;https://github.com/newrelic/newrelic-lambda-extension&#34;&gt;newrelic-lambda-extension&lt;/a&gt;を用いる方法があって、トレースログなどをCloudWatc Logsに出力することなく送れるのでコストを最小限に抑えられる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>New RelicのGraphQL API、NerdGraphでリソースを取得する</title>
      <link>https://www.sambaiz.net/article/400/</link>
      <pubDate>Fri, 01 Apr 2022 22:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/400/</guid>
      <description>&lt;p&gt;New Relicの&lt;a href=&#34;https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/&#34;&gt;NerdGraph&lt;/a&gt;はGraphQLのAPIで、リソースを取得したり更新することができる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST https://api.newrelic.com/graphql &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;-H &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;-H &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;API-Key: *****&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;-d &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;{ &amp;#34;query&amp;#34;:  &amp;#34;{ requestContext { userId apiKey } actor { user { name } } }&amp;#34; }&amp;#39;&lt;/span&gt; | jq&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;actor&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Taiki Sakamoto&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;requestContext&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;apiKey&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*****&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*****&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/#explorer&#34;&gt;GraphiQL explorer&lt;/a&gt;で項目を選ぶとクエリが生成される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Relicでインフラやアプリケーションをモニタリングする</title>
      <link>https://www.sambaiz.net/article/399/</link>
      <pubDate>Wed, 30 Mar 2022 19:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/399/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://newrelic.com/&#34;&gt;New Relic&lt;/a&gt;はインフラやアプリケーションをモニタリングするSaaSで、同種のサービスとしてはDatadogがある。&#xA;2020年に製品や&lt;a href=&#34;https://newrelic.com/pricing&#34;&gt;課金体系&lt;/a&gt;が&lt;a href=&#34;https://newrelic.com/jp/blog/nerdlog/new-relic-one-observability-made-simple&#34;&gt;変わり&lt;/a&gt;、転送量とユーザー数に対して課金されるようになったようだ。&#xA;ホストや機能に対して&lt;a href=&#34;https://www.datadoghq.com/ja/pricing/&#34;&gt;課金&lt;/a&gt;されるDatadogと比べると、少人数で多くのインスタンスを管理している場合に有利ということになる。また、Datadogの課金体系はやや複雑で頻繁に台数が増減する環境では請求がどの程度になるか読みづらいところがあるが、こちらは分かりやすい。新しい機能を使っても単価が上がることもないのでいろいろと試しやすいのも良いと思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCode NeovimでVSCodeをVimのように操作する</title>
      <link>https://www.sambaiz.net/article/398/</link>
      <pubDate>Tue, 15 Mar 2022 00:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/398/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/vscode-neovim/vscode-neovim&#34;&gt;VSCode Neovim&lt;/a&gt;はVSCodeをVimのように操作できるようにするExtension。&#xA;同種のExtensionとしてVimをエミュレートする&lt;a href=&#34;https://github.com/VSCodeVim/Vim&#34;&gt;VSCodeVim&lt;/a&gt;というのもあるが、&#xA;こちらはエミュレートするのではなく実際の&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt;をバックエンドとすることで&#xA;ほぼ完全な互換性と軽快な動作を実現しているらしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redshift ServerlessとAthenaの性能をTPC-DSのクエリで比較する</title>
      <link>https://www.sambaiz.net/article/397/</link>
      <pubDate>Sun, 20 Feb 2022 01:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/397/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/392/&#34;&gt;Redshift Serverlessと他のサーバーレス集計サービス、Glue Data Catalogのテーブルへのクエリ実行 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;現在PreviewのRedshift ServerlessとAthenaでデータベースのベンチマークであるTPC-DSのクエリを実行し性能を比較する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IntelliJ IDEA/IdeaVimでよく使うショートカット/コマンド</title>
      <link>https://www.sambaiz.net/article/396/</link>
      <pubDate>Wed, 16 Feb 2022 22:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/396/</guid>
      <description>&lt;h2 id=&#34;intellijのショートカットhttpswwwjetbrainscomhelpideareference-keymap-mac-defaulthtml&#34;&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/reference-keymap-mac-default.html&#34;&gt;IntelliJのショートカット&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;基本的にMacのデフォルト設定で使っている。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/finding-and-replacing-text-in-project.html#find_in_project&#34;&gt;Command + Shift + F&lt;/a&gt;: プロジェクト内の文字列検索&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/searching-everywhere.html&#34;&gt;Shift Shift&lt;/a&gt;: プロジェクト内のファイルやシンボルの検索&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/searching-everywhere.html#search_actions&#34;&gt;Command + Shift + A&lt;/a&gt;: アクションの検索&lt;/p&gt;</description>
    </item>
    <item>
      <title>最小二乗法(OLS)による線形回帰と決定係数</title>
      <link>https://www.sambaiz.net/article/395/</link>
      <pubDate>Fri, 11 Feb 2022 00:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/395/</guid>
      <description>&lt;h2 id=&#34;最小二乗法olsによる線形回帰&#34;&gt;最小二乗法(OLS)による線形回帰&lt;/h2&gt;&#xA;&lt;p&gt;線形回帰は時系列データに見られる前の時間との自己相関がないことを前提に&lt;/p&gt;&#xA;&lt;p&gt;$$ y = \alpha + \sum_i^n \beta_i x_i $$&lt;/p&gt;&#xA;&lt;p&gt;のような線形関数で表される回帰方程式によって\(y\)を説明変数\(x\)で説明するモデルを作る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2種の母集団の比較を行う2標本問題での統計量</title>
      <link>https://www.sambaiz.net/article/394/</link>
      <pubDate>Tue, 25 Jan 2022 21:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/394/</guid>
      <description>&lt;p&gt;男性の身長と女性の身長といった異なる分布の2種の母集団について、その独立な標本から母集団の比較を行う問題を2標本問題(two-sample problem)という。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GlueのTPC-DS Connectorでデータを生成する</title>
      <link>https://www.sambaiz.net/article/393/</link>
      <pubDate>Tue, 18 Jan 2022 21:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/393/</guid>
      <description>&lt;p&gt;AthenaのTPC-DS Connectorで250GBのデータを生成してS3に出力しようとしたところ最大までLambdaのリソースを上げてもタイムアウトしてしまったのでGlueで行う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redshift Serverlessと他のサーバーレス集計サービス、Glue Data Catalogのテーブルへのクエリ実行</title>
      <link>https://www.sambaiz.net/article/392/</link>
      <pubDate>Sun, 26 Dec 2021 22:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/392/</guid>
      <description>&lt;h2 id=&#34;redshift-serverless&#34;&gt;Redshift Serverless&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/redshift/redshift-serverless/&#34;&gt;Redshift Serverless&lt;/a&gt;は今年のre:Inventで&lt;a href=&#34;https://www.youtube.com/watch?v=x0xmqJrAVM8&#34;&gt;発表された&lt;/a&gt;、インスタンスを立てることなく従量課金でペタバイトスケールのDWHであるRedshiftを使える機能。&#xA;S3のデータを直接参照できる&lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/c-using-spectrum.html&#34;&gt;Redshift Spectrum&lt;/a&gt;やRDSへの&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/federated-overview.html&#34;&gt;Federated Query&lt;/a&gt;、機械学習の&lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/machine_learning.html&#34;&gt;Redshift ML&lt;/a&gt;も使える。&#xA;分析のような不定期に発生する需要のためにインスタンスを立てておくのはコストの上でハードルが高かったのでこのアップデートは嬉しい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AthenaのFederated QueryでTPC-DS Connectorを用いてデータを生成する</title>
      <link>https://www.sambaiz.net/article/391/</link>
      <pubDate>Sat, 25 Dec 2021 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/391/</guid>
      <description>&lt;p&gt;Athenaの&lt;a href=&#34;https://docs.aws.amazon.com/athena/latest/ug/connect-to-a-data-source.html&#34;&gt;Federated Query&lt;/a&gt;は&#xA;データソースコネクタとなるLambdaを通してDynamoDBやRDSといったS3以外のデータソースにクエリを実行できる機能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Union-Find木で無向グラフに閉路があるかを判定する</title>
      <link>https://www.sambaiz.net/article/390/</link>
      <pubDate>Sun, 12 Dec 2021 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/390/</guid>
      <description>&lt;h2 id=&#34;union-find木&#34;&gt;Union-Find木&lt;/h2&gt;&#xA;&lt;p&gt;Union-Find木はいくつかの素集合の木を持つデータ構造で、&#xA;2つの集合を結合するUnionと、要素の含まれる集合を特定し2つの要素が同じ集合に含まれるかを判定できるFindを、&#xA;ならし計算量 O(α(n)) (α(n) は&lt;a href=&#34;https://en.wikipedia.org/wiki/Ackermann_function&#34;&gt;アッカーマン間数&lt;/a&gt; A(n,n) の逆関数で log(n) よりも小さい)で行うことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FlutterのNavigatorとAuroRoute</title>
      <link>https://www.sambaiz.net/article/389/</link>
      <pubDate>Sat, 11 Dec 2021 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/389/</guid>
      <description>&lt;h2 id=&#34;navigatorhttpsapiflutterdevflutterwidgetsnavigator-classhtml&#34;&gt;&lt;a href=&#34;https://api.flutter.dev/flutter/widgets/Navigator-class.html&#34;&gt;Navigator&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Flutterの&lt;code&gt;Navigator&lt;/code&gt;は&#xA;&lt;a href=&#34;https://api.flutter.dev/flutter/widgets/Route-class.html&#34;&gt;Route&lt;/a&gt;をスタックし画面遷移させるクラスで、&lt;code&gt;push()&lt;/code&gt;や&lt;code&gt;pop()&lt;/code&gt;といったAPIを提供する。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/389/images/navigation.gif&#34; width=&#34;296&#34; height=&#34;640&#34; alt=&#34;Navigator.push()による画面遷移&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;package:flutter/material.dart&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; main() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  runApp(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; MyApp());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;MyApp&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; StatelessWidget {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; MyApp({Key&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; key}) &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;key:&lt;/span&gt; key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @override&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Widget build(BuildContext context) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; MaterialApp(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;title:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Navigation Test&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;theme:&lt;/span&gt; ThemeData(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;primarySwatch:&lt;/span&gt; Colors.blue,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;home:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; Page1(),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Page1&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; StatelessWidget {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; Page1({Key&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; key}) &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;key:&lt;/span&gt; key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @override&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Widget build(BuildContext context) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Scaffold(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;appBar:&lt;/span&gt; AppBar(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;title:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; Text(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page1&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;body:&lt;/span&gt; ListView.builder(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;itemCount:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;itemBuilder:&lt;/span&gt; (context, index) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ListTile(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;title:&lt;/span&gt; Text(index.toString()),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;onTap:&lt;/span&gt; () {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              Navigator.push(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                context,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                MaterialPageRoute(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;builder:&lt;/span&gt; (context) &lt;span style=&#34;color:#ff79c6&#34;&gt;=&amp;gt;&lt;/span&gt; Page2(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;value:&lt;/span&gt; index),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Page2&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extends&lt;/span&gt; StatelessWidget {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; Page2({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Key&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; key, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }) &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;key:&lt;/span&gt; key);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @override&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Widget build(BuildContext context) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; Scaffold(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;appBar:&lt;/span&gt; AppBar(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;title:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; Text(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page2&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;body:&lt;/span&gt; Center(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;child:&lt;/span&gt; Text(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          value.toString(), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;style:&lt;/span&gt; TextStyle(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;fontSize:&lt;/span&gt; value &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上の例ではpush時に&lt;code&gt;Route&lt;/code&gt;を作って渡しているが、&lt;code&gt;MaterialApp&lt;/code&gt;の&lt;code&gt;routes&lt;/code&gt;や&lt;code&gt;onGenerateRoute()&lt;/code&gt;で設定すると一箇所にまとまり &lt;code&gt;Navigator.pushNamed(context, &#39;/aaa&#39;)&lt;/code&gt; のように名前で遷移することができる。&#xA;また、&lt;a href=&#34;https://docs.flutter.dev/development/ui/navigation/deep-linking&#34;&gt;ディープリンク&lt;/a&gt;にも対応しURLで直接開けるようになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FlutterでiOS/Android/Webアプリをビルドする</title>
      <link>https://www.sambaiz.net/article/388/</link>
      <pubDate>Sun, 05 Dec 2021 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/388/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://flutter.dev/&#34;&gt;Flutter&lt;/a&gt;はGoogleによるクロスプラットフォームフレームワーク。&#xA;iOS/Androidに加え、今年の3月にリリースされた&lt;a href=&#34;https://docs.flutter.dev/whats-new#march-3-2021-flutter-engage-edition-20-release&#34;&gt;2.0&lt;/a&gt;でWebがstableになり、&#xA;Windows/Mac/Linuxはbetaとなっている。ネイティブのUIを用いるReact Nativeと異なり独自のUIで、&#xA;MaterialのほかにiOSスタイルの&lt;a href=&#34;https://docs.flutter.dev/development/ui/widgets/cupertino&#34;&gt;Cupertino&lt;/a&gt;も提供されているが、&#xA;分岐等しない限りはプラットフォームによらず同じ見た目になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ラビン-カープアルゴリズムをC&#43;&#43;で実装する</title>
      <link>https://www.sambaiz.net/article/387/</link>
      <pubDate>Sat, 04 Dec 2021 22:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/387/</guid>
      <description>&lt;p&gt;ラビン-カープアルゴリズムはローリングハッシュを用いて部分文字列を探索するアルゴリズム。&#xA;ローリングハッシュは前のハッシュから先頭の要素を取り除き、次の要素を追加することによって&lt;code&gt;O(1)&lt;/code&gt;で次のハッシュが得られる。&#xA;これを満たせるハッシュ関数としては様々なものが考えられるが、例えば文字コードを単に足し合わせる場合、同じ文字が含まれているだけでハッシュが衝突してしまうので、通常は次のように文字列を数値化したものが用いられる。剰余を取れば長い文字列でもオーバーフローを回避できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>カラムナフォーマットParquetの構造とReadの最適化</title>
      <link>https://www.sambaiz.net/article/386/</link>
      <pubDate>Fri, 03 Dec 2021 20:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/386/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/apache/parquet-format&#34;&gt;Parquet&lt;/a&gt;は主にHadoopのエコシステムで使われるカラムナフォーマット。&#xA;CSVのようなrow-basedのフォーマットと比べて不必要なカラムを読まずに済み、また行に関しても絞るための仕組みがあるので効率的にクエリを実行することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;のstructとclass</title>
      <link>https://www.sambaiz.net/article/385/</link>
      <pubDate>Tue, 30 Nov 2021 18:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/385/</guid>
      <description>&lt;p&gt;C++のclassとstructは同じ機能を持っているが、classのデフォルトがprivateなのに対してstructはpublicになっている。&#xA;classはカプセル化のために用いられ、公開フィールドを持ちメソッドをほとんど持たない場合はstructを使うことが多いようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sparkでstructをmapとして扱いexplodeで複数行に展開できるようにする</title>
      <link>https://www.sambaiz.net/article/384/</link>
      <pubDate>Wed, 13 Oct 2021 02:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/384/</guid>
      <description>&lt;p&gt;Sparkでschemaを指定せずjsonなどを&lt;a href=&#34;https://spark.apache.org/docs/3.1.1/api/python/reference/api/pyspark.sql.DataFrameReader.json.html&#34;&gt;読み込むと&lt;/a&gt;次のように入力データから自動で決定される。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/415/&#34;&gt;Athena v2でparquetをソースとしmapフィールドを持つテーブルのクエリが成功したり失敗したりする原因 - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adaptive Replacement Cache (ARC) とは</title>
      <link>https://www.sambaiz.net/article/383/</link>
      <pubDate>Thu, 07 Oct 2021 03:14:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/383/</guid>
      <description>&lt;p&gt;Adaptive Replacement Cache (ARC) は4つのLRU Cacheを用いることでチューニングを自動で行いヒット率を向上させたメモリのページ置換のアルゴリズム。&#xA;PostgreSQLでバッファ管理のため一時期用いられていたが、IBMの特許を回避するため今は使われていない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SparkのWeb UIでJobのStageとExecutorによるTask分散、SQLのplanを確認する</title>
      <link>https://www.sambaiz.net/article/382/</link>
      <pubDate>Thu, 30 Sep 2021 13:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/382/</guid>
      <description>&lt;p&gt;Spark の &lt;a href=&#34;https://spark.apache.org/docs/latest/web-ui.html&#34;&gt;Web UI&lt;/a&gt; は Job や Executor をモニタリングするためのツール。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws-samples/aws-glue-samples/tree/b76ad0583bdc66e9e5a903f9da3a953c9f6aac4f&#34;&gt;aws-glue-samples&lt;/a&gt;から maven:3.6-amazoncorretto-8 ベースでSparkを動かすDockerfileを持ってきて、&#xA;&lt;a href=&#34;https://spark.apache.org/docs/latest/monitoring.html&#34;&gt;History Server&lt;/a&gt;を&lt;a href=&#34;https://docs.aws.amazon.com/glue/latest/dg/monitor-spark-ui-history.html#monitor-spark-ui-history-local&#34;&gt;起動する&lt;/a&gt;。Glue で出力された EventLog のパスと認証情報を渡している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Glue DataBrewでデータを可視化して分析するProjectと機械学習の前処理を行うJobをCDKで作成する</title>
      <link>https://www.sambaiz.net/article/381/</link>
      <pubDate>Mon, 27 Sep 2021 16:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/381/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/glue/features/databrew/&#34;&gt;Glue DataBrew&lt;/a&gt;は、データを可視化してパラメータ間の相関を見たり、カテゴリー変数のエンコードや、欠損値や外れ値を置換する処理をコードなしで実行できるマネージドサービス。Kaggleの&lt;a href=&#34;https://www.kaggle.com/c/house-prices-advanced-regression-techniques&#34;&gt;House Prices Competiton&lt;/a&gt;の学習データで試してみる。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/cdk-databrew-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでAmazon Forecastに時系列データをimportしPredictorを作成して予測結果をS3にexportする</title>
      <link>https://www.sambaiz.net/article/380/</link>
      <pubDate>Mon, 20 Sep 2021 23:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/380/</guid>
      <description>&lt;p&gt;以前コンソール上で実行したAmazon Forecastでの時系列データの学習、予測をGoで行う。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/go-aws-forecast-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/327/&#34;&gt;Amazon Forecastで時系列データの予測を行う - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでCloudWatch Dashboardsを作成しコンソール上からAWSアカウントを持たない外部ユーザーに公開する</title>
      <link>https://www.sambaiz.net/article/379/</link>
      <pubDate>Sat, 18 Sep 2021 14:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/379/</guid>
      <description>&lt;p&gt;CloudWatch Dashboardsは、CloudWatchのメトリクスの値やグラフを配置できるダッシュボードで、&#xA;次のようにCDKで作成できる。&lt;code&gt;metricName&lt;/code&gt; と &lt;code&gt;namespace&lt;/code&gt;、&lt;code&gt;dimensions&lt;/code&gt; はコンソール上で確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでECS(EC2)上にLocust masterとworkerのServiceをデプロイしCloud Mapで名前解決させる</title>
      <link>https://www.sambaiz.net/article/378/</link>
      <pubDate>Tue, 17 Aug 2021 02:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/378/</guid>
      <description>&lt;p&gt;以前、EKS上にLocustをインストールしたが、使わないときにクラスタを落としていたりすると起動を待つ必要があったり、K8sのバージョンアップに追従する必要があったりと少し不便な所があった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでALBとECS(EC2)クラスタを作成し、ecs-cliでDocker Composeの構成をデプロイする</title>
      <link>https://www.sambaiz.net/article/377/</link>
      <pubDate>Sun, 15 Aug 2021 16:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/377/</guid>
      <description>&lt;p&gt;以前、CloudFormationでLBなしのECS(EC2)最小構成を構築したが、今回はALBのTargetGroupまでをCDKで作成し、Serviceのデプロイをecs-cliで行う。&#xA;EC2をECSクラスタに登録する際の &lt;code&gt;echo ECS_CLUSTER=&amp;lt;cluster_name&amp;gt; &amp;gt;&amp;gt; /etc/ecs/ecs.config&lt;/code&gt; といった処理は&#xA;クラスタの&lt;code&gt;AsgCapacityProvider&lt;/code&gt;にASGを指定すると&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/v1.118.0/packages/@aws-cdk/aws-ecs/lib/cluster.ts#L377&#34;&gt;追加される&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS X-rayでアプリケーションのリクエストをトレースし可視化する</title>
      <link>https://www.sambaiz.net/article/376/</link>
      <pubDate>Thu, 05 Aug 2021 02:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/376/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/xray/&#34;&gt;AWS X-ray&lt;/a&gt;はリクエストをトレースして、タイムラインやサービスマップを可視化、分析できるサービス。&#xA;サービスの数が増えると見えづらくなる、どこにどれくらいのトラフィックがあって、どこで問題が起きているのかといったことを一目で確認できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gomockのmockを入力とするmockが意図した出力を返さない理由</title>
      <link>https://www.sambaiz.net/article/375/</link>
      <pubDate>Tue, 27 Jul 2021 12:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/375/</guid>
      <description>&lt;p&gt;interfaceを受け取るinterfaceを定義し、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Foo &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Shout&lt;/span&gt;() &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Bar &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Bar&lt;/span&gt;(foo Foo) &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/mock&#34;&gt;gomock&lt;/a&gt;でmockgenする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Code generated by MockGen. DO NOT EDIT.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Source: main.go&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Package main is a generated GoMock package.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;reflect &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;reflect&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;gomock &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/golang/mock/gomock&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// MockBarMockRecorder is the mock recorder for MockBar.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; MockBarMockRecorder &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mock &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MockBar&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// NewMockBar creates a new mock instance.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewMockBar&lt;/span&gt;(ctrl &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;gomock.Controller) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MockBar {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mock &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MockBar{ctrl: ctrl}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mock.recorder = &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;MockBarMockRecorder{mock}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; mock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// EXPECT returns an object that allows the caller to indicate expected use.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MockBar) &lt;span style=&#34;color:#50fa7b&#34;&gt;EXPECT&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MockBarMockRecorder {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; m.recorder&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Bar mocks base method.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (m &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MockBar) &lt;span style=&#34;color:#50fa7b&#34;&gt;Bar&lt;/span&gt;(foo Foo) &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;m.ctrl.T.&lt;span style=&#34;color:#50fa7b&#34;&gt;Helper&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ret &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; m.ctrl.&lt;span style=&#34;color:#50fa7b&#34;&gt;Call&lt;/span&gt;(m, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Bar&amp;#34;&lt;/span&gt;, foo)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ret0, _ &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; ret[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ret0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Bar indicates an expected call of Bar.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; (mr &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MockBarMockRecorder) &lt;span style=&#34;color:#50fa7b&#34;&gt;Bar&lt;/span&gt;(foo &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;gomock.Call {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;mr.mock.ctrl.T.&lt;span style=&#34;color:#50fa7b&#34;&gt;Helper&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; mr.mock.ctrl.&lt;span style=&#34;color:#50fa7b&#34;&gt;RecordCallWithMethodType&lt;/span&gt;(mr.mock, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Bar&amp;#34;&lt;/span&gt;, reflect.&lt;span style=&#34;color:#50fa7b&#34;&gt;TypeOf&lt;/span&gt;((&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;MockBar)(&lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;).Bar), foo)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これらを用いて次のようにmockを入力とするmockを作ると、fooMock2を渡しているのに fooMock1の出力が返ってしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vue 3でTODOを作る</title>
      <link>https://www.sambaiz.net/article/374/</link>
      <pubDate>Sun, 25 Jul 2021 06:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/374/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cli.vuejs.org/&#34;&gt;Vue CLI&lt;/a&gt;をインストールしプロジェクトを作成する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install -g @vue/cli&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vue --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@vue/cli 4.5.13&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vue create todo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tree -I node_modules todo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── README.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── babel.config.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── package-lock.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── package.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── public&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── favicon.ico&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── index.html&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── App.vue&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── assets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   └── logo.png&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── components&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   └── HelloWorld.vue&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── main.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;エントリーポイント &lt;code&gt;main.js&lt;/code&gt; を見るとVue 3からのGlobal API、&lt;a href=&#34;https://v3.vuejs.org/guide/migration/global-api.html#a-new-global-api-createapp&#34;&gt;createApp()&lt;/a&gt;が使われている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clean ArchitectureとDDDの概念と得られるもの</title>
      <link>https://www.sambaiz.net/article/369/</link>
      <pubDate>Sun, 25 Jul 2021 01:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/369/</guid>
      <description>&lt;h2 id=&#34;clean-architecture&#34;&gt;Clean Architecture&lt;/h2&gt;&#xA;&lt;p&gt;関心事をレイヤーに分割し、依存方向を下位から上位に制限したアーキテクチャ。次のような円で説明され、中央のビジネスルールが上位、外側のフレームワークやドライバが下位となる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker Studioの使っていないKernelを自動でシャットダウンするsagemaker-studio-auto-shutdown-extension</title>
      <link>https://www.sambaiz.net/article/373/</link>
      <pubDate>Sun, 18 Jul 2021 23:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/373/</guid>
      <description>&lt;p&gt;SageMaker Studioを使っているとインスタンスを明示的に立ち上げることがないので、シャットダウンするのを忘れて&#xA;無駄なインスタンスコストを発生させ続けてしまうことがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GlueのカスタムコネクタでBigQueryに接続する</title>
      <link>https://www.sambaiz.net/article/372/</link>
      <pubDate>Tue, 13 Jul 2021 21:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/372/</guid>
      <description>&lt;p&gt;GlueはConnectorによって様々なデータソースに対応していて、RDSやMongoDBなど標準で提供されているもの以外にも&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/about-aws/whats-new/2020/12/aws-glue-launches-aws-glue-custom-connectors/&#34;&gt;カスタムコネクタ&lt;/a&gt;を用いることで接続できる。今回はMarketplaceで提供されているBigQueryのカスタムコネクタを用いてBigQueryのテーブルの内容をS3に出力するJobを作成する。&lt;/p&gt;&#xA;&lt;p&gt;GlueのETL JobをGUIで構築したりモニタリングできるサービス、Glue StudioからMarketplaceに飛んで&#xA;&lt;a href=&#34;https://aws.amazon.com/marketplace/pp/prodview-w2ranrogj3xmm?ref_=beagle&amp;amp;applicationId=GlueStudio&#34;&gt;AWS Glue Connector for Google BigQuery&lt;/a&gt;をSubscribeする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; STLのmapやunordered_mapのkeyにstructを使えるようにする</title>
      <link>https://www.sambaiz.net/article/371/</link>
      <pubDate>Fri, 09 Jul 2021 23:13:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/371/</guid>
      <description>&lt;h2 id=&#34;map&#34;&gt;map&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;operator&amp;lt;&lt;/code&gt; を実装する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Item&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; point;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Item&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Item&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;tie&lt;/span&gt;(a.name, a.point) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; tie(b.name, b.point);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Item, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; M;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    M[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sambaiz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;}] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; M[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sambaiz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;}] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;unordered_map&#34;&gt;unordered_map&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;operator==&lt;/code&gt; とハッシュ関数を実装する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;namespace&lt;/span&gt; std;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Item&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    string name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; point;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Item&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; a, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Item&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt; b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; a.name &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; a.name &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a.point &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; a.point;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ItemHash&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;size_t &lt;span style=&#34;color:#ff79c6&#34;&gt;operator&lt;/span&gt;()(Item item) &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;size_t h1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; hash&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;string&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;()(item.name);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        std&lt;span style=&#34;color:#ff79c6&#34;&gt;::&lt;/span&gt;size_t h2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; hash&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;()(item.point);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; h1 &lt;span style=&#34;color:#ff79c6&#34;&gt;^&lt;/span&gt; h2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    unordered_map&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Item, &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;, ItemHash&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; M;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    M[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sambaiz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;}] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; M[{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sambaiz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;}] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://faithandbrave.hateblo.jp/entry/20121210/1355126432&#34;&gt;優先順位付き大小比較 - Faith and Brave - C++で遊ぼう&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena(Presto)とGlue(Spark)で同じクエリを実行した際に異なる値が返る原因</title>
      <link>https://www.sambaiz.net/article/370/</link>
      <pubDate>Sat, 03 Jul 2021 23:13:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/370/</guid>
      <description>&lt;p&gt;AWSではSQL-likeなクエリで集計を行うマネージドなサービスが複数あり、&#xA;アドホックな集計はGlueのデータカタログでテーブルを共有して手軽にクエリを実行できるPrestoベースのAthena、&#xA;重いバッチ集計はリソースや時間の制約を回避できるSparkベースのGlueといったように併用することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Next.jsのpre-rendering</title>
      <link>https://www.sambaiz.net/article/367/</link>
      <pubDate>Sat, 19 Jun 2021 12:56:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/367/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;はwebpackやbabel,ESLintを内包し、&#xA;SSG/SSRやリソースの最適化といった機能を提供するReactのフレームワーク。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://nextjs.org/docs/api-reference/create-next-app&#34;&gt;create-next-app&lt;/a&gt;を実行し、&lt;code&gt;npm run dev&lt;/code&gt; すると&#xA;development modeでサーバーが起動するので &lt;code&gt;localhost:3000/abcd&lt;/code&gt; にアクセスすると &lt;code&gt;pages/abcd.tsx&lt;/code&gt; の &lt;code&gt;export default&lt;/code&gt; されたコンポーネントが描画される。&#xA;&lt;a href=&#34;https://nextjs.org/docs/basic-features/fast-refresh#how-it-works&#34;&gt;Fast Reflesh&lt;/a&gt;が効いているのでファイルを更新するとすぐに反映される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notionでタスク管理を行う際のRelationによる親子タスクの紐付けとFormulaとRollupによる完了率の表示</title>
      <link>https://www.sambaiz.net/article/368/</link>
      <pubDate>Sat, 19 Jun 2021 00:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/368/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.notion.so/&#34;&gt;Notion&lt;/a&gt;でタスク管理するためのPropertyの設定。&lt;/p&gt;&#xA;&lt;p&gt;Relationで自身のDatabaseを選び、 &lt;code&gt;Create a new property&lt;/code&gt; すると選択されたPropertyが追加されるので、親子タスクを表現できる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/368-1.png&#34; alt=&#34;Relation Propertyの設定&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auth0の設定をauth0-deploy-cliでexportしてバージョン管理する</title>
      <link>https://www.sambaiz.net/article/365/</link>
      <pubDate>Sat, 12 Jun 2021 18:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/365/</guid>
      <description>&lt;p&gt;認証プラットフォーム&lt;a href=&#34;https://auth0.com/jp&#34;&gt;Auth0&lt;/a&gt;の設定をバージョン管理する。&lt;/p&gt;&#xA;&lt;p&gt;Cognitoでは複数のIdPの名寄せを行うのにUserPoolのsubを自力でマッピングしたり、IdentityPoolを用いる必要があったりするが、&#xA;Auth0ではそのあたりを&lt;a href=&#34;https://auth0.com/docs/extensions/account-link-extension&#34;&gt;Rule&lt;/a&gt;によって行えたりと多機能で、ドキュメントやライブラリ、サンプルコードも充実している。&#xA;その分、&lt;a href=&#34;https://auth0.com/jp/pricing&#34;&gt;コスト&lt;/a&gt;が高めだが、重要だがコアではない認証回りを任せられるのは助かる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SDK for Java 2.x のUnable to load an HTTP implementationとクライアント変更によるlambda実行高速化</title>
      <link>https://www.sambaiz.net/article/366/</link>
      <pubDate>Thu, 10 Jun 2021 22:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/366/</guid>
      <description>&lt;p&gt;AWS SDK for Java 2.x では内部で使う&lt;a href=&#34;https://aws.amazon.com/jp/blogs/developer/aws-sdk-for-java-2-x-released/&#34;&gt;HTTP Clientを変更できる&lt;/a&gt;ようになっている。現在サポートされているのは次の4つ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- synchronous --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apache-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;url-connection-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- asynchronous --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;netty-nio-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;software.amazon.awssdk&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;aws-crt-client&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.16.79-PREVIEW&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;system propertyでデフォルトクライアントを指定でき、クライアントごとに変えることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WindowsのターミナルからRPAツールUiPathによる自動操作を行う</title>
      <link>https://www.sambaiz.net/article/360/</link>
      <pubDate>Sun, 06 Jun 2021 11:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/360/</guid>
      <description>&lt;p&gt;RPAツール&lt;a href=&#34;https://www.uipath.com/&#34;&gt;UiPath&lt;/a&gt;を使ってWindowsのターミナルから自動操作する。&#xA;UiPathにはCommunity &lt;a href=&#34;https://docs.uipath.com/automation-cloud/docs/about-licensing&#34;&gt;License&lt;/a&gt;があって、個人や小規模のチームなら無料で使うことができる。&#xA;最近Microsoft公式の&lt;a href=&#34;https://flow.microsoft.com/ja-jp/desktop/&#34;&gt;Power Automate Desktop&lt;/a&gt;も無料で使えるようになったが、&#xA;&lt;a href=&#34;https://github.com/MicrosoftDocs/power-automate-docs/blob/main/articles/desktop-flows/setup.md#sign-in-account-comparison&#34;&gt;スケジューリングやトリガー機能&lt;/a&gt;を使うには有償の&lt;a href=&#34;https://flow.microsoft.com/ja-jp/pricing/&#34;&gt;Power Autoamte&lt;/a&gt;を契約する必要があるようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CircleCIのOrbをPublishする</title>
      <link>https://www.sambaiz.net/article/364/</link>
      <pubDate>Fri, 04 Jun 2021 12:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/364/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://circleci.com/docs/ja/2.0/local-cli/&#34;&gt;CircleCI CLI&lt;/a&gt;をインストールする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install circleci&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;マニュアルで &lt;a href=&#34;https://circleci.com/docs/2.0/orb-concepts/#orb-packing&#34;&gt;circleci orb pack&lt;/a&gt; して &lt;code&gt;circleci orb publish&lt;/code&gt; することもできるが、&#xA;&lt;a href=&#34;https://circleci.com/docs/2.0/creating-orbs/#orb-development-kit&#34;&gt;Orb development kit&lt;/a&gt;を使うのが推奨されているのでそうする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ circleci orb pack ./src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;2.1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;description&lt;/span&gt;: |&lt;span style=&#34;color:#f1fa8c&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    Sample orb description&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;home_url&lt;/span&gt;: https://www.website.com/docs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;source_url&lt;/span&gt;: https://www.github.com/EXAMPLE_ORG/EXAMPLE_PROJECT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;commands&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;greet&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;description&lt;/span&gt;: |&lt;span style=&#34;color:#f1fa8c&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        This command echos &amp;#34;Hello World&amp;#34; using file inclusion.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;parameters&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;: World&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;description&lt;/span&gt;: Hello to whom?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;type&lt;/span&gt;: string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;steps&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ff79c6&#34;&gt;run&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;command&lt;/span&gt;: |&lt;span style=&#34;color:#f1fa8c&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                Greet() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                    echo Hello &amp;#34;${PARAM_TO}&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                # Will not run if sourced for bats-core tests.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                # View src/tests for more information.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                ORB_TEST_ENV=&amp;#34;bats-core&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                if [ &amp;#34;${0#*$ORB_TEST_ENV}&amp;#34; == &amp;#34;$0&amp;#34; ]; then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                    Greet&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;environment&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#ff79c6&#34;&gt;PARAM_TO&lt;/span&gt;: &amp;lt;&amp;lt;parameters.to&amp;gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;name&lt;/span&gt;: Hello Greeting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;executors&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;jobs&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;examples&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;circleci orb init&lt;/code&gt; で&lt;a href=&#34;https://github.com/CircleCI-Public/Orb-Project-Template&#34;&gt;テンプレート&lt;/a&gt;を持ってきてOrbのnamespaceや名前などを設定する。&#xA;Personal API TokensはUser Settingsから発行できて、CIRCLE_TOKEN入りのorb-publishing contextが作られる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ReviewdogのGitHub ActionsでGoのlintをかけてPRに表示する</title>
      <link>https://www.sambaiz.net/article/363/</link>
      <pubDate>Thu, 03 Jun 2021 19:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/363/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34;&gt;Reviewdog&lt;/a&gt;はlinterの結果をPRにコメントしてくれるツール。&#xA;差分のみに適用することができるので段階的に改善していくこともできる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;staticcheck&#34;&gt;Staticcheck&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://staticcheck.io/&#34;&gt;Staticcheck&lt;/a&gt;はdeprecatedになった&lt;a href=&#34;https://github.com/golang/lint&#34;&gt;Golint&lt;/a&gt;のリポジトリで移行先として紹介されているlinter。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; go install honnef&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;co&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;go&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;tools&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;cmd&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;staticcheck@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; staticcheck &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;staticcheck &lt;span style=&#34;color:#bd93f9&#34;&gt;2021.1&lt;/span&gt; (v0&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2.0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;典型的なミスや非効率な書き方など&lt;a href=&#34;https://staticcheck.io/docs/checks&#34;&gt;様々な項目&lt;/a&gt;がチェックされる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;logging&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Color &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Red  Color = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:14:2: only the first constant in this group has an explicit type (SA9004)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Blue       = &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;f&lt;/span&gt;(ctx context.Context, str []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; m &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  m[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;                             &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:13:2: assignment to nil map (SA5000)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; json.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;(str, m); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:14:32: json.Unmarshal expects to unmarshal into a pointer, but the provided value is not a pointer (SA1014)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  l &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&amp;amp;&lt;/span&gt;m &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:17:7: *&amp;amp;x will be simplified to x. It will not copy x. (SA4001)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  l[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;] = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;ToLower&lt;/span&gt;(m[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;]) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; strings.&lt;span style=&#34;color:#50fa7b&#34;&gt;ToLower&lt;/span&gt;(m[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;]) { &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:19:5: should use strings.EqualFold instead (SA6005)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%v -&amp;gt; %s&amp;#34;&lt;/span&gt;, m, l)) &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:27:3: should use fmt.Printf instead of fmt.Println(fmt.Sprintf(...)) (but don&amp;#39;t forget the newline) (S1038)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`{&amp;#34;A&amp;#34;: &amp;#34;B&amp;#34;, &amp;#34;X&amp;#34;: &amp;#34;Y&amp;#34;}`&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// main.go:33:14: do not pass a nil Context, even if a function permits it; pass context.TODO if you are unsure about which Context to use (SA1012)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ReviewdogにStaticcheckの&lt;a href=&#34;https://github.com/reviewdog/action-staticcheck&#34;&gt;Action&lt;/a&gt;があるので次のような設定で動き出す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>shellの条件分岐の[と[[</title>
      <link>https://www.sambaiz.net/article/362/</link>
      <pubDate>Thu, 03 Jun 2021 13:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/362/</guid>
      <description>&lt;p&gt;&lt;code&gt;[&lt;/code&gt; はPOSIX準拠のtestコマンド。&lt;code&gt;[[&lt;/code&gt; はその拡張でdashなどではサポートされていない。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ which &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/usr/bin/&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ man &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TEST&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NAME&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt; - check file types and compare values&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYNOPSIS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt; EXPRESSION&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;test&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt; EXPRESSION &lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt; OPTION&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あくまでコマンドなので前後にスペースを空ける必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS App Runnerの特徴と料金、CloudFormationのResource</title>
      <link>https://www.sambaiz.net/article/361/</link>
      <pubDate>Sun, 30 May 2021 03:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/361/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/apprunner/&#34;&gt;AWS App Runner&lt;/a&gt;は最低限の設定でロードバランシングやオートスケール、ログやメトリクス、ドメインや証明書などを備えた、&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/blogs/aws/app-runner-from-code-to-scalable-secure-web-apps/&#34;&gt;リクエストベースのステートレスな&lt;/a&gt;コンテナアプリケーションを動かすことができるマネージドサービス。&#xA;Elastic BeanstalkのようにEC2やALB、AutoScaling Groupなどのリソースを作成するのではなく内部に持つ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>127.0.0.1(localhost)と0.0.0.0</title>
      <link>https://www.sambaiz.net/article/359/</link>
      <pubDate>Mon, 24 May 2021 23:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/359/</guid>
      <description>&lt;p&gt;ホストで動かしていたコンポーネント群をdocker-composeに乗せたところ、コンポーネント間の通信が通らなくなってしまった。&#xA;いずれもdocker-composeが作った&lt;a href=&#34;https://docs.docker.jp/compose/networking.html&#34;&gt;デフォルトのネットワーク&lt;/a&gt;で動いているのでpingは通る。&#xA;コードを見てみたところサーバーが localhost で listen していたので 0.0.0.0 に修正した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windowsでの開発環境を構築する(WSL2, Docker, VSCode)</title>
      <link>https://www.sambaiz.net/article/358/</link>
      <pubDate>Sun, 16 May 2021 11:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/358/</guid>
      <description>&lt;h2 id=&#34;wsl2&#34;&gt;WSL2&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows/wsl/install-win10&#34;&gt;WSL2を有効化&lt;/a&gt;してストアからUbuntuとWindows Terminalをインストールする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# PowerShell&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wsl --set-default-version &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ubuntuのユーザー設定後、Windows Terminalの既定のプロファイルをUbuntuに変更するとMacのターミナルのように使うことができる。&#xA;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt;や&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2-linux.html&#34;&gt;AWS CLI&lt;/a&gt;など必要なものをUbuntuに入れていく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでGlue Data CatalogのDatabase,Table,Partition,Crawlerを作成する</title>
      <link>https://www.sambaiz.net/article/357/</link>
      <pubDate>Sun, 09 May 2021 01:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/357/</guid>
      <description>&lt;p&gt;CDKでGlue Data CatlogのDatabase,Table,Partition,Crawlerを作成する。&#xA;PartitionやCrawlerはまだL2 constructが&lt;a href=&#34;https://github.com/aws/aws-cdk/issues/8863&#34;&gt;存在しない&lt;/a&gt;。&lt;code&gt;storageDescriptor&lt;/code&gt;の設定は&lt;a href=&#34;https://github.com/aws/aws-cdk/blob/v1.102.0/packages/@aws-cdk/aws-glue/lib/table.ts#L267&#34;&gt;Tableの実装&lt;/a&gt;を参考にした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Raspberry PiでおうちKubernetesクラスタを構築する</title>
      <link>https://www.sambaiz.net/article/356/</link>
      <pubDate>Wed, 05 May 2021 19:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/356/</guid>
      <description>&lt;p&gt;Raspberry Pi 3台でKubernetesクラスタを構築する、2020年版おうちKubernetesインターンの資料が公開されていたのでやってみる。&#xA;Kubernetesのバージョンは&lt;code&gt;v1.20.6&lt;/code&gt;にした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FluentdがどのようにMulti Process Workersで処理を実行しているのか実装を追う</title>
      <link>https://www.sambaiz.net/article/335/</link>
      <pubDate>Sun, 25 Apr 2021 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/335/</guid>
      <description>&lt;p&gt;Fluentdはv1.0から標準で&lt;a href=&#34;https://docs.fluentd.org/deployment/multi-process-workers&#34;&gt;マルチプロセス対応&lt;/a&gt;され、&#xA;指定した数のWorkerで処理が行われるようになった。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;system&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  workers 4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/system&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;どのように実行しているのか&lt;code&gt;v1.12.3&lt;/code&gt;の実装を見ていく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでKinesis Data Analytics上にPyFlinkのコードをデプロイして動かす</title>
      <link>https://www.sambaiz.net/article/334/</link>
      <pubDate>Sat, 24 Apr 2021 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/334/</guid>
      <description>&lt;p&gt;KDAが&lt;a href=&#34;https://aws.amazon.com/jp/about-aws/whats-new/2021/03/amazon-kinesis-data-analytics-now-supports-python-with-apache-flink-v1-11/&#34;&gt;PyFlinkをサポート&lt;/a&gt;したのでCDKで構築して動かしてみる。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/cdk-kda-pyflink-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/302/&#34;&gt;Kinesis Data AnalyticsのSQL, Lambdaへの出力とCDKによるリソースの作成 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今回動かすのは次の、KDSから流れてきたデータにクエリを実行し、その結果をS3に書き込む簡単なコード。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS GlueのJobのBookmarkを有効にして前回の続きから処理を行う</title>
      <link>https://www.sambaiz.net/article/333/</link>
      <pubDate>Fri, 16 Apr 2021 20:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/333/</guid>
      <description>&lt;p&gt;GlueのJobの&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/glue/latest/dg/monitor-continuations.html&#34;&gt;Bookmark&lt;/a&gt;は&#xA;どこまで処理したかを記録し、次回はその続きから実行できるようにする機能。&#xA;1.0以前は対応していなかったParquetやORCも今は対応している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでStep Functionsによるワークフローを構築する</title>
      <link>https://www.sambaiz.net/article/332/</link>
      <pubDate>Sat, 10 Apr 2021 21:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/332/</guid>
      <description>&lt;p&gt;Step FunctionsはLambdaやGlueのJobなどからなるワークフローを構築できるサービス。今回はCDKで構築する。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/cdk-stepfunctions-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Application Auto Scalingのcustom-resourceによるKinesis Data Streamsのオートスケール設定</title>
      <link>https://www.sambaiz.net/article/331/</link>
      <pubDate>Sun, 21 Mar 2021 23:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/331/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/application/userguide/what-is-application-auto-scaling.html&#34;&gt;Application Auto Scaling&lt;/a&gt;は、Auto Scaling groupによる&lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/ec2/userguide/what-is-amazon-ec2-auto-scaling.html&#34;&gt;EC2のオートスケール&lt;/a&gt;のようなことを他のリソースでも行えるようにするサービスで、&#xA;DynamoDBのキャパシティやECSのServiceなどコンソール上から設定できるものだけではなく、自前のAPIでハンドリングすることで任意のリソースをこの仕組みに乗せることができる。これを用いてKinesis Data Streamsのオートスケールを行う手法を紹介しているのが次の記事。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのio packageのReader/Writer/Closer/Seeker interfaceとストリーム処理</title>
      <link>https://www.sambaiz.net/article/330/</link>
      <pubDate>Thu, 11 Mar 2021 20:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/330/</guid>
      <description>&lt;p&gt;Goのio packageにはデータの読み書きに関わるインタフェース、&lt;code&gt;Reader/Writer/Closer/Seeker&lt;/code&gt; およびこれらを組み合わせた &lt;code&gt;ReadSeeker&lt;/code&gt; などが定義されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>x/sync/semaphoreでgoroutineの数を制御する</title>
      <link>https://www.sambaiz.net/article/329/</link>
      <pubDate>Tue, 09 Mar 2021 21:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/329/</guid>
      <description>&lt;p&gt;Goの特長の一つにgoroutineによる並列実行の容易さがあるが、&#xA;無尽蔵にgoroutineを生成するとパフォーマンスが悪化してしまうため、&#xA;都度&lt;code&gt;go func()&lt;/code&gt;するのではなく、一定数走らせておいたgoroutineに処理を渡すなどして、その数を制御することがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athena(Presto)でWindow関数を用いた集計を行う</title>
      <link>https://www.sambaiz.net/article/328/</link>
      <pubDate>Wed, 24 Feb 2021 22:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/328/</guid>
      <description>&lt;p&gt;Athena(Presto)で&lt;code&gt;SUM()&lt;/code&gt;や&lt;code&gt;AVG()&lt;/code&gt;といった集計関数に&lt;code&gt;OVER&lt;/code&gt;を付けてWindow集計を行う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://prestodb.io/docs/current/functions/window.html&#34;&gt;Window Functions — Presto 0.247 Documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;次のテストデータを使う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Amazon Forecastで時系列データの予測を行う</title>
      <link>https://www.sambaiz.net/article/327/</link>
      <pubDate>Sun, 21 Feb 2021 01:04:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/327/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/forecast/&#34;&gt;Amazon Forecast&lt;/a&gt;は機械学習によって時系列データの予測を行うマネージドサービス。&#xA;ドメインやアルゴリズムを選んでデータを投入すればそれらしい出力が得られる。&#xA;まずこれで予測してみて、その結果をベースラインとしてSageMakerなどで自作したモデルを評価するといった使い方もできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>偽陽性を許容して空間効率良くキーの存在を確認するBloom filterとCuckoo filter</title>
      <link>https://www.sambaiz.net/article/326/</link>
      <pubDate>Wed, 17 Feb 2021 02:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/326/</guid>
      <description>&lt;p&gt;例えばデータストアへのアクセス抑制のためにキーの存在を確認する際、&#xA;全てのキーを保持して探索すれば100%正しく判定できるが、キーが長く数が膨大になるとメモリの使用量が問題になることがある。&#xA;もし偽陽性が許容できるなら、次のフィルタを使うことで空間効率良くキーの存在を確認できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PythonのProtocolによるstructural subtypingでインタフェースを記述する</title>
      <link>https://www.sambaiz.net/article/325/</link>
      <pubDate>Fri, 12 Feb 2021 02:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/325/</guid>
      <description>&lt;p&gt;interfaceが文法に存在しないPythonで関数が呼べることを保証する方法の一つに&#xA;組み込み関数&lt;a href=&#34;https://docs.python.org/ja/3/library/functions.html#hasattr&#34;&gt;hasattr()&lt;/a&gt;によるチェックがあるが、&#xA;都度処理を挟む必要があるのと、実行してみないと分からない問題があった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kinesis Data Analyticsによる集計遅延箇所の特定</title>
      <link>https://www.sambaiz.net/article/324/</link>
      <pubDate>Sun, 07 Feb 2021 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/324/</guid>
      <description>&lt;p&gt;Kinesis Data Analytics (KDA)はマッピングしたカラムに加えて、Kinesis Data Streams (KDS)に入った時間 &lt;code&gt;APPROXIMATE_ARRIVAL_TIME&lt;/code&gt; とKDAのin-app STREAMに入った時間 &lt;code&gt;ROWTIME&lt;/code&gt; をソースに含める。これらとログのタイムスタンプを合わせることで集計遅延が起きた際にどこが原因になっているかを特定することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythonのmoduleとpackage</title>
      <link>https://www.sambaiz.net/article/323/</link>
      <pubDate>Sat, 23 Jan 2021 19:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/323/</guid>
      <description>&lt;p&gt;Python ではファイルがそのまま module となる。&#xA;module をコンパイルした pyc ファイルは &lt;strong&gt;py_cache&lt;/strong&gt; にキャッシュされ、ソースの変更日時を見て再利用される。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/ja/3/tutorial/modules.html&#34;&gt;6. モジュール — Python 3.9.1 ドキュメント&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdの&lt;parse&gt;と&lt;inject&gt;でtime_formatを指定しなかった場合の挙動と内部処理</title>
      <link>https://www.sambaiz.net/article/322/</link>
      <pubDate>Sat, 23 Jan 2021 00:04:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/322/</guid>
      <description>&lt;h2 id=&#34;挙動&#34;&gt;挙動&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/fluent/fluentd/&#34;&gt;fluent/fluentd&lt;/a&gt;のDockerイメージで試す。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vi fluent.conf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type tail&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  path /home/fluent/test.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  pos_file /home/fluent/test.log.pos&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tag test.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;parse&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @type json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_key ts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_type string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/parse&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;match test.log&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type stdout&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;inject&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_key ts2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    time_type string&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/inject&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/match&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ touch test.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run -it --rm -v $(pwd)/fluent.conf:/fluentd/etc/fluent.conf -v $(pwd)/test.log:/home/fluent/test.log fluent/fluentd:v1.12-1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# echo &amp;#39;{&amp;#34;ts&amp;#34;: &amp;#34;2021-01-01T01:23:45&amp;#34;, &amp;#34;data&amp;#34;: 123}&amp;#39; &amp;gt;&amp;gt; test.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-01-01 01:23:45.000000000 +0000 test.log: {&amp;#34;data&amp;#34;:123,&amp;#34;ts2&amp;#34;:&amp;#34;2021-01-01T01:23:45+00:00&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# echo &amp;#39;{&amp;#34;ts&amp;#34;: &amp;#34;2021-01-01T01:23:45&amp;#34;, &amp;#34;data&amp;#34;: 123}&amp;#39; &amp;gt;&amp;gt; test.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-01-01 01:23:45.000000000 +0000 test.log: {&amp;#34;data&amp;#34;:123,&amp;#34;ts2&amp;#34;:&amp;#34;2021-01-01T01:23:45+00:00&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# echo &amp;#39;{&amp;#34;ts&amp;#34;: &amp;#34;Tue Jan 01 01:23:45 GMT 2021&amp;#34;, &amp;#34;data&amp;#34;: 123}&amp;#39; &amp;gt;&amp;gt; test.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-01-01 01:23:45.000000000 +0000 test.log: {&amp;#34;data&amp;#34;:123,&amp;#34;ts2&amp;#34;:&amp;#34;2021-01-01T01:23:45+00:00&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &amp;#39;{&amp;#34;ts&amp;#34;: &amp;#34;01:23:45&amp;#34;, &amp;#34;data&amp;#34;: 123}&amp;#39; &amp;gt;&amp;gt; test.log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-01-22 01:23:45.000000000 +0000 test.log: {&amp;#34;data&amp;#34;:123,&amp;#34;ts2&amp;#34;:&amp;#34;2021-01-22T01:23:45+00:00&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;time_key&lt;/code&gt;である&lt;code&gt;ts&lt;/code&gt;フィールドは柔軟にパースされ、injectされた&lt;code&gt;ts2&lt;/code&gt;フィールドは&lt;code&gt;ts&lt;/code&gt;のフォーマットとも関係ないフォーマットとなっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>剰余を取った値の四則演算</title>
      <link>https://www.sambaiz.net/article/321/</link>
      <pubDate>Sat, 16 Jan 2021 18:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/321/</guid>
      <description>&lt;p&gt;競プロの64bit整数でもオーバーフローする大きな値が出てくる問題では、言語による差が出ないよう \(10^9+7\) といった数で割ったときの余りが要求される。&lt;/p&gt;&#xA;&lt;p&gt;四則演算の内、割り算以外は各項の剰余を取ってから計算してもその剰余の値は変わらないので、都度剰余を取ってオーバーフローを回避できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;で標準入力から数が不定なスペース区切りの文字列を読み込んで分割する</title>
      <link>https://www.sambaiz.net/article/320/</link>
      <pubDate>Tue, 12 Jan 2021 21:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/320/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cpprefjp.github.io/reference/string/basic_string/getline.html&#34;&gt;std::getline(basic_istream, basic_string, delim)&lt;/a&gt; を使う。&#xA;この関数は第三引数 delim か EOF に達するとそこまでの文字列を、delim を渡さないと is.widen(&amp;rsquo;\n&amp;rsquo;) が渡されるので一行出力する。&#xA;一度 stringstream にしているのは、getline(cin, s, &amp;rsquo; &amp;lsquo;) のように直接読み込もうとすると最後の文字の後に delim も EOF も来ずに止まってしまうため。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ウェブアプリとしてデプロイしたGASをブラウザからAPIとして呼ぶ際のCORSエラー</title>
      <link>https://www.sambaiz.net/article/319/</link>
      <pubDate>Wed, 23 Dec 2020 08:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/319/</guid>
      <description>&lt;p&gt;GASでAPIを公開する方法として、&lt;a href=&#34;https://developers.google.com/apps-script/api/reference/rest/v1/scripts/run&#34;&gt;scripts.run&lt;/a&gt; APIで実行できる&lt;a href=&#34;https://developers.google.com/apps-script/api/how-tos/execute&#34;&gt;実行可能API&lt;/a&gt;と、&lt;a href=&#34;https://developers.google.com/apps-script/guides/web&#34;&gt;ウェブアプリ&lt;/a&gt;がある。&#xA;前者は認証が走り実行者の権限で動くが、後者は認証を行わずデプロイユーザーの権限で動かすこともできるのでパブリックなAPIとして使うことができる。&#xA;当然、不正な操作が行われないように注意する必要があり、GASの&lt;a href=&#34;https://developers.google.com/apps-script/guides/services/quotas&#34;&gt;Quotaやhard limit&lt;/a&gt;も気にする必要がある。無料で運用することができるが、レイテンシやエラーハンドリング、監視などを考えるとやや心許ない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでCognito UserPoolとClientを作成しトリガーやFederationを設定する</title>
      <link>https://www.sambaiz.net/article/318/</link>
      <pubDate>Sun, 06 Dec 2020 18:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/318/</guid>
      <description>&lt;p&gt;CloudFormationでCognito UserPoolを作成すると、以前はドメインやFederationの設定などを手作業で行う必要があったが、&#xA;去年の10月に諸々のリソースが&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/ReleaseHistory.html&#34;&gt;追加され&lt;/a&gt;、その必要がなくなった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IstioのSidecarでmTLS認証を行いServiceAccountによるアクセス制御を行う</title>
      <link>https://www.sambaiz.net/article/317/</link>
      <pubDate>Fri, 04 Dec 2020 12:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/317/</guid>
      <description>&lt;p&gt;mTLS (Mutual TLS)認証は&lt;a href=&#34;https://tools.ietf.org/html/rfc8705&#34;&gt;RFC8705&lt;/a&gt;に記載されている、TLSハンドシェイクの際にサーバーからだけではなくクライアントからも証明書を送ることで相互に認証を行う手法。クライアントは事前に自身の秘密鍵で生成したCSRをサーバーに送り、サーバーがルート認証局となって発行した証明書を取得しておく。&lt;/p&gt;&#xA;&lt;p&gt;KubernetesではIstioのSidecarを通すことで透過的にmTLS認証を行うことが&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#mutual-tls-authentication&#34;&gt;できる&lt;/a&gt;。証明書はEnvoy SDS(secret discovery service) APIのリクエストによってCSRが定期的にistiodに送られて&lt;a href=&#34;https://istio.io/latest/docs/concepts/security/#pki&#34;&gt;発行、更新される&lt;/a&gt;らしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKSにKubeflowをインストールする</title>
      <link>https://www.sambaiz.net/article/316/</link>
      <pubDate>Sun, 29 Nov 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/316/</guid>
      <description>&lt;p&gt;Kubernetes上で機械学習を行うためのツールキット&lt;a href=&#34;https://www.kubeflow.org/&#34;&gt;Kubeflow&lt;/a&gt;を&#xA;EKSに&lt;a href=&#34;https://www.kubeflow.org/docs/aws/deploy/install-kubeflow/&#34;&gt;インストール&lt;/a&gt;する。&#xA;m5.large * 4のクラスタをCDKで作成した。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/297/&#34;&gt;CDKでEKSクラスタの作成からHelm ChartでのLocustのインストールまでを一気に行う - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>claspでGoogle Apps Scriptをローカルで開発しデプロイする</title>
      <link>https://www.sambaiz.net/article/315/</link>
      <pubDate>Sun, 29 Nov 2020 14:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/315/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/google/clasp&#34;&gt;clasp&lt;/a&gt;はGASをローカルで開発するための公式のツール。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install -g @google/clasp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ clasp --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2.3.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://script.google.com/u/1/home/usersettings&#34;&gt;設定&lt;/a&gt;でGASのAPIを有効にしてログインし、&lt;a href=&#34;https://github.com/google/clasp/blob/377ead1312dc3e2c89729f2bb4b08a985dd877a5/src/auth.ts#L73&#34;&gt;必要な権限&lt;/a&gt;を許可する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ clasp login&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat ~/.clasprc.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&amp;#34;token&amp;#34;:{&amp;#34;access_token&amp;#34;:&amp;#34;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;clasp create&lt;/code&gt;で&lt;a href=&#34;https://script.google.com/u/1/home/my&#34;&gt;プロジェクト&lt;/a&gt;を作成する。typeを指定するとドキュメントが作られ、スクリプトがそれに紐づく。&#xA;紐づいているスクリプトからは&lt;code&gt;SpreadsheetApp.getActiveSpreadsheet()&lt;/code&gt;のようにIDを指定することなくドキュメントを参照できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GmailのSMTPサーバーにコマンドを送ってメールを送信する</title>
      <link>https://www.sambaiz.net/article/313/</link>
      <pubDate>Sat, 28 Nov 2020 23:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/313/</guid>
      <description>&lt;h2 id=&#34;smtp-simple-mail-transfer-protocol&#34;&gt;SMTP (Simple Mail Transfer Protocol)&lt;/h2&gt;&#xA;&lt;p&gt;SMTPはメールクライアントからサーバーへ、あるいはサーバー間でメールを送信する際のプロトコル。&#xA;受信する際のプロトコルとしては、認証とメールのダウンロード・削除を行うPOP (Post Office Protocol) や、&#xA;複数の環境から見ることを想定した、サーバーのメールボックスを管理しアクセスするIMAP (Internet Message Access Protocol) がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>makeで環境変数とMakefileの変数、引数の値の内どの値が参照されるか</title>
      <link>https://www.sambaiz.net/article/314/</link>
      <pubDate>Sat, 28 Nov 2020 16:14:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/314/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run -v &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;pwd&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;:/root -it ubuntu:20.04 /bin/sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# apt update &amp;amp;&amp;amp; apt install -y make&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# make --version&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GNU Make 4.2.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Built &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; x86_64-pc-linux-gnu&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# cat Makefile &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HOGE:&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;aaa&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;foo:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;HOGE&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;$(&lt;/span&gt;FUGA&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; &amp;gt; /dev/null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;フラグを付けないと&lt;code&gt;引数の値 -&amp;gt; Makefileの変数 -&amp;gt; 環境変数&lt;/code&gt;の順で参照されるので、&#xA;makeの前に書いた環境変数ではMakefileの変数を上書きできず、後に書いて引数とすると上書きできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoのSheets API v4クライアントでSpreadsheetを読み書きする</title>
      <link>https://www.sambaiz.net/article/312/</link>
      <pubDate>Mon, 23 Nov 2020 22:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/312/</guid>
      <description>&lt;p&gt;まずGCPのコンソールでプロジェクトを作成するか選んで&lt;a href=&#34;https://console.developers.google.com/apis/library/sheets.googleapis.com&#34;&gt;Google Sheets API&lt;/a&gt;を有効にする。&#xA;料金はかからないが、デフォルトの&lt;a href=&#34;https://developers.google.com/sheets/api/limits&#34;&gt;Quota&lt;/a&gt;が、100秒ごとに100リクエスト/ユーザー、500リクエスト/プロジェクトとなっている。&lt;/p&gt;&#xA;&lt;p&gt;OAuth 2.0で得たユーザーの権限でAPIを呼ぶこともできるが、今回はサービスアカウントを用いる。ロールは付与する必要はなく、対象のSheetの共有先に追加すればよい。&#xA;JWTの署名に用いる秘密鍵をダウンロードしておく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>kustomizeでkubernetesのmanifestを環境ごとに生成する</title>
      <link>https://www.sambaiz.net/article/311/</link>
      <pubDate>Sun, 22 Nov 2020 19:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/311/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize&#34;&gt;Kustomize&lt;/a&gt;はk8sのmanifestを生成するツールで&lt;a href=&#34;https://kubernetes.io/blog/2019/03/25/kubernetes-1-14-release-announcement/&#34;&gt;kubectlに統合されている&lt;/a&gt;。Helmやksonnetのようにテンプレートからではなく、&lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kustomization&#34;&gt;kusomization.yaml&lt;/a&gt;以外は素のmanifestをソースとするのでツール独自の記法を覚えたり変換したりする必要がない。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/122/&#34;&gt;KubernetesのパッケージマネージャーHelmを使う - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/171/&#34;&gt;ksonnetでkubernetesのmanifestを環境ごとに生成/applyする - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;kustomization.yaml&lt;/code&gt;には対象とするresources、共通のnamespace, label, prefixやパッチなどを&lt;a href=&#34;https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/#kustomize-feature-list&#34;&gt;記述する&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub ActionsのDocker container actionを作る</title>
      <link>https://www.sambaiz.net/article/310/</link>
      <pubDate>Sun, 22 Nov 2020 01:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/310/</guid>
      <description>&lt;p&gt;GitHub ActionsのActionにはランナーで直接実行される&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-javascript-action&#34;&gt;JavaScript action&lt;/a&gt;と、&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-docker-container-action&#34;&gt;Docker container action&lt;/a&gt;、複数のステップをまとめた&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/creating-actions/creating-a-composite-run-steps-action&#34;&gt;Composite run steps action&lt;/a&gt;がある。&#xA;Docker container actionは環境を固定できるが、イメージを取得する分JavaScript actionと比べて時間がかかり、DockerがインストールされているLinuxでしか使えない。&#xA;今回はこのDocker container actionを作って動かしてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでAthenaのクエリを実行する</title>
      <link>https://www.sambaiz.net/article/309/</link>
      <pubDate>Sat, 14 Nov 2020 16:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/309/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/segmentio/go-athena&#34;&gt;segmentio/go-athena&lt;/a&gt;を使う。&lt;code&gt;database/sql&lt;/code&gt;のドライバーとして提供されていて、&#xA;&lt;a href=&#34;https://github.com/segmentio/go-athena/blob/dfa5f18189303b39c4ccc2f0c292947540214e63/conn.go#L60&#34;&gt;StartQueryExecution()&lt;/a&gt;と&#xA;&lt;a href=&#34;https://github.com/segmentio/go-athena/blob/dfa5f18189303b39c4ccc2f0c292947540214e63/conn.go#L86&#34;&gt;stateのポーリング&lt;/a&gt;、&#xA;&lt;a href=&#34;https://github.com/segmentio/go-athena/blob/dfa5f18189303b39c4ccc2f0c292947540214e63/value.go#L40&#34;&gt;値のキャスト&lt;/a&gt;を行う。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;database/sql&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/service/sts&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;_ &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/segmentio/go-athena&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outputLocation&lt;/span&gt;() (&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;svc &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; sts.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(session.&lt;span style=&#34;color:#50fa7b&#34;&gt;Must&lt;/span&gt;(session.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewSession&lt;/span&gt;()))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;result, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; svc.&lt;span style=&#34;color:#50fa7b&#34;&gt;GetCallerIdentity&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;sts.GetCallerIdentityInput{})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; result.Account &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; svc.Config.Region &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, errors.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;account or region is nil&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;s3://aws-athena-query-results-%s-%s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;result.Account, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;svc.Config.Region), &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(query &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;) (&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;sql.Rows, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;loc, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;outputLocation&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;db, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; sql.&lt;span style=&#34;color:#50fa7b&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;athena&amp;#34;&lt;/span&gt;, fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;db=default&amp;amp;output_location=%s&amp;#34;&lt;/span&gt;, loc))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; db.&lt;span style=&#34;color:#50fa7b&#34;&gt;Query&lt;/span&gt;(query)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;rows, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SELECT 1 as v, 2 as w FROM hoge.fuga&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; rows.&lt;span style=&#34;color:#50fa7b&#34;&gt;Next&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; v, w &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;rows.&lt;span style=&#34;color:#50fa7b&#34;&gt;Scan&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;v, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;w)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v, w)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>GitHub ActionsでPRのコメントに返事を返すbotを動かす</title>
      <link>https://www.sambaiz.net/article/308/</link>
      <pubDate>Tue, 10 Nov 2020 09:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/308/</guid>
      <description>&lt;h2 id=&#34;apiトークン&#34;&gt;APIトークン&lt;/h2&gt;&#xA;&lt;p&gt;コメントを投稿するAPIを呼ぶためにトークンが必要だが、GitHub Actionsのジョブの実行中有効なGitHub Appトークンが自動生成され、&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow&#34;&gt;${{secrets.GITHUB_TOKEN}}&lt;/a&gt;で参照できるのでこれを使う。&#xA;このトークンによるイベントではワークフローが発火しないので無限ループの心配がない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub Actionsのself-hosted runner</title>
      <link>https://www.sambaiz.net/article/307/</link>
      <pubDate>Sat, 07 Nov 2020 13:04:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/307/</guid>
      <description>&lt;p&gt;GitHub Actionsの&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/actions/hosting-your-own-runners/about-self-hosted-runners&#34;&gt;self-hosted runner&lt;/a&gt;は&#xA;GitHubがホストする環境以外でジョブを実行できる機能。&#xA;権限やネットワークなどの都合で特定の環境でしか実行できない処理を行うことができ、GitHubへロングポーリングしてジョブを待ち構えるのでwebhookのように外からアクセスできるようにする必要がない。&#xA;実行時間やストレージによる&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions&#34;&gt;料金&lt;/a&gt;は発生しない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>個数制限がある場合の重複組合せの総数を動的計画法で求める</title>
      <link>https://www.sambaiz.net/article/306/</link>
      <pubDate>Mon, 02 Nov 2020 15:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/306/</guid>
      <description>&lt;h2 id=&#34;個数制限がない場合&#34;&gt;個数制限がない場合&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt;種から制限なく重複を許して&lt;code&gt;r&lt;/code&gt;個選ぶ組合せの総数&lt;code&gt;nHr&lt;/code&gt;は&lt;code&gt;n+r-1&lt;/code&gt;個の枠に入れる&lt;code&gt;n-1&lt;/code&gt;個の種類を分ける区切りの場所の組合わせの総数と等しいので、&#xA;&lt;code&gt;(n+r-1)C(n-1) = (n+r-1)Cr&lt;/code&gt;で求められる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSH Agentに鍵を登録してVSCodeのdevcontainerの中で使えるようにする</title>
      <link>https://www.sambaiz.net/article/305/</link>
      <pubDate>Sat, 17 Oct 2020 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/305/</guid>
      <description>&lt;p&gt;VSCodeのdevcontainer内からホストのSSH Keyで&lt;code&gt;git push&lt;/code&gt;などできるようにする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/289/&#34;&gt;VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCodeのdevcontainerにSAM CLIをインストールしlocal invokeする</title>
      <link>https://www.sambaiz.net/article/301/</link>
      <pubDate>Mon, 12 Oct 2020 09:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/301/</guid>
      <description>&lt;p&gt;VSCodeのdevcontainerにAWS SAM CLIをインストールしてDockerを用いたlocal invokeもできるようにする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/289/&#34;&gt;VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElastiCacheでRedisクラスタを作成する際の設定</title>
      <link>https://www.sambaiz.net/article/303/</link>
      <pubDate>Fri, 09 Oct 2020 00:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/303/</guid>
      <description>&lt;h2 id=&#34;cacheclusterとreplicationgrouphttpsawsamazoncomjpelasticacheredisfaqs&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/jp/elasticache/redis/faqs/&#34;&gt;CacheClusterとReplicationGroup&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;コンソールでは意識することがないが、CloudFormationでElastiCacheクラスターを構築する場合は&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-elasticache-cache-cluster.html&#34;&gt;CacheCluster&lt;/a&gt;と&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-replicationgroup.html&#34;&gt;ReplicationGroup&lt;/a&gt;という概念が存在する。&#xA;プライマリノードとリードレプリカノードは別のCacheClusterに作成され、それらをカプセル化したのがReplicationGroup。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go CompilerのFunction Inlining</title>
      <link>https://www.sambaiz.net/article/304/</link>
      <pubDate>Tue, 06 Oct 2020 22:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/304/</guid>
      <description>&lt;p&gt;Go Compilerが行う、関数の処理をインラインに展開することで呼び出しコストを削減する&lt;a href=&#34;https://github.com/golang/go/wiki/CompilerOptimizations#function-inlining&#34;&gt;Function Inlining&lt;/a&gt;の話。&#xA;式の数が40未満でループやクロージャなどが含まれないシンプルな処理の関数が対象となる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kinesis Data AnalyticsのSQL, Lambdaへの出力とCDKによるリソースの作成</title>
      <link>https://www.sambaiz.net/article/302/</link>
      <pubDate>Sat, 03 Oct 2020 19:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/302/</guid>
      <description>&lt;p&gt;Kinesis Data Analyticsで&lt;a href=&#34;https://docs.aws.amazon.com/kinesisanalytics/latest/dev/streaming-sql-concepts.html&#34;&gt;Streaming SQL&lt;/a&gt;を実行し、&#xA;Lambdaに送る。ほかの接続先としてData StreamやFirehoseがあり、フォーマットはJSONとCSVから選べる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EKS上のLocustから負荷をかける際のリソースの割り当てやインスタンスタイプの調整</title>
      <link>https://www.sambaiz.net/article/299/</link>
      <pubDate>Sun, 20 Sep 2020 16:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/299/</guid>
      <description>&lt;p&gt;EKS上にLocustをインストールしたのだが、ユーザーを増やしてもRPSが大して伸びない。リソースを調整してなるべく効率的に負荷をかけられるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudWatch Container InsightsでEKSのメトリクスを取得する</title>
      <link>https://www.sambaiz.net/article/300/</link>
      <pubDate>Fri, 18 Sep 2020 19:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/300/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/ContainerInsights.html&#34;&gt;CloudWatch Container Insights&lt;/a&gt;は&#xA;EKS/EC2上で動くK8sクラスタおよびECSの&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics.html&#34;&gt;メトリクス&lt;/a&gt;を取得する機能。今回はEKSで使う。&lt;/p&gt;&#xA;&lt;p&gt;CDKでクラスタを作成する場合、ECSでは&lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ecs.Cluster.html#containerinsights&#34;&gt;containerInsights&lt;/a&gt;をtrueにすることでセットアップされるが、EKSにはまだ存在しないため手動で行う。&lt;a href=&#34;https://github.com/aws/aws-cdk/issues/7160&#34;&gt;PR&lt;/a&gt;は上がっている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/297/&#34;&gt;CDKでEKSクラスタの作成からHelm ChartでのLocustのインストールまでを一気に行う - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでEKSクラスタの作成からHelm ChartでのLocustのインストールまでを一気に行う</title>
      <link>https://www.sambaiz.net/article/297/</link>
      <pubDate>Wed, 16 Sep 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/297/</guid>
      <description>&lt;p&gt;以前、Helm で locust をインストールしたが、今回は EKS に CDK でインストールする。CDK だとクラスタの作成からできるので cdk deploy で一気に環境が整う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/161/&#34;&gt;KubernetesにHelmでLocustによる分散負荷試験環境を立てる - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm run cdk -- --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.62.0 (build 8c2d7fc)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;まず VPC と Cluster を作成する。mastersRole をユーザーが assume して kubectl コマンドを実行できるように Principal に AWS アカウントも入れている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Organizaionsで複数のアカウントを一元管理する</title>
      <link>https://www.sambaiz.net/article/298/</link>
      <pubDate>Tue, 15 Sep 2020 23:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/298/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/organizations/&#34;&gt;AWS Organizations&lt;/a&gt;は複数のAWSアカウントを一元管理する機能。&#xA;既存のアカウントを一元管理できるだけではなく新規アカウントを簡単に作成することができるので、&#xA;セキュリティの向上やコストの分離、クォータなどアカウント全体に及ぶ影響の局所化などのためにサービスや環境ごとにアカウントを分けるハードルが下がる。&#xA;引き続きアカウントごとのコストも確認できるが、請求は一括で行われるので支払いの管理が楽になるし、ボリュームディスカウントの使用量が合算されRIも共有できるのでコストの上でも不利にならない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goの実装に手を入れずにHTTPリクエストをmockするライブラリhttpmockとその仕組み</title>
      <link>https://www.sambaiz.net/article/296/</link>
      <pubDate>Tue, 08 Sep 2020 23:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/296/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jarcoal/httpmock&#34;&gt;jarcoal/httpmock&lt;/a&gt;は次のようなHTTPリクエストが飛ぶ関数に対して、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Req&lt;/span&gt;() (&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;res, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; http.DefaultClient.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://google.com&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; res.Body.&lt;span style=&#34;color:#50fa7b&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;body, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; ioutil.&lt;span style=&#34;color:#50fa7b&#34;&gt;ReadAll&lt;/span&gt;(res.Body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(body), &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;次のように実装に手を入れずmockできるライブラリ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/jarcoal/httpmock&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/stretchr/testify/assert&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;TestReq&lt;/span&gt;(t &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;testing.T) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;httpmock.&lt;span style=&#34;color:#50fa7b&#34;&gt;Activate&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; httpmock.&lt;span style=&#34;color:#50fa7b&#34;&gt;DeactivateAndReset&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;httpmock.&lt;span style=&#34;color:#50fa7b&#34;&gt;RegisterResponder&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://google.com&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;httpmock.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewStringResponder&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mocked&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;res, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Req&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;assert.&lt;span style=&#34;color:#50fa7b&#34;&gt;Nil&lt;/span&gt;(t, err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;assert.&lt;span style=&#34;color:#50fa7b&#34;&gt;Equal&lt;/span&gt;(t, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mocked&amp;#34;&lt;/span&gt;, res)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;仕組みとしては&lt;a href=&#34;https://github.com/jarcoal/httpmock/blob/ee051935314e37e5bf978a63aacf11e79a373969/transport.go#L642&#34;&gt;Activate()&lt;/a&gt;で&#xA;&lt;code&gt;http.DefaultTransport&lt;/code&gt;をMockTransportに&lt;a href=&#34;https://github.com/jarcoal/httpmock/blob/v1/transport.go#L653&#34;&gt;置き換え&lt;/a&gt;、&#xA;&lt;a href=&#34;https://golang.org/pkg/net/http/#RoundTripper&#34;&gt;http.RoundTripper&lt;/a&gt;インタフェースの&lt;a href=&#34;https://github.com/jarcoal/httpmock/blob/ee051935314e37e5bf978a63aacf11e79a373969/transport.go#L73&#34;&gt;RoundTrip()&lt;/a&gt;で登録したリクエストに対してレスポンスを返している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nkfによる文字コードの判定とGoでのShiftJISの扱い</title>
      <link>https://www.sambaiz.net/article/295/</link>
      <pubDate>Mon, 07 Sep 2020 21:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/295/</guid>
      <description>&lt;p&gt;&lt;code&gt;file --mime&lt;/code&gt; で文字コードを判定しようとしたら &lt;code&gt;charset=unknown-8bit&lt;/code&gt; と表示されてしまったので、&lt;code&gt;nkf --guess&lt;/code&gt; したところShift_JISであることが分かった。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ file --mime unknown.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;unknown.txt: text/plain; charset=unknown-8bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install nkf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nkf --guess unknown.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Shift_JIS (CRLF) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このファイルをGoで扱うには&lt;a href=&#34;https://pkg.go.dev/golang.org/x/text/encoding/japanese?tab=doc&#34;&gt;japanese&lt;/a&gt; packageでエンコード/デコードする。&#xA;ShiftJISのほかにEUCJPとISO2022JPをサポートしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCodeのDocker開発コンテナでJupyter Notebookを開いてAthenaのクエリを実行し可視化する</title>
      <link>https://www.sambaiz.net/article/294/</link>
      <pubDate>Fri, 04 Sep 2020 19:34:04 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/294/</guid>
      <description>&lt;p&gt;ローカルでJupyter Notebookを動かすために以前は&lt;a href=&#34;https://hub.docker.com/r/jupyter/datascience-notebook/&#34;&gt;jupyter/datascience-notebook&lt;/a&gt;のイメージを立ち上げていた。&#xA;Notebookはエディタとしての機能に乏しいため通常のコードを書くのが大変だったのだが、&#xA;VSCodeのPython extensionにはJupyter notebookサポートが入っていてそのまま開けて実行できるのを知ったので移行することにした。&#xA;今回はVSCodeのDocker開発コンテナからNotebookを開いてAthenaのクエリを実行し可視化する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>時系列データのMAモデルとARモデル、その定常性と反転可能性</title>
      <link>https://www.sambaiz.net/article/285/</link>
      <pubDate>Fri, 14 Aug 2020 19:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/285/</guid>
      <description>&lt;p&gt;時系列データにLjung-Box testを行い自己相関があることが分かったら、次はそれをモデルで表現したい。今回は自己相関を表す最も基本的なモデルであるMAモデルとARモデルを見ていく。これらを組み合わせたものがARMAモデルで、階差に対するARMAモデルがARIMAモデル。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerでTensorFlowのモデルを学習させる</title>
      <link>https://www.sambaiz.net/article/293/</link>
      <pubDate>Mon, 10 Aug 2020 13:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/293/</guid>
      <description>&lt;p&gt;以前PyTorchのモデルを学習させたが、そのTensorFlow版。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/287/&#34;&gt;SageMakerでPyTorchのモデルを学習させる - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;コード&#34;&gt;コード&lt;/h2&gt;&#xA;&lt;p&gt;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/sagemaker-tensorflow-titanic&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;h3 id=&#34;モデル&#34;&gt;モデル&lt;/h3&gt;&#xA;&lt;p&gt;モデルはTitanicのを使う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/291/&#34;&gt;TensorFlow2のKeras APIでTitanicのモデルを作る - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlow2のKeras APIでTitanicのモデルを作る</title>
      <link>https://www.sambaiz.net/article/291/</link>
      <pubDate>Sat, 08 Aug 2020 18:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/291/</guid>
      <description>&lt;h2 id=&#34;データセット&#34;&gt;データセット&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tensorflow/datasets&#34;&gt;TensorFlow Datasets&lt;/a&gt;の&#xA;&lt;a href=&#34;https://www.tensorflow.org/datasets/catalog/titanic&#34;&gt;Titanic&lt;/a&gt;を使う。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install tensorflow-datasets&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/datasets/api_docs/python/tfds/load&#34;&gt;tfds.load()&lt;/a&gt;して&#xA;&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/data/Dataset&#34;&gt;tf.data.Dataset&lt;/a&gt;を作る。&#xA;&lt;code&gt;tf.data&lt;/code&gt; はCPUやGPUがなるべくアイドル状態にならないようにする効率的な入力パイプラインを構築するAPI。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/195/&#34;&gt;TensorFlowのtf.data API - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Androidのプロキシ設定をMacのCharlesに向けて通信をキャプチャする</title>
      <link>https://www.sambaiz.net/article/292/</link>
      <pubDate>Wed, 05 Aug 2020 20:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/292/</guid>
      <description>&lt;h2 id=&#34;mac側の設定&#34;&gt;Mac側の設定&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.charlesproxy.com/&#34;&gt;Charles&lt;/a&gt;を入れて次の設定を行う。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Proxy SettingsでEnable transparent HTTP proxingをオン&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/292-1.png&#34; alt=&#34;Proxy Settings&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SSH Proxy Settingsのincludeに*:*を追加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/292-2.png&#34; alt=&#34;SSL Proxy Settings&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Access Control SettingsにAndroidのローカルIPアドレスを追加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/292-3.png&#34; alt=&#34;Access Control Settings&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerで学習したPyTorchのモデルをElastic Inferenceを有効にしてデプロイする</title>
      <link>https://www.sambaiz.net/article/290/</link>
      <pubDate>Sun, 26 Jul 2020 02:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/290/</guid>
      <description>&lt;p&gt;学習させたモデルをSageMakerのホスティングサービスにデプロイする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/287/&#34;&gt;SageMakerでPyTorchのモデルを学習させる - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;推論時に呼ばれる関数&#34;&gt;推論時に呼ばれる関数&lt;/h2&gt;&#xA;&lt;p&gt;推論時には次の関数が&lt;a href=&#34;https://sagemaker.readthedocs.io/en/stable/frameworks/pytorch/using_pytorch.html#serve-a-pytorch-model&#34;&gt;呼ばれる&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;model_fn(model_dir): モデルをロードする&lt;/li&gt;&#xA;&lt;li&gt;input_fn(request_body, request_content_type): リクエストボディのデシリアライズ&lt;/li&gt;&#xA;&lt;li&gt;predict_fn(input_data, model): モデルで推論する&lt;/li&gt;&#xA;&lt;li&gt;output_fn(prediction, content_type): Content-Typeに応じたシリアライズ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;input_fn()&lt;/code&gt; と &lt;code&gt;output_fn()&lt;/code&gt; はJSON, CSV, NPYに対応した実装が、&lt;code&gt;predict_fn()&lt;/code&gt; はモデルを呼び出す実装が&lt;a href=&#34;https://github.com/aws/sagemaker-pytorch-inference-toolkit/blob/4894d509f60ecd43d34356c9c571b9fb9e8b97ad/src/sagemaker_pytorch_serving_container/default_pytorch_inference_handler.py&#34;&gt;デフォルト&lt;/a&gt;として用意されていて、&#xA;&lt;code&gt;model_fn()&lt;/code&gt; も後述するElastic Inferenceを使う場合&lt;code&gt;model.pt&lt;/code&gt;というファイルをロードするデフォルト実装が使われる。&#xA;ただしその場合モデルが&lt;code&gt;torch.jit.save()&lt;/code&gt;で&lt;a href=&#34;https://pytorch.org/docs/stable/jit.html&#34;&gt;TorchScript&lt;/a&gt;として保存してある&lt;a href=&#34;https://sagemaker.readthedocs.io/en/stable/frameworks/pytorch/using_pytorch.html#save-the-model&#34;&gt;必要がある&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMakerでPyTorchのモデルを学習させる</title>
      <link>https://www.sambaiz.net/article/287/</link>
      <pubDate>Fri, 24 Jul 2020 22:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/287/</guid>
      <description>&lt;p&gt;AWSの機械学習サービス&lt;a href=&#34;https://aws.amazon.com/jp/sagemaker/&#34;&gt;SageMaker&lt;/a&gt;でPyTorchのモデルを学習させる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コード&#34;&gt;コード&lt;/h2&gt;&#xA;&lt;p&gt;まず学習させるモデルとそれを呼び出すエントリーポイントになるコードを書く。全体のコードは&lt;a href=&#34;https://github.com/sambaiz/sagemaker-pytorch-mnist&#34;&gt;GitHub&lt;/a&gt;にある。&#xA;実際の環境と同じSageMakerのコンテナをローカルで動かしてVSCodeのRemote Developmentで接続して開発すると入っていないパッケージは警告が出たりして良い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する</title>
      <link>https://www.sambaiz.net/article/289/</link>
      <pubDate>Sun, 19 Jul 2020 19:34:04 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/289/</guid>
      <description>&lt;p&gt;SageMakerで学習させるモデルを開発するにあたって、Notebooks上ではコードを書きづらいのでVS Codeで書いているのだが、ローカルに依存パッケージをインストールして実行しているため&#xA;エディタ上では警告が出ていなくても、実際の環境にはパッケージがなかったりすることがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PoetryでPythonの依存パッケージを管理する</title>
      <link>https://www.sambaiz.net/article/288/</link>
      <pubDate>Sat, 18 Jul 2020 21:23:04 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/288/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/python-poetry/poetry&#34;&gt;Poetry&lt;/a&gt;は比較的新しいPythonの依存管理ツールで、&#xA;&lt;a href=&#34;https://github.com/pypa/pipenv&#34;&gt;pipenv&lt;/a&gt;の&lt;a href=&#34;https://github.com/python-poetry/poetry#what-about-pipenv&#34;&gt;依存解決に失敗することがある&lt;/a&gt;問題を解消したり、ライブラリを開発しやすくしたものらしい。&#xA;まだスターはpipenvの半分ほどだがバージョンもv1.0.0に到達したしpipenvよりも速くて安定しているという話もあるので使ってみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iOSアプリとLLVMのbitcode</title>
      <link>https://www.sambaiz.net/article/286/</link>
      <pubDate>Tue, 07 Jul 2020 21:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/286/</guid>
      <description>&lt;p&gt;Objective-CやSwiftはLLVMを通して機械語にコンパイルされる。&#xA;Swiftの場合、フロントエンドのコンパイラによってASTが作られ&#xA;SIL(Swift Intermediate Language)という中間表現に変換された後、&#xA;LLVM IR(intermediate representation)に再度変換され、&#xA;これをLLVM Optimizerで最適化したものが&#xA;バックエンドのLLVMに渡りターゲットアーキテクチャの機械語に変換される流れになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>時系列データの定常性と定常過程、単位根過程</title>
      <link>https://www.sambaiz.net/article/279/</link>
      <pubDate>Sun, 05 Jul 2020 21:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/279/</guid>
      <description>&lt;p&gt;時系列データを各時間\(t\)ごとの分布から抽出された確率変数\(R_t\)の列とみなすと、次の性質が定義される。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;弱定常性(weak stationarity): 各分布の平均\(E(R_t) = \mu\)が\(t\)に依らず一定で、\(lag=k\) のデータとの共分散である自己共分散 \(Cov(R_t, R_{t-k}) = E[(R_t - E(R_t))(R_{t-k} - E(R_{t-k}))] = \gamma_k\) がlagのみに依存する(つまり分散 \(\gamma_0\) も一定)&lt;/li&gt;&#xA;&lt;li&gt;強定常性(strict stationarity): 任意の\(t,k\)に対する \((R_t, R_{t+1}, &amp;hellip;, R_{t+k})\) の同時分布が同一&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;つまり弱定常性を持つデータは、一定の平均のまわりの一定の振れ幅の中で、それ以前の値にlagに応じた影響を受けながら推移することになる。単に定常性と言う場合この弱定常性のことを指す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのクラスをObjective-CのClass型に渡してinitしたときに落ちるパターン</title>
      <link>https://www.sambaiz.net/article/284/</link>
      <pubDate>Sun, 28 Jun 2020 23:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/284/</guid>
      <description>&lt;p&gt;Objective-Cのクラスは基本的に&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/nsobject&#34;&gt;NSObject&lt;/a&gt;をルートクラスに持ち、その&lt;code&gt;init()&lt;/code&gt;が継承またはオーバーライドされるが、&#xA;SwiftのクラスはNSObjectを継承していなかったり他のdesignated initializerが存在することで&lt;code&gt;init()&lt;/code&gt;が存在しないことや、default initializerのために明示的な&lt;code&gt;init()&lt;/code&gt;が存在しない場合がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのARCとweak、delegateが呼ばれなかったりObjective-Cで返り値が0やNOになる原因</title>
      <link>https://www.sambaiz.net/article/283/</link>
      <pubDate>Sat, 27 Jun 2020 23:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/283/</guid>
      <description>&lt;p&gt;SwiftやObjective-Cは&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/AutomaticReferenceCounting.html&#34;&gt;ARC (Automatic Reference Counting)&lt;/a&gt;という仕組みでメモリを管理していて、&#xA;インスタンスへの参照カウントが0になったときにそのメモリが開放される。昔は参照カウントの増減を手動でやっていたが今はARCが自動でやってくれる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのMetatypeとMetadata</title>
      <link>https://www.sambaiz.net/article/282/</link>
      <pubDate>Thu, 25 Jun 2020 20:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/282/</guid>
      <description>&lt;p&gt;Objcの&lt;a href=&#34;https://developer.apple.com/documentation/objectivec/class?language=occ&#34;&gt;Class&lt;/a&gt;型のように&#xA;インスタンスではなくクラスそのものを取りたい場合、Swiftでは&lt;code&gt;Foo.Type&lt;/code&gt;で表せる&lt;a href=&#34;https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID455&#34;&gt;Metatype&lt;/a&gt;を用いる。&#xA;値はクラスからは&lt;code&gt;Foo.self&lt;/code&gt;で、インスタンスからは&lt;code&gt;type(of: Foo())&lt;/code&gt;で得られる。&#xA;初期化の際はサブクラスにも存在することが保証されるrequired initializerを呼ぶか、継承できないfinal classである必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swiftのassociatedtypeとtype erasure</title>
      <link>https://www.sambaiz.net/article/281/</link>
      <pubDate>Wed, 24 Jun 2020 23:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/281/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID189&#34;&gt;associatedtype&lt;/a&gt;はprotocolのジェネリクスのようなもので、複数の型に対応した定義を書くことができる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protocol&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;P1&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    associatedtype T&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some&lt;/span&gt;(x: T)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some2&lt;/span&gt;(x: T)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;C1&lt;/span&gt;: P1 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some&lt;/span&gt;(x: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    // ambiguous inference of associated type &amp;#39;T&amp;#39;: &amp;#39;String&amp;#39; vs. &amp;#39;Int&amp;#39;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    func some2(x: String) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;        print(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some2&lt;/span&gt;(x: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;C2&lt;/span&gt;: P1 {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some&lt;/span&gt;(x: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Int&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// OK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;some2&lt;/span&gt;&amp;lt;T&amp;gt;(x: T) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通常、protocolは&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/Protocols.html#ID275&#34;&gt;existential type&lt;/a&gt;として変数の型に指定できるが、&#xA;associatedtypeが含まれるとその型が不明なので指定できない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swiftのdesignated/convenience/required/default initializerと継承</title>
      <link>https://www.sambaiz.net/article/280/</link>
      <pubDate>Tue, 23 Jun 2020 21:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/280/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/Initialization.html&#34;&gt;Initialization — The Swift Programming Language (Swift 5.3)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;designated initializerはプライマリなinitializerで、全ての初期化されていないプロパティを初期化し、スーパークラスの&lt;code&gt;init()&lt;/code&gt;を呼んでチェーンを作る。&#xA;convenience initializerは利便性のためのinitializerで、他のinitializerを呼んで最終的にdesignated initializerが呼ばれるようにする。&#xA;required initializerは継承が必須なinitializerで、サブクラスにも存在することが保証される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythonで時系列データを検定(Shapiro-Wilk test, runs test, Ljung-Box test)する</title>
      <link>https://www.sambaiz.net/article/273/</link>
      <pubDate>Sun, 21 Jun 2020 01:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/273/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/271/&#34;&gt;統計的仮説検定 - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;テストデータ&#34;&gt;テストデータ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.chicagobooth.edu/research/kilts/datasets/dominicks&#34;&gt;Dominick&amp;rsquo;s dataset&lt;/a&gt;のビールの週売上データを使う。&#xA;UPC(Universal Product Code)に対応する商品データと、店(STORE)で週(WEEK)に売れた数(MOVE)と価格(PRICE)、収益(PROFIT)を含むMovementデータがCSVで提供されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iOSのnibで作ったViewにCustom Classを対応させて描画する</title>
      <link>https://www.sambaiz.net/article/278/</link>
      <pubDate>Fri, 05 Jun 2020 05:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/278/</guid>
      <description>&lt;p&gt;nibとUIViewを継承したCustomViewクラスを作成し、nibにLabelを配置して&lt;code&gt;@IBOutlet&lt;/code&gt;と繋げた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Foundation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;UIKit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;viewframework&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CustomView&lt;/span&gt;: UIView {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;@IBOutlet&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;weak&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;labelview&lt;/span&gt;: UILabel?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このCustomViewをnibのViewと対応させるのに次の2通りの方法がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;でnext_permutationを使わずに順列を列挙する</title>
      <link>https://www.sambaiz.net/article/277/</link>
      <pubDate>Wed, 03 Jun 2020 01:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/277/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/permutations/&#34;&gt;Permutations - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;配列が渡されてそれを並び替えてできる全ての順列を返す問題。&#xA;まさにSTLのalgorithmに辞書順で次の順列を返す&lt;code&gt;next_permutation()&lt;/code&gt;というのがあって次のようにするだけでできてしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのURLSession</title>
      <link>https://www.sambaiz.net/article/276/</link>
      <pubDate>Sun, 31 May 2020 02:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/276/</guid>
      <description>&lt;p&gt;Swiftの&lt;a href=&#34;https://developer.apple.com/documentation/foundation/urlsession&#34;&gt;URLSession&lt;/a&gt;は&#xA;ネットワーク通信を行う&lt;a href=&#34;https://developer.apple.com/documentation/foundation/urlsessiontask&#34;&gt;URLSessionTask&lt;/a&gt;を生成するオブジェクト。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;request&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; session: URLSession) -&amp;gt; () -&amp;gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Void&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;url&lt;/span&gt; = URL(string: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://api.publicapis.org/health&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;request&lt;/span&gt; = URLRequest(url: url)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        request.httpMethod = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        request.addValue(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;, forHTTPHeaderField: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;task&lt;/span&gt; = session.dataTask(with: request) { data, response, error &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;httpResponse&lt;/span&gt; = response &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt;? HTTPURLResponse &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;not http response &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;error&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; httpResponse.statusCode &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt; == &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bad status code: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;httpResponse.statusCode&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;data&lt;/span&gt; = data {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;str&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(data: data, encoding: .utf8) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    print(str) &lt;span style=&#34;color:#6272a4&#34;&gt;// =&amp;gt; {&amp;#34;alive&amp;#34;: true}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        task.resume()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;シングルトンのsharedのほか、コンストラクタに&#xA;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/urlsessionconfiguration&#34;&gt;URLSessionConfiguration&lt;/a&gt;&#xA;を渡して、&lt;code&gt;allowsCellularAccess&lt;/code&gt; といった設定やdelegateを持ったインスタンスを作ることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのJSONEncoder/DecoderとCodable protocol</title>
      <link>https://www.sambaiz.net/article/275/</link>
      <pubDate>Tue, 26 May 2020 01:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/275/</guid>
      <description>&lt;p&gt;Swiftの&lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsonencoder&#34;&gt;JSONEncoder&lt;/a&gt;/&lt;a href=&#34;https://developer.apple.com/documentation/foundation/jsondecoder&#34;&gt;Decoder&lt;/a&gt;は&#xA;JSON文字列をCodable(Encodable &amp;amp; Decodable) protocolを実装したClassやStructにエンコード/デコードするオブジェクト。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VPCエンドポイント</title>
      <link>https://www.sambaiz.net/article/274/</link>
      <pubDate>Sat, 23 May 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/274/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/vpc/latest/userguide/vpc-endpoints.html&#34;&gt;VPCエンドポイント&lt;/a&gt;は&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/privatelink/&#34;&gt;PrivateLink&lt;/a&gt;対応のサービスおよび、S3やDynamoとAWSネットワーク内で接続するためのエンドポイント。&#xA;インターネットに出ない分セキュアでゲートウェイへの負荷も抑えられる。&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/privatelink/pricing/&#34;&gt;料金&lt;/a&gt;は時間あたりとトラフィック量による。&lt;/p&gt;&#xA;&lt;p&gt;VPCエンドポイントを使うためにアプリケーション側に手を入れる必要はなく、&#xA;S3とDynamoがサポートしているGatewayのエンドポイントではルートテーブルによって、&#xA;その他多くのサービスがサポートしているInterfaceのエンドポイントでは名前解決の時点で向き先が変わるようになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>統計的仮説検定</title>
      <link>https://www.sambaiz.net/article/271/</link>
      <pubDate>Sun, 10 May 2020 23:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/271/</guid>
      <description>&lt;p&gt;統計的仮説検定(statistical hypothesis test)は母集団に対するある仮説が妥当だと言えるか標本から判断する手法。&#xA;棄却(reject)されることが期待される帰無仮説(null hypothesis)\(H_0\)と、それに相対する本命の対立仮説(alternative hypothesis)\(H_1\)を立て、&#xA;検定統計量を出し、帰無仮説が真である場合での確率分布でそれより外れた値が観測される確率であるp値が、設定した有意水準\(α\)(0.05にすることが多い)を下回れば帰無仮説が棄却され対立仮説が採択(accept)される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43;でO(1)で読み書きできるLRUキャッシュを実装する</title>
      <link>https://www.sambaiz.net/article/270/</link>
      <pubDate>Sun, 26 Apr 2020 18:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/270/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/lru-cache/&#34;&gt;LRU Cache - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;最初次のようなコードを書いたがタイムアウトしてしまった。&#xA;C++のstd::mapは二分木で実装されているので各操作にO(log n)かかり、dequeの先頭への挿入はO(1)でできるが重複するキーを探して削除するのにO(n^2)かかってしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goで参照型の変数に代入し値を変更したとき元の値に影響がある場合とない場合</title>
      <link>https://www.sambaiz.net/article/269/</link>
      <pubDate>Sat, 25 Apr 2020 22:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/269/</guid>
      <description>&lt;p&gt;サンプル用struct。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Data &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Value  &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ValueP &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Slice  []Data  &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  SliceP []&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Data &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;,omitempty&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;NewData&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Data {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;Data{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Value:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;no-changed&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ValueP: &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;[]&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;no-changed&amp;#34;&lt;/span&gt;}[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Slice: []Data{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Data{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Value:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;no-changed&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Data{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Value:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;no-changed&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    SliceP: []&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;Data{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;Data{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Value:  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;no-changed&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参照を取って値を取る&#34;&gt;参照を取って値を取る&lt;/h3&gt;&#xA;&lt;p&gt;アドレスは変わらず、そのフィールドを書き換えると当然元々の値も書き換わる。&#xA;各要素が順番に代入されるfor-rangeでのループも他と同じく参照型でないなら変わらず、参照型なら変わる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのcipher packageに実装されている暗号利用モードのベンチマーク</title>
      <link>https://www.sambaiz.net/article/268/</link>
      <pubDate>Sun, 12 Apr 2020 23:29:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/268/</guid>
      <description>&lt;p&gt;暗号利用モードはブロック長より長いメッセージに対してどのようにブロック暗号を適用するかのアルゴリズム。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ブロック暗号&#34;&gt;ブロック暗号&lt;/h2&gt;&#xA;&lt;p&gt;ブロック暗号は固定長のブロックを暗号化/復号する共通鍵暗号で、入力と同じ長さの出力を返す暗号化/復号関数からなる。&#xA;アメリカ国立標準技術研究所（NIST) が標準暗号として採用したAES (Rijndael) が有名。&#xA;最も単純な暗号利用モードとして、メッセージをブロックに分割してそれぞれ独立に適用する Electronic Codebook (ECB) というのがあるが、&#xA;鍵とブロックが同じなら毎回同じ出力になってしまうため、メッセージのパターンが残ってしまうのとリプレイ攻撃に弱い問題があり使われない。&#xA;また、メッセージがブロック長の整数倍になるようにパディングが必要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ベルマンフォード法とダイクストラ法とワーシャルフロイド法で最短経路問題を解く</title>
      <link>https://www.sambaiz.net/article/267/</link>
      <pubDate>Wed, 01 Apr 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/267/</guid>
      <description>&lt;p&gt;ベルマンフォード法とダイクストラ法ワーシャルフロイド法で最短経路問題を解く。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ベルマンフォード法&#34;&gt;ベルマンフォード法&lt;/h2&gt;&#xA;&lt;p&gt;始点の距離が0、それ以外の頂点の距離が無限大な初期状態から、&#xA;全辺を見て各辺を通るとしたときに現在の距離を下回るなら更新する、というのを繰り返すアルゴリズム。&#xA;辺の重みは負でも問題ないが、総和が負の値になる閉路が存在する場合、そこで無限ループしてしまうので決まらない。&#xA;その場合を除けば、頂点の数を&lt;code&gt;|V|&lt;/code&gt;、辺の数を&lt;code&gt;|E|&lt;/code&gt;とすると、繰り返しは&lt;code&gt;|V|-1&lt;/code&gt;回で終わり、計算量は&lt;code&gt;O(|V||E|)&lt;/code&gt;になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>作ったライブラリをCocoaPods/Carthageでimportする</title>
      <link>https://www.sambaiz.net/article/266/</link>
      <pubDate>Sat, 28 Mar 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/266/</guid>
      <description>&lt;h2 id=&#34;cocoapodshttpscocoapodsorg&#34;&gt;&lt;a href=&#34;https://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;長らく使われている依存ライブラリ管理ツール。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo gem install cocoapods&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pod --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.9.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;podspechttpsguidescocoapodsorgsyntaxpodspechtml&#34;&gt;&lt;a href=&#34;https://guides.cocoapods.org/syntax/podspec.html&#34;&gt;podspec&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;まずはライブラリ側の作業。podspecを埋めていく。&#xA;Trunkに上げないPodに依存する場合、&lt;code&gt;spec.dependency&lt;/code&gt; では&#xA;&lt;a href=&#34;https://guides.cocoapods.org/using/the-podfile.html#from-a-podspec-in-the-root-of-a-library-repo&#34;&gt;:git&lt;/a&gt; や&#xA;&lt;a href=&#34;https://guides.cocoapods.org/using/the-podfile.html#using-the-files-from-a-folder-local-to-the-machine&#34;&gt;:path&lt;/a&gt; を指定できないので、アプリ側のPodfileで指定する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iOSのipa(app)のProfileを異なるTeamのものに置き換えて実機で動かす</title>
      <link>https://www.sambaiz.net/article/265/</link>
      <pubDate>Tue, 24 Mar 2020 22:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/265/</guid>
      <description>&lt;p&gt;Profileを置き換えて有効期限やDevice IDを更新する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/264/&#34;&gt;iOSアプリのProvisioning profile - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;codesignでの試み&#34;&gt;codesignでの試み&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;.ipa&lt;/code&gt; をunzipすると &lt;code&gt;.app&lt;/code&gt; が出てくる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; unzip my&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;test&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;app&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ipa&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; tree Payload&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Payload&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── my&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;test&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;app&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── Base&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;lproj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   └── LaunchScreen&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;storyboardc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │       ├── &lt;span style=&#34;color:#bd93f9&#34;&gt;01&lt;/span&gt;J&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;lp&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;oVM&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;view&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;Ze5&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;b&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;t3&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │       ├── Info&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;plist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │       └── UIViewController&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;01&lt;/span&gt;J&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;lp&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;oVM&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nib&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── Info&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;plist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── PkgInfo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── _CodeSignature&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   └── CodeResources&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── embedded&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;mobileprovision&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── my&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;test&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;codesign&lt;/code&gt; で entitlements を確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iOSアプリのProvisioning Profile</title>
      <link>https://www.sambaiz.net/article/264/</link>
      <pubDate>Tue, 24 Mar 2020 21:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/264/</guid>
      <description>&lt;p&gt;アプリを実機にデプロイするために必要なもの。&#xA;App ID (prefix + Bundle ID)やインストール可能なDevice ID、&#xA;&lt;a href=&#34;https://developer.apple.com/jp/support/code-signing/&#34;&gt;コード署名&lt;/a&gt;に用いた&#xA;Apple発行の&lt;a href=&#34;https://help.apple.com/developer-account/#/deveedc0daa0&#34;&gt;証明書&lt;/a&gt;などを含む。これらが一致しないとインストールできない。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/264.png&#34; alt=&#34;Xcode上で見られる情報&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;次のTypeのProfileが存在する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのツールのバージョンをgo.modで指定する</title>
      <link>https://www.sambaiz.net/article/263/</link>
      <pubDate>Sun, 22 Mar 2020 01:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/263/</guid>
      <description>&lt;p&gt;依存moduleと同様にツールもバージョンを指定し、挙動や出力が変わらないようにする。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-modules-by-example/index/blob/master/010_tools/README.md&#34;&gt;Tools as dependencies&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まず次の &lt;code&gt;tools.go&lt;/code&gt; のようなファイルを作ってimportし、&#xA;&lt;code&gt;go mod tidy&lt;/code&gt; で消えないようにする。&#xA;build tagが付いているので通常のbuild時には影響を及ぼさない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Modulesのreplaceでforkしたコードのimportを書き換えずにfork後のpackageに向ける</title>
      <link>https://www.sambaiz.net/article/262/</link>
      <pubDate>Sun, 01 Mar 2020 21:19:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/262/</guid>
      <description>&lt;p&gt;Goはimportの際に相対パスやモジュール名ではなく&lt;code&gt;github.com/foo/bar&lt;/code&gt;のようなフルパスで指定するため、forkしたコードを使うと参照するpackageは元のままになってしまう。Go Modulesのreplace directiveを使うとコードを書き換えずに依存先を変えることができる。相対パスも使える。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Modulesのproxyとsumdb</title>
      <link>https://www.sambaiz.net/article/261/</link>
      <pubDate>Sat, 29 Feb 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/261/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/module-mirror-launch&#34;&gt;Module Mirror and Checksum Database Launched - The Go Blog&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Go1.13からデフォルトで使われるようになったGo Modulesのミラーとchecksumを返すサーバー。&#xA;Googleによって運営されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DAX (DynamoDB Accelerator)の特性と挙動確認</title>
      <link>https://www.sambaiz.net/article/260/</link>
      <pubDate>Wed, 26 Feb 2020 23:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/260/</guid>
      <description>&lt;h2 id=&#34;daxとは&#34;&gt;DAXとは&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/dynamodb/dax/&#34;&gt;DAX&lt;/a&gt;はDynamoDBの前段に置かれるマネージドなインメモリキャッシュで、&#xA;Read速度の向上(数ms-&amp;gt;数百μs)とテーブルのRead Capacityの節約に効果がある。&lt;/p&gt;&#xA;&lt;p&gt;DynamoDBとSDKのAPIの互換性があるため置き換えるだけで使えるようになっている。&#xA;クライアントの実装としてはHTTPではない独自のプロトコルで&lt;a href=&#34;https://github.com/aws/aws-dax-go/blob/19b34c5c99ea4b76610dcbae7d87fd572de012df/dax/internal/client/single.go#L278&#34;&gt;通信している&lt;/a&gt;点が異なる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ECSでアプリケーションを動かすBoilerplateを作った</title>
      <link>https://www.sambaiz.net/article/259/</link>
      <pubDate>Mon, 24 Feb 2020 16:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/259/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/ecs-boilerplate&#34;&gt;https://github.com/sambaiz/ecs-boilerplate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ECS上でアプリケーションを動かすBoilerplateを作った。CDKでデプロイする。以前Digdagを動かしたときのを汎用的にしたもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AndroidのListViewで再利用されるViewのgetGlobalVisibleRect()が意図した値を返さない</title>
      <link>https://www.sambaiz.net/article/257/</link>
      <pubDate>Tue, 11 Feb 2020 01:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/257/</guid>
      <description>&lt;h2 id=&#34;listviewのviewの再利用&#34;&gt;ListViewのViewの再利用&lt;/h2&gt;&#xA;&lt;p&gt;まずはListViewのViewが再利用されていることを確認する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; com.example.listviewglobalvisiblerect&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.widget.BaseAdapter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.content.Context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.view.View&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.view.ViewGroup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.app.Activity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.graphics.Color&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.graphics.Rect&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.util.Log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; android.widget.TextView&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SampleData&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;val&lt;/span&gt; id: Long, &lt;span style=&#34;color:#ff79c6&#34;&gt;val&lt;/span&gt; value: String)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;SampleAdapter&lt;/span&gt;: BaseAdapter {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;val&lt;/span&gt; context: Context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;val&lt;/span&gt; items: List&amp;lt;SampleData&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;val&lt;/span&gt; views = ArrayList&amp;lt;View&amp;gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;constructor&lt;/span&gt;(context: Context, items: List&amp;lt;SampleData&amp;gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.context = context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.items = items&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getCount&lt;/span&gt;(): Int {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; items.size&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getItem&lt;/span&gt;(position: Int): Any {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; items.&lt;span style=&#34;color:#ff79c6&#34;&gt;get&lt;/span&gt;(position)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getItemId&lt;/span&gt;(position: Int): Long {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; items.&lt;span style=&#34;color:#ff79c6&#34;&gt;get&lt;/span&gt;(position).id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;getView&lt;/span&gt;(position: Int, convertView: View?, container: ViewGroup?): View {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;var&lt;/span&gt; view = convertView &lt;span style=&#34;color:#ff79c6&#34;&gt;?:&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.context &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; Activity).layoutInflater.inflate(&lt;span style=&#34;color:#50fa7b&#34;&gt;R&lt;/span&gt;.layout.sample_list_item, container, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (convertView &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;.v(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SampleAdapter&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;view &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${position}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; is created&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            view.tag = position&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (position &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                view.setBackgroundColor(&lt;span style=&#34;color:#50fa7b&#34;&gt;Color&lt;/span&gt;.LTGRAY)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            views.add(view)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;Log&lt;/span&gt;.v(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SampleAdapter&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;view &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${convertView.tag}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; is recycled at &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${position}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        view.findViewById&amp;lt;TextView&amp;gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;R&lt;/span&gt;.id.text_view).setText(items.&lt;span style=&#34;color:#ff79c6&#34;&gt;get&lt;/span&gt;(position).&lt;span style=&#34;color:#ff79c6&#34;&gt;value&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; view&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;position == 0&lt;/code&gt; のCellだけ生成時に背景色を灰色にしたところ、他のpositionでも再利用された灰色のCellが登場した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Buildkitとは</title>
      <link>https://www.sambaiz.net/article/258/</link>
      <pubDate>Tue, 11 Feb 2020 01:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/258/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;Buildkit&lt;/a&gt;は高速でセキュアなコンテナイメージのビルドツール。&#xA;Docker本体にも18.09から&lt;a href=&#34;https://docs.docker.com/develop/develop-images/build_enhancements/&#34;&gt;統合され&lt;/a&gt;、&#xA;&lt;code&gt;DOCKER_BUILDKIT=1 docker build&lt;/code&gt; するとBuildkitが使われるようになった。&lt;/p&gt;&#xA;&lt;h3 id=&#34;llb-low-level-builder&#34;&gt;LLB (low-level builder)&lt;/h3&gt;&#xA;&lt;p&gt;BuildkitはDockerfileなどをLLBという中間言語にコンパイルする。&#xA;LLBは依存関係を表すDAG(Directed acyclic graph; 有向非巡回グラフ)で、&#xA;protobufで&lt;a href=&#34;https://github.com/moby/buildkit/blob/758c61e8730eac0da8a8cce72ec4009868c92165/solver/pb/ops.proto&#34;&gt;定義されている&lt;/a&gt;。&#xA;これによって処理を並列に実行したり、Dockerfileを変更してもそれ以降のステージのキャッシュを全て破棄する必要がなくなった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftでGCDのDispatchQueueに処理を投げて並列実行させる</title>
      <link>https://www.sambaiz.net/article/256/</link>
      <pubDate>Sat, 25 Jan 2020 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/256/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/DISPATCH&#34;&gt;GCD (Grand Central Dispatch)&lt;/a&gt;はmacOSやiOSのマルチコア環境で、&#xA;効率的に並列処理を実行するための仕組み。&#xA;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/operationqueue&#34;&gt;OperationQueue&lt;/a&gt;というのもあるが、これもGCD上で動く。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dispatchqueuehttpsdeveloperapplecomdocumentationdispatchdispatchqueue&#34;&gt;&lt;a href=&#34;https://developer.apple.com/documentation/dispatch/dispatchqueue&#34;&gt;DispatchQueue&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;処理をどのスレッドで実行するか管理するキュー。&#xA;どこからでも参照できるmainとglobalのキュー以外に新しくキューを作成することもできる。&#xA;labelは衝突しないようにreverse-DNS nameにすることが推奨されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>貪欲法(Greedy algorithm)で問題を解く</title>
      <link>https://www.sambaiz.net/article/255/</link>
      <pubDate>Mon, 13 Jan 2020 21:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/255/</guid>
      <description>&lt;p&gt;貪欲法(Greedy algorithm)は問題を分割し、それぞれにおいて貪欲に最適な選択をしていくアルゴリズムの総称。&#xA;必ずしも最適解になるとは限らないが、うまくいけば簡潔に計算量を減らすことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Objective-CでFrameworkを作りSwiftからimportする</title>
      <link>https://www.sambaiz.net/article/254/</link>
      <pubDate>Sun, 12 Jan 2020 17:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/254/</guid>
      <description>&lt;h2 id=&#34;frameworkの作成&#34;&gt;Frameworkの作成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;New -&amp;gt; Project&lt;/code&gt;でFrameworkをLanguage Objective-Cで作成。&lt;/p&gt;&#xA;&lt;p&gt;最低限の実装とHeaderを書いた。このHeaderはBuild PhasesのHeadersにPublicとして登録されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; STLのContainersとAlgorithms</title>
      <link>https://www.sambaiz.net/article/253/</link>
      <pubDate>Sat, 04 Jan 2020 21:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/253/</guid>
      <description>&lt;p&gt;STL(Standard Template Library)はC++の標準ライブラリ。&#xA;その名の通りtemplateで実装され、様々な型で使えるようになっている。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// https://github.com/microsoft/STL/blob/1e8b8d4eef4b2dddeb7533c5231c876383bd0ea6/stl/inc/algorithm#L3501&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_RanIt&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_Pr&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; sort(&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; _RanIt _First, &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; _RanIt _Last, _Pr _Pred) { &lt;span style=&#34;color:#6272a4&#34;&gt;// order [_First, _Last), using _Pred&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    _Adl_verify_range(_First, _Last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; _UFirst &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; _Get_unwrapped(_First);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; _ULast  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; _Get_unwrapped(_Last);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    _Sort_unchecked(_UFirst, _ULast, _ULast &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; _UFirst, _Pass_fn(_Pred));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下の例は&lt;code&gt;C++14&lt;/code&gt;で、&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacのVSCodeでC&#43;&#43;を書く環境構築</title>
      <link>https://www.sambaiz.net/article/252/</link>
      <pubDate>Sat, 04 Jan 2020 01:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/252/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;(追記:2021-02-05) 今はdevcontainerで環境を作っている。&lt;a href=&#34;https://github.com/microsoft/vscode-remote-try-cpp&#34;&gt;mirosoft/vscode-remote-try-cpp&lt;/a&gt;をコンテナで開くだけで&lt;code&gt;bits/stdc++.h&lt;/code&gt;も読めるg++環境が立ち上がる。GitHubのテンプレートとして公開されているので、これをベースとしたリポジトリを作成できる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/289/&#34;&gt;VSCodeのRemote DevelopmentでSageMakerのコンテナ環境でモデルを開発する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>動的計画法(DP)で計算結果を再利用して計算量を減らす</title>
      <link>https://www.sambaiz.net/article/251/</link>
      <pubDate>Mon, 30 Dec 2019 19:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/251/</guid>
      <description>&lt;p&gt;動的計画法(DP, Dynamic Programming)は、&#xA;例えばフィボナッチ数列の項&lt;code&gt;f(x)&lt;/code&gt;を記録しておいた&lt;code&gt;f(x-1)&lt;/code&gt;と&lt;code&gt;f(x-2)&lt;/code&gt;から計算するように、&#xA;計算結果を記録し帰納的に求められるより大きな計算で利用するアルゴリズムの総称。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LA,ディズニーランドからre:Inventに参加しグランドキャニオンへドライブしてきた</title>
      <link>https://www.sambaiz.net/article/250/</link>
      <pubDate>Sun, 22 Dec 2019 23:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/250/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/103/&#34;&gt;一昨年&lt;/a&gt;、&lt;a href=&#34;https://www.sambaiz.net/article/164/&#34;&gt;去年&lt;/a&gt;と参加したGoogle I/Oのチケットが今年は当たらなかったので、前から行ってみたかったAWSのre:Inventに参加することにした。&#xA;会場はラスベガスで、会期は12/2-6。前後の土日ともう2日つなげて現地時間10日間の旅程にした。&#xA;去年、カナダのバンクーバーから西海岸のシアトル、ポートランド、サンフランシスコは巡ったので、今回はまだ訪れていないロサンゼルスからスタートすることにした。会期後はグランドキャニオンまで足を伸ばす。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのError enumとtry, if case</title>
      <link>https://www.sambaiz.net/article/249/</link>
      <pubDate>Sun, 24 Nov 2019 23:29:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/249/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html&#34;&gt;Error Handling — The Swift Programming Language (Swift 5.1)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;SwiftではErrorをenumで列挙でき、次の例でいうsomeParamのようにAssociated valuesを含めることもできる。&#xA;throwすると他の言語ではスタックトレースを作るので重い処理になるが、Swiftは作らないのでreturnするようにエラーを返せる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SwiftのXMLParser</title>
      <link>https://www.sambaiz.net/article/248/</link>
      <pubDate>Sun, 24 Nov 2019 23:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/248/</guid>
      <description>&lt;p&gt;Swiftの&lt;a href=&#34;https://developer.apple.com/documentation/foundation/xmlparser&#34;&gt;XMLParser&lt;/a&gt;はイベント駆動のparser。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;UIKit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ParserSample&lt;/span&gt;: NSObject {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;parser&lt;/span&gt;: XMLParser&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;init&lt;/span&gt;(data: Data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        parser = XMLParser(data: data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;init&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        parser.delegate = &lt;span style=&#34;color:#ff79c6&#34;&gt;self&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parse&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; parser.parse() &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;err&lt;/span&gt; = parser.parserError &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parse error but unknown reason&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parse error: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;err.localizedDescription&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;after parse()&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/documentation/foundation/xmlparserdelegate&#34;&gt;XMLParserDelegate&lt;/a&gt;でイベントを拾ってオブジェクトに詰めるなりする。全て実装する必要はなく、この例ではタグの開始と文字列、CDATA、エラー、パース終了時の関数を実装している。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;extension&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ParserSample&lt;/span&gt;: XMLParserDelegate {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser, didStartElement elementName: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;, namespaceURI: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;?, qualifiedName qName: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;?, attributes attributeDict: [&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt; : &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;] = [:]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parsing &amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;elementName&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; elementName == &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ERROR&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;self&lt;/span&gt;.parser.abortParsing() &lt;span style=&#34;color:#6272a4&#34;&gt;// test&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser, foundCharacters string: &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;found &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;string&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                foundCDATA CDATABlock: Data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;data&lt;/span&gt; = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(bytes: CDATABlock, encoding: .utf8)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foundCDATA &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;data!&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parser&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser, parseErrorOccurred parseError: Error) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parser error: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\(&lt;/span&gt;parseError.localizedDescription&lt;span style=&#34;color:#f1fa8c&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;parserDidEndDocument&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;_&lt;/span&gt; parser: XMLParser) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parse done&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最後まで正常にパースされる場合と、途中で中断される場合を実行する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ECS(EC2)のCloudFormation最小構成</title>
      <link>https://www.sambaiz.net/article/247/</link>
      <pubDate>Fri, 15 Nov 2019 20:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/247/</guid>
      <description>&lt;p&gt;EC2でECSのServiceを動かすCFnテンプレートを書く。以前Fargateで動かしたものを一部再利用する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/221/&#34;&gt;ECS FargateでSidecarのFluentdでログをS3に送る構成をCloudFormationで構築する - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda環境でできない処理をECSで実行する</title>
      <link>https://www.sambaiz.net/article/245/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/245/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;https://github.com/sambaiz/cdkbot&#34;&gt;cdkbot&lt;/a&gt;というツールを出した。これはGitHubのPRからCDKのデプロイなどを実行できるツールでlambda上で動いていた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/235/&#34;&gt;PR上でCDKのレビューやデプロイを行うツールcdkbotを作った - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;npmやgitといった外部コマンドを実行するため、layerにバイナリを詰めて上げていた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/233/&#34;&gt;Lambda上でnpm installできるLayerを作った - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>単調性のある式の解を二分法で数値的に求める</title>
      <link>https://www.sambaiz.net/article/246/</link>
      <pubDate>Mon, 28 Oct 2019 22:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/246/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc144&#34;&gt;AtCoder Beginner Contest 144&lt;/a&gt;の&#xA;&lt;a href=&#34;https://atcoder.jp/contests/abc144/tasks/abc144_d&#34;&gt;D - Water Bottle&lt;/a&gt;をやってみた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;高橋君は、底面が1辺 a cm の正方形であり、高さが b cm であるような直方体型の水筒を持っています。(水筒の厚みは無視できます。)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;この水筒の中に体積 x cm^3 の水を入れ、底面の正方形の1辺を軸として、この水筒を徐々に傾けます。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;水を溢れさせずに水筒を傾けることができる最大の角度を求めてください。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;水を溢れさせずに水筒を傾けることができる最大の角度を度数法で出力せよ。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;出力は、ジャッジの出力との絶対誤差または相対誤差が10^6以下のとき正解と判定される。&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;水が溢れるパターンは次の2通りあって、水が入っている、または入ってない部分の三角柱を除いた部分の体積がxになるようなθをatanで出せる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>goyaccでparserを生成しLispのcons,car,cdrの式を評価する</title>
      <link>https://www.sambaiz.net/article/244/</link>
      <pubDate>Tue, 15 Oct 2019 09:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/244/</guid>
      <description>&lt;p&gt;GoでLispのcons,car,cdrの式を評価したい。&#xA;流れとしては字句解析器(lexer, tokenizer, scanner)でソースコードを分割しtoken列にして、構文解析器(parser)で構文木を作るなりして評価できるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ISUCON9予選と本選に出た</title>
      <link>https://www.sambaiz.net/article/243/</link>
      <pubDate>Sat, 05 Oct 2019 23:41:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/243/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://isucon.net/&#34;&gt;ISUCON&lt;/a&gt;はLINEが運営しているIikanjini Speed Up CONtestで、Webサービスをチューニングしベンチマークのスコアを競う。&#xA;&lt;a href=&#34;https://github.com/hidelberq&#34;&gt;@hiderberq&lt;/a&gt;と&lt;a href=&#34;https://github.com/satoshun&#34;&gt;@satoshun&lt;/a&gt;と出た。初出場。&lt;/p&gt;&#xA;&lt;h2 id=&#34;前&#34;&gt;前&lt;/h2&gt;&#xA;&lt;p&gt;@hiderberqに誘ってもらいチームSsstohが結成された。言語はGoで行くと決めて3回くらい集まって過去問を少しやった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTTPのCache-Control Header</title>
      <link>https://www.sambaiz.net/article/242/</link>
      <pubDate>Fri, 04 Oct 2019 14:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/242/</guid>
      <description>&lt;p&gt;HTTPで&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&#34;&gt;Cache-Control&lt;/a&gt; Headerを付けてレスポンスすると、&#xA;クライアントにキャッシュさせてリクエストの回数やレスポンスの通信量を削減することができる。CDNによって挙動が異なるようなので注意が必要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8s上でElastic APMを動かして外部のGo製APIサーバーのリクエストをトレースする</title>
      <link>https://www.sambaiz.net/article/241/</link>
      <pubDate>Tue, 01 Oct 2019 23:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/241/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/cloud-on-k8s&#34;&gt;Elastic Cloud on Kubernetes (ECK)&lt;/a&gt;で&#xA;Kubernetesクラスタ上にElasticsearch, KibanaとAPM Serverを立ち上げ、外部のGo製APIサーバーのリクエストをトレースする。&#xA;クラスタはGKEで作成し、ノードプールはn2-highmem-4(2vCPU, 13GB)の3台にした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQLのslow queryを出してEXPLAINしてインデックスを張る</title>
      <link>https://www.sambaiz.net/article/240/</link>
      <pubDate>Sat, 21 Sep 2019 22:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/240/</guid>
      <description>&lt;p&gt;MySQLのslow queryを出してEXPLAINしてインデックスを張るのを&#xA;&lt;a href=&#34;https://github.com/isucon/isucon9-qualify.git&#34;&gt;ISUCON9の予選問題&lt;/a&gt;でやってみる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mysql --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysql  Ver 8.0.17 for osx10.14 on x86_64 (Homebrew)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;slow_query_log&lt;/code&gt;をONにすると実行時間が&lt;code&gt;long_query_time&lt;/code&gt;を超えていて&lt;code&gt;min_examined_row_limit&lt;/code&gt;以上の行を返すクエリがslow query logに出力される。&#xA;&lt;code&gt;log_queries_not_using_indexes&lt;/code&gt;が有効ならインデックスを使用してないクエリもログに出て、&#xA;&lt;code&gt;log_throttle_queries_not_using_indexes&lt;/code&gt;でその分あたりの数を制限できる。&#xA;MySQL 8.0.14から追加された&lt;code&gt;log_slow_extra&lt;/code&gt;をONにするとフィールドが&lt;a href=&#34;https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html#slow-query-log-contents&#34;&gt;追加される&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ansibleでnginxを入れてLoad Balancingさせる</title>
      <link>https://www.sambaiz.net/article/239/</link>
      <pubDate>Tue, 17 Sep 2019 09:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/239/</guid>
      <description>&lt;p&gt;EC2でUbuntu Server 18.04 LTS (ami-07d0cf3af28718ef8) の t3.medium (2vCPU, 4GiB) インスタンスを3台立ち上げた。この内1台をLB用とし、2台のAppサーバーに負荷分散させる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/ansible-nginx-lb-example&#34;&gt;https://github.com/sambaiz/ansible-nginx-lb-example&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;nginxconf&#34;&gt;nginx.conf&lt;/h2&gt;&#xA;&lt;p&gt;LBとAppのnginx.conf。upstreamはデフォルトでラウンドロビンする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのnet/http/pprofでCPUやMemoryをprofileする流れと内部実装</title>
      <link>https://www.sambaiz.net/article/238/</link>
      <pubDate>Mon, 16 Sep 2019 13:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/238/</guid>
      <description>&lt;p&gt;Goの&lt;a href=&#34;https://golang.org/pkg/net/http/pprof/&#34;&gt;net/http/pprof&lt;/a&gt;は&#xA;&lt;a href=&#34;https://github.com/google/pprof&#34;&gt;pprof&lt;/a&gt;で可視化できるprofile.protoを返すAPIを提供するpackage。&#xA;profileを出力する方法はほかにもあるが、サーバーのような動き続けるアプリケーションのprofileを取るのに使う。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/47/&#34;&gt;go testでベンチマークを取ってpprofで時間がかかっている箇所を調べる - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>User NamespaceでrootになってNetwork Namespaceを作りvethとNATで外と通信する</title>
      <link>https://www.sambaiz.net/article/237/</link>
      <pubDate>Fri, 06 Sep 2019 02:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/237/</guid>
      <description>&lt;p&gt;LinuxのNamespaceはuidやpid、networkなどを分離できる機能で、Dockerなどのコンテナ技術で使われている。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Amazon Linux 2 (ami-0ff21806645c5e492)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ uname -r&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4.14.138-114.102.amzn2.x86_64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;user-namespaceでrootになる&#34;&gt;User NamespaceでRootになる&lt;/h2&gt;&#xA;&lt;p&gt;rootでないと正常終了しないコードを書いた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SystemdのService</title>
      <link>https://www.sambaiz.net/article/236/</link>
      <pubDate>Fri, 30 Aug 2019 00:16:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/236/</guid>
      <description>&lt;p&gt;SystemdはLinuxで動くServiceの管理などを行うデーモン。initの後継でchkconfig/servicceの代わりにsystemctlコマンドを使う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PR上でCDKのレビューやデプロイを行うツールcdkbotを作った</title>
      <link>https://www.sambaiz.net/article/235/</link>
      <pubDate>Thu, 29 Aug 2019 22:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/235/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/cdkbot&#34;&gt;sambaiz/cdkbot&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;PRのコメントで&lt;code&gt;/diff&lt;/code&gt;や&lt;code&gt;/deploy&lt;/code&gt;と打つと&lt;code&gt;cdk diff&lt;/code&gt;や&lt;code&gt;cdk deploy&lt;/code&gt;が走る。&#xA;diffを見てレビューし、良ければ&lt;code&gt;/deploy&lt;/code&gt;でデプロイし完了するとmergeされる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDKでECS&#43;Fargate上にDigdagを立ててCognito認証を挟む</title>
      <link>https://www.sambaiz.net/article/234/</link>
      <pubDate>Wed, 31 Jul 2019 03:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/234/</guid>
      <description>&lt;p&gt;AWSでワークフローエンジン&lt;a href=&#34;https://www.digdag.io/&#34;&gt;Digdag&lt;/a&gt;を立てるにあたりスケールを見越してECS+Fargateで動かす。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/digdag-cdk-ecs-fargate&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/196/&#34;&gt;FargateでECSを使う - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;リソースはCDKで作る。最近GAになったので高レベルのクラスを積極的に使っている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/222/&#34;&gt;AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda上でnpm installできるLayerを作った</title>
      <link>https://www.sambaiz.net/article/233/</link>
      <pubDate>Tue, 23 Jul 2019 23:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/233/</guid>
      <description>&lt;p&gt;Lambda上でnpm installするためにnpmとnode, npmrc入りのLambda Layerを作った。&#xA;&lt;a href=&#34;https://github.com/sambaiz/npm-lambda-layer&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/232/&#34;&gt;Lambda Layerでバイナリやライブラリを切り出す - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda Layerでバイナリやライブラリを切り出す</title>
      <link>https://www.sambaiz.net/article/232/</link>
      <pubDate>Mon, 22 Jul 2019 21:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/232/</guid>
      <description>&lt;p&gt;Lambdaで実行したい外部コマンドがある場合、通常バイナリをパッケージに含めることになりデプロイに時間がかかってしまう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;os/exec&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/events&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-lambda-go/lambda&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handler&lt;/span&gt;(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cmd &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; exec.&lt;span style=&#34;color:#50fa7b&#34;&gt;Command&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;clone&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://github.com/sambaiz/foobar.git&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/tmp/repo&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;output, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; cmd.&lt;span style=&#34;color:#50fa7b&#34;&gt;CombinedOutput&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; events.APIGatewayProxyResponse{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;Body:       fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%s %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(output), err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;()),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;StatusCode: &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; events.APIGatewayProxyResponse{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Body:       &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(output),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;StatusCode: &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;lambda.&lt;span style=&#34;color:#50fa7b&#34;&gt;Start&lt;/span&gt;(handler)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;exec: &amp;#34;git&amp;#34;: executable file not found in $PATH&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-layers.html&#34;&gt;Lambda Layer&lt;/a&gt;を使うと&#xA;ライブラリやバイナリを切り出すことができ、複数Functionで共有することもできる。&#xA;ディレクトリをzipにしてLayerに指定すると中身が&lt;code&gt;/opt&lt;/code&gt;に展開され、&lt;code&gt;/opt/bin&lt;/code&gt;にはPATHが、&lt;code&gt;/opt/lib&lt;/code&gt;にはLD_LIBRARY_PATHが通るほか、&#xA;言語ごとのパッケージ置き場がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SAMとGoでPRのコメントに対して返事を返すGitHub Appを作る</title>
      <link>https://www.sambaiz.net/article/231/</link>
      <pubDate>Fri, 19 Jul 2019 21:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/231/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.github.com/apps/&#34;&gt;GitHub App&lt;/a&gt;はリポジトリにインストールできるアプリケーションで、&#xA;Access TokenやOAuth Appと&lt;a href=&#34;https://developer.github.com/apps/differences-between-apps/&#34;&gt;異なり&lt;/a&gt;&#xA;ユーザーとは独立した権限を与えて実行することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KaggleのHouse Prices CompetitionをXGBoostで解く</title>
      <link>https://www.sambaiz.net/article/230/</link>
      <pubDate>Tue, 09 Jul 2019 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/230/</guid>
      <description>&lt;p&gt;以前TitanicをやったXGBoostでHome Prices Competitionに挑戦する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/168/&#34;&gt;KaggleのTitanicのチュートリアルをXGBoostで解く - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; pd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df_train &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;house-prices/train.csv&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df_test&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;read_csv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;house-prices/test.csv&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;前処理&#34;&gt;前処理&lt;/h2&gt;&#xA;&lt;p&gt;目的変数であるSalePriceと相関のある変数を抽出する。XGBoostは欠損値をそのまま扱うことができるので特に何もしていない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ColabでKaggleのAPIを呼んで学習データのダウンロードと提出を行う</title>
      <link>https://www.sambaiz.net/article/229/</link>
      <pubDate>Tue, 09 Jul 2019 01:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/229/</guid>
      <description>&lt;p&gt;Colabではランタイムがリセットされるたびにファイルが消えてしまうのでその度に学習データをアップロードするのが面倒。&#xA;そこで&lt;a href=&#34;https://github.com/Kaggle/kaggle-api&#34;&gt;Kaggle API&lt;/a&gt;でファイルを持ってきてついでに提出まで行う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cognito UserPoolのPreSignUp時に呼ばれるLambdaで登録ユーザーを制限する</title>
      <link>https://www.sambaiz.net/article/228/</link>
      <pubDate>Sun, 07 Jul 2019 17:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/228/</guid>
      <description>&lt;p&gt;サードパーティのIdPからCognitoにSignUpできるようにする場合、特定のドメインのメールアドレスといったような制限をかけたいことがある。&#xA;PreSignUp時のLambdaでこれを弾いてやることでUserPoolに入らないようにすることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LambdaとALBでCognito認証をかけて失敗したらログイン画面に飛ばす</title>
      <link>https://www.sambaiz.net/article/227/</link>
      <pubDate>Wed, 03 Jul 2019 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/227/</guid>
      <description>&lt;p&gt;ALBのTargetとしてLambdaが&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/lambda-functions-as-targets-for-application-load-balancers/&#34;&gt;選択できるようになり&lt;/a&gt;、&#xA;若干の時間課金が発生する代わりに柔軟にルーティングできるAPI Gatewayのように使えるようになった。&#xA;ActionとしてCognito認証を入れて認証に失敗したらログイン画面を表示させる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>API GatewayでCognitoの認証をかけて必要ならログイン画面に飛ばす処理をGoで書く</title>
      <link>https://www.sambaiz.net/article/226/</link>
      <pubDate>Wed, 03 Jul 2019 20:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/226/</guid>
      <description>&lt;p&gt;ブラウザから直接API GatewayのエンドポイントにアクセスしたときにCognitoのTokenで認証し、失敗したらログイン画面を表示させる。&#xA;API GatewayでCognitoの認証をかける場合、AuthorizerでUserPoolを指定するのが最も簡単なパターンだが、&#xA;これだとHeaderにTokenを付けてアクセスする必要があり認証に失敗するとUnauthorizedが返る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ReactのFunction ComponentとHooks</title>
      <link>https://www.sambaiz.net/article/225/</link>
      <pubDate>Thu, 20 Jun 2019 19:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/225/</guid>
      <description>&lt;p&gt;久々に&lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;create-react-app&lt;/a&gt;を実行したら&#xA;コンポーネントがReact.ComponentのクラスではなくFunction Componentになっていた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;function-component&#34;&gt;Function Component&lt;/h2&gt;&#xA;&lt;p&gt;Function Componentは関数で書かれるStateを持たないコンポーネントで、&#xA;簡潔に書けるだけではなく&lt;code&gt;React.createElement()&lt;/code&gt;と比べて45%くらい速いらしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS DeepRacerを始める</title>
      <link>https://www.sambaiz.net/article/224/</link>
      <pubDate>Mon, 10 Jun 2019 23:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/224/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/deepracer/&#34;&gt;AWS DeepRacer&lt;/a&gt;は自走する1/18スケールのレーシングカーで、&#xA;SageMakerやRoboMaker&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/deepracer/latest/developerguide/deepracer-dependent-aws-services.html&#34;&gt;など&lt;/a&gt;を使って強化学習し、実機を走らせたりバーチャルのDeepRacerリーグで競うことができる。&#xA;カメラの画像の処理や、強化学習のアルゴリズムの実装の必要はなく、報酬関数だけで動いてくれるので敷居が低い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CDK/CircleCI/GitHubでAWSリソース管理リポジトリを作る</title>
      <link>https://www.sambaiz.net/article/223/</link>
      <pubDate>Mon, 20 May 2019 09:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/223/</guid>
      <description>&lt;p&gt;AWS CDKでリソースを記述し、PullRequestに対して自動で&lt;code&gt;cdk diff&lt;/code&gt;で変更があるものを表示して、mergeしたときに&lt;code&gt;cdk deploy&lt;/code&gt;する。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/aws-cdk-circleci-sample&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS CDKでCloudFormationのテンプレートをTypeScriptから生成しデプロイする</title>
      <link>https://www.sambaiz.net/article/222/</link>
      <pubDate>Sun, 19 May 2019 01:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/222/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/cdk/api/latest/&#34;&gt;AWS CDK&lt;/a&gt;(Cloud Development Kit)はTypeScriptやJavaなどのコードから&#xA;CloudFormationのテンプレートを生成して差分を確認しデプロイできる公式のツール。まだdeveloper preview。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ECS FargateでSidecarのFluentdでログをS3に送る構成をCloudFormationで構築する</title>
      <link>https://www.sambaiz.net/article/221/</link>
      <pubDate>Thu, 09 May 2019 23:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/221/</guid>
      <description>&lt;p&gt;DAEMONを動かすことは&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/ecs_services.html#service_scheduler&#34;&gt;できず&lt;/a&gt;、&#xA;fluentd logdriverも&lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_LogConfiguration.html&#34;&gt;サポートされていない&lt;/a&gt;Fargateで、&#xA;サイドカーとしてFluentdのコンテナを動かしてアプリケーションのログをS3に送る。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/ecs-fargate-fluentd-sidecar&#34;&gt;GitHub&lt;/a&gt;にある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>カテゴリカル変数を変換するsklearnのLabel/OneHotEncoderとpandasのget_dummies</title>
      <link>https://www.sambaiz.net/article/220/</link>
      <pubDate>Mon, 06 May 2019 15:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/220/</guid>
      <description>&lt;p&gt;次のデータを用いる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tokyo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;berlin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;paris&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;amsterdam&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;paris&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;amsterdam&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;berlin&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;partial_data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; data[:&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;preprocessinglabelencoderhttpsscikit-learnorgstablemodulesgeneratedsklearnpreprocessinglabelencoderhtml&#34;&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html&#34;&gt;preprocessing.LabelEncoder&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;カテゴリカル変数を数値のラベルに変換する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; sklearn &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; preprocessing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;le &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; preprocessing&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;LabelEncoder()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;le&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;fit(data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;encoded &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; le&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;transform(partial_data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(encoded) &lt;span style=&#34;color:#6272a4&#34;&gt;# [3 1 2 0]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(le&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;inverse_transform(encoded)) &lt;span style=&#34;color:#6272a4&#34;&gt;# [&amp;#39;tokyo&amp;#39; &amp;#39;berlin&amp;#39; &amp;#39;paris&amp;#39; &amp;#39;amsterdam&amp;#39;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;preprocessingonehotencoderhttpsscikit-learnorgstablemodulesgeneratedsklearnpreprocessingonehotencoderhtml&#34;&gt;&lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html&#34;&gt;preprocessing.OneHotEncoder&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;One-hot vectorに変換する。デフォルトだとカテゴリーと同じ数の次元に変換されるので変数同士に相関がある多重共線性が生まれてしまうが、&lt;code&gt;drop=&#39;first&#39;&lt;/code&gt;で最初の次元を消すことで回避できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DatadogのAWS integrationとAlertの設定をTerraformで行う</title>
      <link>https://www.sambaiz.net/article/219/</link>
      <pubDate>Sat, 04 May 2019 19:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/219/</guid>
      <description>&lt;p&gt;DatadogのAWS integrationとAlertの設定をTerraformで行い、バージョン管理やレビューできるようにする。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/datadog-terraform-sample&#34;&gt;GitHub&lt;/a&gt;に置いてある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Box-Cox transformationで非正規分布のデータを正規分布に近づける</title>
      <link>https://www.sambaiz.net/article/218/</link>
      <pubDate>Tue, 30 Apr 2019 17:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/218/</guid>
      <description>&lt;p&gt;Box-Cox Transormationは次の式による変換。λ=0のときはlog(x)。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/218-1.png&#34; alt=&#34;式&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;λが1より大きい場合は小さな値の間隔が圧縮され、小さい場合は大きな値の間隔が圧縮されるように変換される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CircleCI 2.1からのOrbでdocker buildしてECRにpushし、Slackに通知させる</title>
      <link>https://www.sambaiz.net/article/217/</link>
      <pubDate>Sat, 13 Apr 2019 23:13:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/217/</guid>
      <description>&lt;p&gt;CircleCI 2.1から&lt;a href=&#34;https://circleci.com/docs/2.0/orb-intro/&#34;&gt;Orb&lt;/a&gt;というjobをパッケージ化したものが使えるようになり、&#xA;自分でjobを書かずとも様々な処理を実行させることができるようになった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/183/&#34;&gt;CircleCI 2.0でDocker imageをbuildしてタグを付けてContainer Registryに上げる - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>KaggleのHouse Prices CompetitionのKernelからデータの探り方を学ぶ</title>
      <link>https://www.sambaiz.net/article/216/</link>
      <pubDate>Mon, 08 Apr 2019 21:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/216/</guid>
      <description>&lt;p&gt;Kaggleの家の売値を予測するCompetitionのKernelからデータの探り方を学ぶ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.kaggle.com/pmarcelino/comprehensive-data-exploration-with-python&#34;&gt;Comprehensive data exploration with Python&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;正規化&#34;&gt;正規化&lt;/h2&gt;&#xA;&lt;p&gt;予測する値であるSalePriceの分布を出すと、やや左に寄った非対称の分布をしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>React, Material-UI, Unstated, RechartsでTODOを作った</title>
      <link>https://www.sambaiz.net/article/215/</link>
      <pubDate>Thu, 28 Mar 2019 17:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/215/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/215.gif&#34; alt=&#34;動作&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/react-unstated-materialui-recharts&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;create-react-apphttpsgithubcomfacebookcreate-react-app&#34;&gt;&lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;create-react-app&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;create-react-appでアプリを作成した。&#xA;TypeScriptを&lt;a href=&#34;https://facebook.github.io/create-react-app/docs/adding-typescript&#34;&gt;有効にしている&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npx create-react-app react-todo-unstated --typescript&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd react-todo-unstated&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tree src/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;src/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── App.css&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── App.test.tsx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── App.tsx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── index.css&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── index.tsx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── logo.svg&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── react-app-env.d.ts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── serviceWorker.ts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;material-uihttpsmaterial-uicom&#34;&gt;&lt;a href=&#34;https://material-ui.com/&#34;&gt;Material-UI&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;UIはMaterial-UIでUIで作った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HI-VAE(Heterogeneous-Incomple VAE)の論文を読んで処理を追う</title>
      <link>https://www.sambaiz.net/article/214/</link>
      <pubDate>Fri, 22 Mar 2019 20:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/214/</guid>
      <description>&lt;p&gt;HI-VAE(Heterogeneous-Incomple VAE)は現実のデータセットにありがちな連続値と離散値が混ざっていたり欠損値を含んでいるものを扱えるようにしたVAE。&lt;/p&gt;&#xA;&lt;p&gt;論文: &lt;a href=&#34;https://arxiv.org/abs/1807.03653&#34;&gt;Alfredo Nazabal, Pablo M. Olmos, Zoubin Ghahramani, Isabel Valera (2018) Handling Incomplete Heterogeneous Data using VAEs&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>VAEでエンコードしたMNISTの潜在空間をt-SNEで可視化する</title>
      <link>https://www.sambaiz.net/article/213/</link>
      <pubDate>Sun, 10 Mar 2019 19:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/213/</guid>
      <description>&lt;p&gt;t-SNEは多次元のデータを2,3次元上にマッピングして可視化できるようにする手法の一つで、&#xA;Stochastic Neighbor Embedding(SNE, 確率的近傍埋め込み)という手法をベースに、t分布を用いるなどして改良したもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyTorchでVAEのモデルを実装してMNISTの画像を生成する</title>
      <link>https://www.sambaiz.net/article/212/</link>
      <pubDate>Thu, 07 Mar 2019 19:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/212/</guid>
      <description>&lt;p&gt;PyTorchでVAEを実装しMNISTの画像を生成する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/201/&#34;&gt;生成モデルVAE(Variational Autoencoder) - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;学習データ&#34;&gt;学習データ&lt;/h2&gt;&#xA;&lt;p&gt;datasetsのMNIST画像を使う。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; torchvision &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; datasets, transforms&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transform &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; transforms&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Compose([&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    transforms&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;ToTensor(), &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    transforms&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Lambda(&lt;span style=&#34;color:#ff79c6&#34;&gt;lambda&lt;/span&gt; x: x&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;view(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dataset_train &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; datasets&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MNIST(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;~/mnist&amp;#39;&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    train&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    download&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    transform&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;transform)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dataset_valid &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; datasets&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;MNIST(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;~/mnist&amp;#39;&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    train&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;False&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    download&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    transform&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;transform)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dataloader_train &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DataLoader(dataset_train,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          batch_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          shuffle&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          num_workers&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dataloader_valid &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DataLoader(dataset_valid,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          batch_size&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          shuffle&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                          num_workers&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vae&#34;&gt;VAE&lt;/h2&gt;&#xA;&lt;p&gt;それぞれ3層のEncoderとDecoder。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SageMaker NotebookでGitリポジトリにSSHでpush/pullできるようにする</title>
      <link>https://www.sambaiz.net/article/211/</link>
      <pubDate>Mon, 04 Mar 2019 22:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/211/</guid>
      <description>&lt;p&gt;Sagemaker NotebookはAWSの機械学習のワークフローを提供する&lt;a href=&#34;https://aws.amazon.com/jp/sagemaker/&#34;&gt;SageMaker&lt;/a&gt;の一部である&#xA;マネージドなJupyter Notebooksで、可視化などはもちろん、ここから複数インタンスでの学習ジョブを実行したりすることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>生成モデルGAN(Generative Adversarial Network)</title>
      <link>https://www.sambaiz.net/article/210/</link>
      <pubDate>Fri, 22 Feb 2019 23:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/210/</guid>
      <description>&lt;p&gt;GAN(Generative Adversarial Network)は生成器Gと、データが本物かどうか識別する識別器Dを交互に最適化していく生成モデル。&#xA;データの評価は識別器によって行われるので、VAEと異なり分布を仮定して尤度を用いる必要がなく、より良いデータが生成できるが、&#xA;GとDを交互に最適化した結果振動してしまいナッシュ均衡に収束せず、またどちらかが先に最適化されてしまうと&#xA;同じようなデータばかり生成してしまうmode collapseや勾配が消えてしまったりして&#xA;うまく学習できないことがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chrome ExtensionsとChrome Apps</title>
      <link>https://www.sambaiz.net/article/209/</link>
      <pubDate>Tue, 19 Feb 2019 23:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/209/</guid>
      <description>&lt;h2 id=&#34;chrome-extrnsions&#34;&gt;Chrome Extrnsions&lt;/h2&gt;&#xA;&lt;p&gt;ツールバーに表示され、ChromeのAPIを呼んで色々できる拡張機能で、manifestとhtml, js, cssなどから構成される。&#xA;開発中はディレクトリごとchrome://extensions/から読み込むとインストールでき、ツールバーにアイコンが表示される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache SparkのRDD, DataFrame, DataSetとAction, Transformation</title>
      <link>https://www.sambaiz.net/article/208/</link>
      <pubDate>Wed, 13 Feb 2019 21:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/208/</guid>
      <description>&lt;h2 id=&#34;sparkとは&#34;&gt;Sparkとは&lt;/h2&gt;&#xA;&lt;p&gt;ハイパフォーマンスな汎用分散処理システム。&#xA;HDFSやS3といった分散ストレージとHadoop YARNといったクラスタマネージャと共に使われる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SAMでLambdaの関数をデプロイしServerless Application Repositoryに公開する</title>
      <link>https://www.sambaiz.net/article/207/</link>
      <pubDate>Sun, 10 Feb 2019 16:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/207/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/what-is-sam.html&#34;&gt;AWS SAM (Serverless Application Model)&lt;/a&gt;はAWS公式の&#xA;サーバーレスアプリケーションのビルドツール。&#xA;CloudFormationのテンプレートを設定ファイルに書くことでLambda関数と共にイベントトリガーや他のリソースも含めてデプロイでき、&#xA;その点で&lt;a href=&#34;https://serverless.com/&#34;&gt;Serverless Framework&lt;/a&gt;と立ち位置が近いが、向こうがLambda以外のサーバーレス環境にも対応していたり、&#xA;プラグインによって機能拡張できるようになっている一方、こちらは比較的薄いツールになっている。&#xA;ただ、&lt;a href=&#34;https://aws.amazon.com/jp/serverless/serverlessrepo/&#34;&gt;Serverless Application Repository&lt;/a&gt;で公開するにはSAMの形式にする必要があり、&#xA;Serverless FrameworkにもSAMのテンプレートを出力する&lt;a href=&#34;https://github.com/SAPessi/serverless-sam&#34;&gt;プラグイン&lt;/a&gt;がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudFormationでVPCを作成してLambdaをデプロイしAurora Serverlessを使う</title>
      <link>https://www.sambaiz.net/article/206/</link>
      <pubDate>Sun, 03 Feb 2019 17:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/206/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/rds/aurora/serverless/&#34;&gt;Aurora Serverless&lt;/a&gt;はオートスケールするAuroraで、&#xA;使ったAurora Capacity Unit (ACU)によって&lt;a href=&#34;https://aws.amazon.com/jp/rds/aurora/pricing/&#34;&gt;料金&lt;/a&gt;が発生するため、&#xA;使用頻度が少なかったり変動するアプリケーションにおいて安くRDBを使うことができる。&#xA;インスタンスを立てると最低でも月3000円くらいかかるが、Serverlessだとほとんどストレージ分から運用することができて趣味でも使いやすい。&#xA;ただしLambdaと同様に常に同等のリソースを使っている状態だとインスタンスと比べて割高になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyTorchでMNISTする</title>
      <link>https://www.sambaiz.net/article/205/</link>
      <pubDate>Sat, 19 Jan 2019 23:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/205/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pytorch.org/&#34;&gt;PyTorch&lt;/a&gt;はFacebookによるOSSの機械学習フレームワーク。&#xA;TensorFlow(v1)よりも簡単に使うことができる。&#xA;TensorFlow 2.0ではPyTorchのようにDefine-by-runなeager executionがデフォルトになるのに加え、パッケージも整理されるようなのでいくらか近くなると思われる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Systems Manager (SSM)のParameter Storeに認証情報を置き参照する</title>
      <link>https://www.sambaiz.net/article/204/</link>
      <pubDate>Mon, 07 Jan 2019 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/204/</guid>
      <description>&lt;p&gt;DBのパスワードやAPIトークンといった認証情報をバージョン管理するコードや設定ファイル上に書くとOSS化など公開範囲を広げるときにやや困るし漏れるリスクが高まるのでなるべく避けたい。&#xA;そこでSSMのParameter Storeに値を置き、実行時やデプロイ時に参照する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS GlueでCSVを加工しParquetに変換してパーティションを切りAthenaで参照する</title>
      <link>https://www.sambaiz.net/article/203/</link>
      <pubDate>Tue, 01 Jan 2019 17:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/203/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/glue/&#34;&gt;AWS Glue&lt;/a&gt;はマネージドなETL(Extract/Transform/Load)サービスで、&lt;a href=&#34;https://spark.apache.org/&#34;&gt;Spark&lt;/a&gt;を使ってS3などにあるデータを読み込み加工して変換出力したり、AthenaやRedshift Spectrumで参照できるデータカタログを提供する。&#xA;今回はS3のCSVを読み込んで加工し、列指向フォーマットParquetに変換しパーティションを切って出力、その後クローラを回してデータカタログにテーブルを作成してAthenaで参照できることを確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>強化学習とDQN(Deep Q-network)</title>
      <link>https://www.sambaiz.net/article/202/</link>
      <pubDate>Tue, 18 Dec 2018 01:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/202/</guid>
      <description>&lt;p&gt;強化学習というのは将来に得られる報酬を最大化するような行動を学習していくもの。&lt;/p&gt;&#xA;&lt;h2 id=&#34;状態価値関数による学習&#34;&gt;状態価値関数による学習&lt;/h2&gt;&#xA;&lt;p&gt;状態sのときに取る行動aを決定する方策(Policy)をπ(s)、次の状態s&amp;rsquo;を予測するモデルをP(s,a,s&amp;rsquo;)、直後に得られる即時報酬r_{t+1}を予測するモデルをR(s,a)とすると、将来得られる報酬の期待値である状態価値関数Vπは次の式で再帰的に表すことができ、この形式をベルマン方程式という。&#xA;同じ報酬なら早くに得られた方が良いという考えから将来の報酬rは1ステップ遅れるたびに割引率γが掛けられる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>生成モデルVAE(Variational Autoencoder)</title>
      <link>https://www.sambaiz.net/article/201/</link>
      <pubDate>Tue, 11 Dec 2018 00:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/201/</guid>
      <description>&lt;p&gt;生成モデルというのはデータの分布をモデリングしてそこから新しいデータを生成するもの。&#xA;VAEは入力xに対して何らかの分布を仮定し、例えばガウス分布(正規分布)だとすると平均μと分散σを推論し、&#xA;これを&lt;code&gt;z=μ+(σ・ε) (ε~N(0,1))&lt;/code&gt;の潜在変数に変換して生成モデルへの入力とし、その出力の尤度が最大化するように学習させる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encoder-Decoder RNNのAttention</title>
      <link>https://www.sambaiz.net/article/200/</link>
      <pubDate>Sat, 01 Dec 2018 23:09:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/200/</guid>
      <description>&lt;p&gt;Encoder-Decoder RNNは入力用のEncoderと出力用のDecoderの2つのLSTMを組み合わせたもので、EncoderのStateはDecoderに繋げる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlowのモデルをTPUに対応させてColabで学習し実行時間を計測する</title>
      <link>https://www.sambaiz.net/article/199/</link>
      <pubDate>Tue, 27 Nov 2018 09:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/199/</guid>
      <description>&lt;p&gt;TPU(Tensor Processing Unit)は&#xA;Google開発のニューラルネットワークの学習に特化したASIC(Application Specific Integrated Circuit)。&#xA;&lt;a href=&#34;https://cloudplatform-jp.googleblog.com/2017/05/an-in-depth-look-at-googles-first-tensor-processing-unit-tpu.html&#34;&gt;一般的なGPUと比べて15~30倍もの性能が出る&lt;/a&gt;&#xA;らしく検索や翻訳などGoogleのサービスでも使われている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep LearningのBatch Normalizationの効果をTensorFlowで確認する</title>
      <link>https://www.sambaiz.net/article/198/</link>
      <pubDate>Wed, 14 Nov 2018 02:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/198/</guid>
      <description>&lt;h2 id=&#34;batch-normalizationとは&#34;&gt;Batch Normalizationとは&lt;/h2&gt;&#xA;&lt;p&gt;Deep Learningでは各層の学習を同時に行うため、前の層の変更によって各層の入力の分布が変わってしまうinternal covariate shiftという現象が起こり、そのためにパラメータの初期化をうまくやる必要があったり、学習率を大きくできず多くのステップを要する。&#xA;以下の論文で発表されたBatch Normalization(BN)は各層の入力を正規化して分布を固定することでこれを解決するというもの。&#xA;画像認識のコンテスト&lt;a href=&#34;http://image-net.org/challenges/LSVRC/2015/results&#34;&gt;ILSVRC 2015&lt;/a&gt;で1位を取った&lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;ResNet(Residual Network)&lt;/a&gt;でも使われている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlow&#43;numpyでData Augmentationして画像の学習データを増やす</title>
      <link>https://www.sambaiz.net/article/197/</link>
      <pubDate>Sun, 11 Nov 2018 15:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/197/</guid>
      <description>&lt;p&gt;Data Augmentationは学習データを加工したものを学習データに加えることで数を増やすというもの。&#xA;加工したデータには通常元のものと同じラベルが付くことになるが、&#xA;例えば画像を反転や回転させても元々のものと同じだと認識されるべきだとしたら妥当だ。&#xA;つまり、なんでもすれば良いわけではなくデータセットに応じた、元のデータと同じラベルが付くような加工をする必要があり、&#xA;裏を返せばそのような違いがあっても同じものであることをモデルに学習させることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FargateでECSを使う</title>
      <link>https://www.sambaiz.net/article/196/</link>
      <pubDate>Fri, 09 Nov 2018 00:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/196/</guid>
      <description>&lt;p&gt;ECSはAWSのコンテナオーケストレーションサービス。&#xA;クラスタは&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/launch_types.html#launch-type-ec2&#34;&gt;EC2上に立てる&lt;/a&gt;こともできるが、その場合Auto Scalingグループの設定や&lt;a href=&#34;https://aws.amazon.com/jp/blogs/news/how-to-automate-container-instance-draining-in-amazon-ecs/&#34;&gt;スケールイン時のdrain&lt;/a&gt;などを考慮する必要がある。&#xA;&lt;a href=&#34;https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/launch_types.html#launch-type-fargate&#34;&gt;Fargate&lt;/a&gt;で起動するとサーバーレスで実行でき、バックエンドの管理が必要がなくなる。&#xA;&lt;a href=&#34;https://aws.amazon.com/jp/fargate/pricing/&#34;&gt;料金&lt;/a&gt;は割り当てたvCPUとメモリによって、最低1分の1秒単位で課金される。&#xA;Lambdaと同じくリソースあたりでいうとオンデマンドのEC2と比較して高くなっているが、柔軟にリソースが指定できる分いくらか差は縮まるかもしれない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlowのtf.data API</title>
      <link>https://www.sambaiz.net/article/195/</link>
      <pubDate>Sat, 03 Nov 2018 18:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/195/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/guide/datasets&#34;&gt;Importing Data  |  TensorFlow&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;データを読み込み変換してイテレートする入力パイプラインを作るAPI。&#xA;通常、学習にGPU/TPUを使う場合CPU処理の間はアイドル状態となりボトルネックになるが、&#xA;パイプライン処理を行うことでCPUとGPU/TPUがなるべくアイドル状態にならないようになり、&#xA;&lt;a href=&#34;https://www.tensorflow.org/guide/performance/datasets&#34;&gt;学習時間が短縮される&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>同じ/異なるオリジンのiframeの中からできること</title>
      <link>https://www.sambaiz.net/article/194/</link>
      <pubDate>Wed, 24 Oct 2018 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/194/</guid>
      <description>&lt;p&gt;同じ/異なるオリジンのiframeの中からできることを確認する。同じ&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy&#34;&gt;オリジン&lt;/a&gt;というのは&#xA;ホストだけではなくプロトコルやポート番号も同じということ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;検証用ページ&#34;&gt;検証用ページ&lt;/h2&gt;&#xA;&lt;p&gt;3つのiframeがあるページを作った。&#xA;それぞれabout:blankで動的に書き込むのと、同じオリジンのhtmlを参照しているものと、異なるオリジンのhtmlを参照しているもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goで高速にJSONを扱うライブラリeasyjsonとfastjson</title>
      <link>https://www.sambaiz.net/article/193/</link>
      <pubDate>Wed, 24 Oct 2018 01:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/193/</guid>
      <description>&lt;h2 id=&#34;easyjsonhttpsgithubcommailrueasyjson&#34;&gt;&lt;a href=&#34;https://github.com/mailru/easyjson&#34;&gt;easyjson&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;easyjsonは次のようなstructごとのコードを自動生成してReflectionなしで高速にJSON Marshal/Unmarshalできるようにするライブラリ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MLPと誤差逆伝搬法(Backpropagation)</title>
      <link>https://www.sambaiz.net/article/192/</link>
      <pubDate>Sun, 21 Oct 2018 19:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/192/</guid>
      <description>&lt;p&gt;MLP(多層パーセプトロン)は入力層と出力層の間に隠れ層を重ねることによって、&#xA;ロジスティック回帰(単純パーセプトロン)ではできなかった非線形分離をできるようにしたニューラルネットワークモデル。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ロジスティック回帰の尤度と交差エントロピーと勾配降下法</title>
      <link>https://www.sambaiz.net/article/191/</link>
      <pubDate>Sun, 14 Oct 2018 23:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/191/</guid>
      <description>&lt;h2 id=&#34;ロジスティック回帰&#34;&gt;ロジスティック回帰&lt;/h2&gt;&#xA;&lt;p&gt;単純パーセプトロンの活性化関数を、0か1の値を取るステップ関数ではなく値域\((0,1)\)のシグモイド関数\(\sigma\)にすることで&#xA;確率を返せるようにしたモデル。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetesでliveness/readinessProbeのexec commandが実行される流れ</title>
      <link>https://www.sambaiz.net/article/190/</link>
      <pubDate>Sat, 06 Oct 2018 16:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/190/</guid>
      <description>&lt;p&gt;Kubernetesの&lt;a href=&#34;https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/&#34;&gt;liveness/readinessProbe&lt;/a&gt;&#xA;はPodが生きているか/リクエストを受けられるかの判定で、&#xA;後者はアプリケーションの起動に時間がかかる場合などに使われる。&#xA;ヘルスチェックのようなエンドポイントを叩くのはhttpGetでできるが、任意のcommandを実行することもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQLのtime_zoneとgo-sql-driver/mysqlのlocの関係</title>
      <link>https://www.sambaiz.net/article/189/</link>
      <pubDate>Tue, 02 Oct 2018 22:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/189/</guid>
      <description>&lt;p&gt;go-sql-driver/mysql で MySQL に接続するときに適切なパラメータを渡さないと日時が意図しない値になる問題について確認する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat docker&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;compose.yml &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  db:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image: mysql:&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    container_name: testdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    platform: linux&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;arm64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;restart&lt;/span&gt;: always&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    environment:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      MYSQL_ROOT_PASSWORD: test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      MYSQL_DATABASE: testdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      TZ: Asia&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;Tokyo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ports:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;compose up &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;d&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker &lt;span style=&#34;color:#ff79c6&#34;&gt;exec&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;it testdb mysql &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;h127.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;P3306 &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;uroot &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;ptest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysql&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-----------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;version&lt;/span&gt;() &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-----------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;39&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-----------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;row&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;00&lt;/span&gt; sec)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;前提&#34;&gt;前提&lt;/h2&gt;&#xA;&lt;p&gt;もしタイムゾーンがDBにロードされていない場合はロードする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PythonのType Hintsとmypy</title>
      <link>https://www.sambaiz.net/article/188/</link>
      <pubDate>Sun, 30 Sep 2018 14:13:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/188/</guid>
      <description>&lt;p&gt;動的型付け言語であるPythonで型アノテーションを書けるようにするための構文。&#xA;&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34;&gt;PEP 484&lt;/a&gt;で提案され、Python 3.5で実装された。&#xA;実行には影響せず、&lt;a href=&#34;https://github.com/python/mypy&#34;&gt;mypy&lt;/a&gt;のようなツールで静的解析したりするために使われる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>numpyの関数</title>
      <link>https://www.sambaiz.net/article/187/</link>
      <pubDate>Sun, 23 Sep 2018 23:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/187/</guid>
      <description>&lt;h2 id=&#34;ndarrayの生成&#34;&gt;ndarrayの生成&lt;/h2&gt;&#xA;&lt;p&gt;ndarrayはnumpyの多次元の配列を表すオブジェクトで、[start:stop:step, &amp;hellip;]の&#xA;&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html&#34;&gt;index&lt;/a&gt;でアクセスできる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;array([[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;], [&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;]])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(x[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#6272a4&#34;&gt;# 2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(x[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#6272a4&#34;&gt;# [2 3]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(x[:,&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#6272a4&#34;&gt;# [3 6]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(x[:,::&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#6272a4&#34;&gt;# [[1 3] [2 6]]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(x[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,::&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#6272a4&#34;&gt;# [8 6 4 2]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html&#34;&gt;array()&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.fromiter.html&#34;&gt;fromiter()&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;arrayやiteratableオブジェクトからndarrayを生成する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>cert-managerで生成した証明書をIstioのGatewayに設定してHTTPS対応する</title>
      <link>https://www.sambaiz.net/article/186/</link>
      <pubDate>Thu, 13 Sep 2018 21:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/186/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jetstack/cert-manager&#34;&gt;cert-manager&lt;/a&gt;はTLSの証明書を自動で生成し管理するK8sのアドオン。&#xA;Istioにも含まれていて、これを使って&lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;で証明書を生成しGatewayに設定することでHTTPS対応することができる。&lt;/p&gt;&#xA;&lt;p&gt;デフォルトではcert-managerは入らないのでenabled=trueにしてインストールする。&#xA;最初に入るLet&amp;rsquo;s EncryptのClusterIssuerはエラーになったので消す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IstioをHelmでインストールしてRoutingとTelemetryを行いJaeger/Kialiで確認する</title>
      <link>https://www.sambaiz.net/article/185/</link>
      <pubDate>Sun, 02 Sep 2018 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/185/</guid>
      <description>&lt;p&gt;Istioは&lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt;というProxyをSidecarとしてPodに入れてトラフィックを通すことでマイクロサービスのRoutingやTelemetryをサービスのコードに手を入れずに行うことができるサービスメッシュ。&#xA;もともとEnvoy自体は単体で、コネクションを張りっぱなしのgRPC(HTTP/2)をK8sのServiceのL4ロードバランサーでは分散できない問題の解決方法の一つとして&#xA;各PodのIPの一覧を返す&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/#headless-services&#34;&gt;Headless Service&lt;/a&gt;と使われていたが、各Manifestに入れたりConfigMapを編集したりする必要があり少し面倒だった。&#xA;Istioにするとそれらが省けて、さらに賢いRoutingやモニタリングの仕組みまで付いてくるのでとても便利だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nohupし忘れた時間のかかる処理をdisownしてexit後も実行させ続ける</title>
      <link>https://www.sambaiz.net/article/184/</link>
      <pubDate>Thu, 23 Aug 2018 00:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/184/</guid>
      <description>&lt;p&gt;時間がかかるコマンドを実行する場合、通常は&lt;code&gt;nohup&lt;/code&gt;で実行し&#xA;ターミナル終了時に飛ぶ&lt;a href=&#34;https://en.wikipedia.org/wiki/SIGHUP&#34;&gt;SIGHUP(SIGnal Hang UP)&lt;/a&gt;を無視させることで&#xA;exitしても実行させ続けることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CircleCI 2.0でDocker imageをbuildしてタグを付けてContainer Registryに上げる</title>
      <link>https://www.sambaiz.net/article/183/</link>
      <pubDate>Wed, 22 Aug 2018 23:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/183/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;(追記: 2019-04-13) 2.1からのOrbを使うと自分でjobを書かなくてもよくなる &lt;a href=&#34;https://www.sambaiz.net/article/217/&#34;&gt;CircleCI 2.1からのOrbでdocker buildしてECRにpushし、Slackに通知させる - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesのCustom Resource Definition(CRD)とCustom Controller</title>
      <link>https://www.sambaiz.net/article/182/</link>
      <pubDate>Thu, 09 Aug 2018 23:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/182/</guid>
      <description>&lt;p&gt;K8sではDeploymentを作成したときにReplicaSetも&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/v1.11.2/pkg/controller/deployment/sync.go#L220&#34;&gt;作成&lt;/a&gt;されるようにしたり、&#xA;Load Balancer Serviceを作成したときにGCPなどその環境に応じたLoad Balancerも&lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/v1.11.2/pkg/controller/service/service_controller.go#L305&#34;&gt;作成&lt;/a&gt;されるようにしたりするため、Controllerがそれらを監視してAPIを呼んでいる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesのNetworkPolicy Resource</title>
      <link>https://www.sambaiz.net/article/181/</link>
      <pubDate>Mon, 30 Jul 2018 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/181/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/network-policies/&#34;&gt;Network Policies - Kubernetes&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;PodのトラフィックをラベルやIPアドレスで許可するためのResource。AWSのセキュリティグループやGCPのファイアウォールルールのようなもの。&#xA;GKEでは今のところデフォルトでオフになっているので&lt;code&gt;--enable-network-policy&lt;/code&gt;を付けてクラスタを作成する必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GCPのCloud Pub/Sub</title>
      <link>https://www.sambaiz.net/article/180/</link>
      <pubDate>Thu, 26 Jul 2018 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/180/</guid>
      <description>&lt;p&gt;スケーラビリティに優れるメッセージングミドルウェア。&#xA;データはPullするだけではなくhttpsのエンドポイントにPushすることもでき、Cloud Dataflowを通してBigQueryやCloud MLに繋げることもできる。GAEのTaskQueueのように遅延させる機能は今のところない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Destributed TensorFlowの流れとSavedModelの出力</title>
      <link>https://www.sambaiz.net/article/179/</link>
      <pubDate>Wed, 25 Jul 2018 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/179/</guid>
      <description>&lt;h2 id=&#34;distributed-tensorflowhttpswwwtensorfloworgdeploydistributed&#34;&gt;&lt;a href=&#34;https://www.tensorflow.org/deploy/distributed&#34;&gt;Distributed TensorFlow&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;クラスタを組んでGraphを分散実行する。&lt;/p&gt;&#xA;&lt;p&gt;クラスタは&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;master: sessionを作成し、workerを制御する&lt;/li&gt;&#xA;&lt;li&gt;worker: 計算を行う&lt;/li&gt;&#xA;&lt;li&gt;ps(parameter server): 変数の値を持ち、更新する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;のjobからなり、gRPCの&lt;/p&gt;</description>
    </item>
    <item>
      <title>GAEのTaskQueue</title>
      <link>https://www.sambaiz.net/article/178/</link>
      <pubDate>Sun, 15 Jul 2018 16:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/178/</guid>
      <description>&lt;p&gt;GCPのマネージドなQueueサービスとしてGAEのTaskQueueがあることを教えてもらったので動かしてみる。&#xA;PushQueueとPullQueueがあって、それぞれおおよそAWSのSNSとSQSに相当する。PushQueueの場合はHTTPのリクエストとしてGAEのサービスに投げられる。PullQueueは&lt;a href=&#34;https://cloud.google.com/appengine/docs/standard/python/taskqueue/rest/&#34;&gt;Cloud Tasks API&lt;/a&gt;を使えばGAE外からも使えるらしいがまだalpha。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebSocketでの通信内容をWiresharkで見る</title>
      <link>https://www.sambaiz.net/article/177/</link>
      <pubDate>Tue, 10 Jul 2018 23:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/177/</guid>
      <description>&lt;p&gt;Webで双方向通信するためのプロトコル、WebSocketでの通信内容をWiresharkで見る。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリケーション&#34;&gt;アプリケーション&lt;/h2&gt;&#xA;&lt;h3 id=&#34;サーバー&#34;&gt;サーバー&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;golang.org/x/net/websocket&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Payload &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;A &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Handler&lt;/span&gt;(ws &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;websocket.Conn) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ctx, cancel &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#50fa7b&#34;&gt;WithCancel&lt;/span&gt;(context.&lt;span style=&#34;color:#50fa7b&#34;&gt;Background&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; payload Payload&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; websocket.JSON.&lt;span style=&#34;color:#50fa7b&#34;&gt;Receive&lt;/span&gt;(ws, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;payload)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; io.EOF {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;connection closed&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;cancel&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(payload.A)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;websocket.JSON.&lt;span style=&#34;color:#50fa7b&#34;&gt;Send&lt;/span&gt;(ws, Payload{A: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;ctx.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;http.&lt;span style=&#34;color:#50fa7b&#34;&gt;Handle&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, websocket.&lt;span style=&#34;color:#50fa7b&#34;&gt;Handler&lt;/span&gt;(Handler))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;http.&lt;span style=&#34;color:#50fa7b&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;:12345&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;クライアント&#34;&gt;クライアント&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; websocket &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; WebSocket(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ws://localhost:12345&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(websocket)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;websocket.onopen &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (e) =&amp;gt; { &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setInterval(() =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;send&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        websocket.send(JSON.stringify({A&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;あ&amp;#34;&lt;/span&gt;.repeat(&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;)}));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#bd93f9&#34;&gt;10000&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;websocket.onmessage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (e) =&amp;gt; { &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`received &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;e.data&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;wiresharkhttpswwwwiresharkorgのインストール&#34;&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;のインストール&lt;/h2&gt;&#xA;&lt;p&gt;GUIが立ち上がるので&lt;code&gt;tcp.port == 12345&lt;/code&gt;のフィルタで待ち構える。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DOMの(next/previous)SiblingとElementSiblingの値</title>
      <link>https://www.sambaiz.net/article/176/</link>
      <pubDate>Wed, 04 Jul 2018 23:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/176/</guid>
      <description>&lt;p&gt;Siblingは兄弟姉妹という意味&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;li2&amp;#34;&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;3&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; el &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;li#li2&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;sibling&#34;&gt;Sibling&lt;/h2&gt;&#xA;&lt;p&gt;elのpreviousSiblingを取ると&lt;code&gt;&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&lt;/code&gt;になると思いきや、その直前の空白や改行を含むtext nodeが返る。&#xA;それらが全くない場合隣のElementが返ることになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlowのMonitoredSessionとSessionRunHookとsummaryのエラー</title>
      <link>https://www.sambaiz.net/article/175/</link>
      <pubDate>Sun, 01 Jul 2018 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/175/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/train/MonitoredSession&#34;&gt;MonitoredSession&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;deprecatedになった&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/train/Supervisor&#34;&gt;Supervisor&lt;/a&gt;の後継。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/train/MonitoredTrainingSession&#34;&gt;MonitoredTrainingSession&lt;/a&gt;で学習用のMonitoredSessionを生成する。&#xA;このコンストラクタの引数でcheckpoint_dirを渡すと内部で&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/train/CheckpointSaverHook&#34;&gt;CheckpointSaverHook&lt;/a&gt;が&#xA;&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/python/training/monitored_session.py#L396&#34;&gt;追加される&lt;/a&gt;ようになっていて、restoreしたり指定したタイミングでsaveしたりしてくれる。&lt;/p&gt;&#xA;&lt;p&gt;なので今回明示的に渡すhooksは&#xA;指定したstepに到達したら&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/r1.8/tensorflow/python/training/basic_session_run_hooks.py#L320&#34;&gt;止めてくれる&lt;/a&gt;、&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/train/StopAtStepHook&#34;&gt;StopAtStepHook&lt;/a&gt;のみ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoのgRPC ServerのInterceptor(recovery/auth/zap/prometheus)</title>
      <link>https://www.sambaiz.net/article/174/</link>
      <pubDate>Tue, 26 Jun 2018 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/174/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go&#34;&gt;grpc-go&lt;/a&gt;はInterceptor(Middleware)でhandlerの前後で処理を行うことができる。&#xA;UnaryとStreamで&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/interceptor.go#L60&#34;&gt;シグネチャ&lt;/a&gt;が異なる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; UnaryServerInterceptor &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;UnaryServerInfo, handler UnaryHandler) (resp &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, err &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; StreamServerInterceptor &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(srv &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, ss ServerStream, info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;StreamServerInfo, handler StreamHandler) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;UnaryServerInterceptor&lt;/span&gt;(opts &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;Option) grpc.UnaryServerInterceptor {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(ctx context.Context, req &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, info &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;grpc.UnaryServerInfo, handler grpc.UnaryHandler) (resp &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}, err &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        resp, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handler&lt;/span&gt;(newCtx, req)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(resp)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; resp, err&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今回は良く使う&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware&#34;&gt;go-grpc-middleware&lt;/a&gt;の&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware/tree/master/recovery&#34;&gt;recovery&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware/tree/master/auth&#34;&gt;auth&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware/tree/master/logging/zap&#34;&gt;zap&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-prometheus&#34;&gt;prometehus&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Interceptorの挙動を確認する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GKEでのService(ClusterIP/NodePort/LoadBalancer)とIngress</title>
      <link>https://www.sambaiz.net/article/173/</link>
      <pubDate>Sat, 23 Jun 2018 15:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/173/</guid>
      <description>&lt;h2 id=&#34;疎通確認用アプリケーション&#34;&gt;疎通確認用アプリケーション&lt;/h2&gt;&#xA;&lt;p&gt;GETでは200を返し、POSTではURLにGETリクエストを送ってステータスコードを返す。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; PostBody &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;URL &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`json:&amp;#34;url&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;handler&lt;/span&gt;(w http.ResponseWriter, r &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;http.Request) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; r.Method &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; http.MethodGet {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fprintln&lt;/span&gt;(w, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; r.Method &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; http.MethodPost {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;data, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; ioutil.&lt;span style=&#34;color:#50fa7b&#34;&gt;ReadAll&lt;/span&gt;(r.Body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;w.&lt;span style=&#34;color:#50fa7b&#34;&gt;WriteHeader&lt;/span&gt;(http.StatusInternalServerError)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fprintln&lt;/span&gt;(w, err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;p &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; PostBody{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; json.&lt;span style=&#34;color:#50fa7b&#34;&gt;Unmarshal&lt;/span&gt;(data, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;p); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;w.&lt;span style=&#34;color:#50fa7b&#34;&gt;WriteHeader&lt;/span&gt;(http.StatusBadRequest)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fprintln&lt;/span&gt;(w, err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;resp, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; http.DefaultClient.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(p.URL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fprintln&lt;/span&gt;(w, err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; resp.Body.&lt;span style=&#34;color:#50fa7b&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Fprintln&lt;/span&gt;(w, resp.StatusCode)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;w.&lt;span style=&#34;color:#50fa7b&#34;&gt;WriteHeader&lt;/span&gt;(http.StatusMethodNotAllowed)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;http.&lt;span style=&#34;color:#50fa7b&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, handler)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Listen on :8080&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;http.&lt;span style=&#34;color:#50fa7b&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; golang:1.10-alpine3.7 AS build-env&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; /app&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ADD&lt;/span&gt; . /app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;cd&lt;/span&gt; /app &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; go build -o goapp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; alpine:3.7&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;RUN&lt;/span&gt; apk update &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;   apk add ca-certificates &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;   update-ca-certificates &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;   rm -rf /var/cache/apk/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; /app&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;COPY&lt;/span&gt; --from&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;build-env /app/goapp /app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXPOSE&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; 8080&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ENTRYPOINT&lt;/span&gt; ./goapp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker build -t asia.gcr.io/*****/network-checker .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud docker -- push asia.gcr.io/*****/network-checker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deploymentとserviceを作成&#34;&gt;DeploymentとServiceを作成&lt;/h2&gt;&#xA;&lt;p&gt;ksonnetでマニフェストを生成した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlowのモデルをsave/loadする</title>
      <link>https://www.sambaiz.net/article/172/</link>
      <pubDate>Fri, 22 Jun 2018 01:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/172/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/saved_model/builder/SavedModelBuilder&#34;&gt;SavedModelBuilder&lt;/a&gt;で&#xA;モデルを言語に依存しない&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/protobuf/saved_model.proto&#34;&gt;SavedModel&lt;/a&gt;のprotobufにして保存できる。&#xA;SavedModelには&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/train/Saver&#34;&gt;Saver&lt;/a&gt;によって&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/python/saved_model/builder_impl.py#L418&#34;&gt;出力&lt;/a&gt;される&lt;a href=&#34;https://www.tensorflow.org/get_started/checkpoints&#34;&gt;Checkpoint&lt;/a&gt;を共有する一つ以上の&lt;a href=&#34;https://www.tensohttps://www.tensorflow.org/guide/saved_model#structure_of_a_savedmodel_directoryrflow.org/api_docs/python/tf/MetaGraphDef&#34;&gt;MetaGraphDef&lt;/a&gt;を&lt;a href=&#34;https://www.tensorflow.org/guide/saved_model#structure_of_a_savedmodel_directory&#34;&gt;含む&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; tensorflow &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; tf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;build_signature&lt;/span&gt;(signature_inputs, signature_outputs):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;signature_def_utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;build_signature_def(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        signature_inputs, signature_outputs,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;signature_constants&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;REGRESS_METHOD_NAME)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;save&lt;/span&gt;(sess, export_dir, signature_def_map):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    builder &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;builder&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SavedModelBuilder(export_dir)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    builder&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add_meta_graph_and_variables(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          sess, [tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;tag_constants&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;SERVING],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          signature_def_map&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;signature_def_map&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    builder&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;save()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; shutil&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; os.path&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export_dir &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./saved_model&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; os&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;exists(export_dir):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shutil&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;rmtree(export_dir)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Graph()&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;as_default():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;placeholder(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;float32, name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;placeholder(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;float32, name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(a, b, name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;placeholder(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;float32, name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    w &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Variable(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.0&lt;/span&gt;, name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; w&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;assign(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;add(v, w))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sv &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Supervisor()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; sv&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;managed_session() &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; sess:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(c, feed_dict&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{a: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, b: &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;})) &lt;span style=&#34;color:#6272a4&#34;&gt;# 3.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(x, feed_dict&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{v: &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;})) &lt;span style=&#34;color:#6272a4&#34;&gt;# 2.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(x, feed_dict&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{v: &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;})) &lt;span style=&#34;color:#6272a4&#34;&gt;# 5.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;# https://github.com/tensorflow/tensorflow/issues/11549&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;graph&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_unsafe_unfinalize()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        save(sess, export_dir, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;: build_signature({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;: tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;build_tensor_info(a),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;:tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;build_tensor_info(b)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;: tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;build_tensor_info(c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;accumulate&amp;#34;&lt;/span&gt;: build_signature({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;v&amp;#34;&lt;/span&gt;: tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;build_tensor_info(v),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;: tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;utils&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;build_tensor_info(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; ls saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;saved_model&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;pb  variables&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;loadしてsess.runできる。variableの値も保存されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ksonnetでkubernetesのmanifestを環境ごとに生成/applyする</title>
      <link>https://www.sambaiz.net/article/171/</link>
      <pubDate>Wed, 20 Jun 2018 01:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/171/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ksonnet.io/&#34;&gt;ksonnet&lt;/a&gt;はJSONのテンプレートエンジン&lt;a href=&#34;https://jsonnet.org/&#34;&gt;jsonnet&lt;/a&gt;からk8sのmanifestを環境ごとに生成してapplyするツール。&lt;a href=&#34;https://github.com/kubeflow/kubeflow&#34;&gt;kubeflow&lt;/a&gt;でも使われている。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;追記(2020-11-22): 既に開発が終了しリポジトリもアーカイブされている。&#xA;kubeflowはkustomizeに&lt;a href=&#34;https://docs.google.com/document/d/156H79GiQ-gCAputHzcCdmD6gZZaMBLqC-kzwKqc2MIA&#34;&gt;移行した&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/311/&#34;&gt;kustomizeでkubernetesのmanifestを環境ごとに生成する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install ksonnet/tap/ks&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ks version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ksonnet version: 0.11.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jsonnet version: v0.10.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client-go version:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;init&#34;&gt;init&lt;/h2&gt;&#xA;&lt;p&gt;まず&lt;code&gt;ks init&lt;/code&gt;してディレクトリを作成する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pandasの操作</title>
      <link>https://www.sambaiz.net/article/170/</link>
      <pubDate>Wed, 13 Jun 2018 23:47:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/170/</guid>
      <description>&lt;h2 id=&#34;seriesとdataframe&#34;&gt;SeriesとDataframe&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; pd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; np&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Series([&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(s[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#6272a4&#34;&gt;# 3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(s&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;values) &lt;span style=&#34;color:#6272a4&#34;&gt;# [1 3] (ndarray)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dates &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;date_range(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2014-11-01 10:00&amp;#39;&lt;/span&gt;,periods&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, freq&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2H&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(dates) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# DatetimeIndex([&amp;#39;2014-11-01 10:00:00&amp;#39;, &amp;#39;2014-11-01 12:00:00&amp;#39;, &amp;#39;2014-11-01 14:00:00&amp;#39;], dtype=&amp;#39;datetime64[ns]&amp;#39;, freq=&amp;#39;2H&amp;#39;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datestr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;lambda&lt;/span&gt; d: pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;to_datetime(d)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;strftime(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; %H:%M&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DataFrame({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#bd93f9&#34;&gt;1.&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt; : pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Series(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;),  index&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;date_range(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2014-11-01 10:00&amp;#39;&lt;/span&gt;,periods&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;, freq&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt; : [&lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, index&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;dates)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;DataFrame({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, index&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;dates)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(df)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|(index)            |A  |B|C|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|-------------------|---|-|-|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|2014-11-01 10:00:00|1.0|0|9|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|2014-11-01 12:00:00|1.0|2|1|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|2014-11-01 14:00:00|1.0|4|5|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;indexを指定しないと0始まりの数値になる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ベイズ最適化でランダムフォレストとXGBoostの良いハイパーパラメータを探す</title>
      <link>https://www.sambaiz.net/article/169/</link>
      <pubDate>Sun, 10 Jun 2018 17:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/169/</guid>
      <description>&lt;p&gt;ベイズ最適化で良いハイパーパラメータを総当りのグリッドサーチより効率的に探す。&lt;/p&gt;&#xA;&lt;p&gt;ベイズ最適化はSMBO(Sequential Model-based Global Optimization)と呼ばれる、目的関数を近似するモデルと、ある値を探索すべきか評価する関数を用いて探索を進め、&#xA;実際の目的関数での評価とモデルの修正を行っていく手法の一種。&#xA;ベイズ最適化ではモデルとして、直近探索したパラメータとスコアの組の集合&lt;code&gt;D&lt;/code&gt;の条件付き事後確率分布&lt;code&gt;P(y|x, D)&lt;/code&gt;を用いる。&#xA;確率モデルは、任意の入力&lt;code&gt;(x1, x2, ... , xn)&lt;/code&gt;に対応する出力&lt;code&gt;(y1, y2, ..., yn)&lt;/code&gt;がガウス分布(=正規分布)に従うガウス過程(GP)や、TPE(Tree-structured Parzen Estimator)が仮定される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KaggleのTitanicのチュートリアルをXGBoostで解く</title>
      <link>https://www.sambaiz.net/article/168/</link>
      <pubDate>Sat, 02 Jun 2018 18:16:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/168/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://xgboost.readthedocs.io/en/latest/&#34;&gt;XGBoost&lt;/a&gt;は高性能なGradient Boostingのライブラリ。&#xA;Boostingというのはアンサンブル学習の種類の一つで、ランダムフォレストのように弱学習器をそれぞれ並列に学習するBaggingに対して、&#xA;順番に前回までの結果を受けながら学習し、結果をまとめる際にそれぞれの重みを掛けるもの。&#xA;XGBoostではランダムフォレストと同様に決定木を弱学習器とする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Istio v0.7でEnvoy Proxyを付けるまで</title>
      <link>https://www.sambaiz.net/article/167/</link>
      <pubDate>Tue, 29 May 2018 22:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/167/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;追記(2018-09-01) v1.0となりHelmでのインストールも問題なくできるようになった。Istio-AuthがCitadelという&lt;a href=&#34;https://istio.io/about/notes/0.8/&#34;&gt;名前になっていたり&lt;/a&gt;DeprecatedになってるAPIもある&lt;/p&gt;</description>
    </item>
    <item>
      <title>KaggleのTitanicのチュートリアルをランダムフォレストで解く</title>
      <link>https://www.sambaiz.net/article/166/</link>
      <pubDate>Tue, 29 May 2018 09:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/166/</guid>
      <description>&lt;p&gt;ランダムフォレストはデータや特徴量をランダムにサンプリングして決定木を複数生成し並列に学習するアンサンブル学習のBaggingという種類の手法。&#xA;決定木なので特徴量の影響が分かりやすく、値の大小で分岐するので標準化の必要がないが、複数の変数で表現される特徴を学習しづらい。&#xA;また、単一の決定木と比べて過学習を防ぐことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TerraformでGKEクラスタとBigQueryを立てる</title>
      <link>https://www.sambaiz.net/article/165/</link>
      <pubDate>Tue, 29 May 2018 02:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/165/</guid>
      <description>&lt;p&gt;GKEクラスタからBigQueryを読み書きすることを想定している。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/121/&#34;&gt;TerraformでVPCを管理するmoduleを作る - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/159/&#34;&gt;Kubernetesの1PodでAppとfluentdコンテナを動かしてBigQueryに送る - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;gkehttpsgithubcomhashicorpterraform-guidestreemasterinfrastructure-as-codek8s-cluster-gke&#34;&gt;&lt;a href=&#34;https://github.com/hashicorp/terraform-guides/tree/master/infrastructure-as-code/k8s-cluster-gke&#34;&gt;GKE&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.terraform.io/docs/providers/google/r/container_cluster.html&#34;&gt;google_container_cluster&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;oauth_scopeにbigqueryを付けている。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-tf&#34; data-lang=&#34;tf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;google_container_cluster&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sample&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;               = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.cluster_name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt;        = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sample k8s cluster&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;zone&lt;/span&gt;               = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.gcp_zone&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;initial_node_count&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.initial_node_count&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  master_auth {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;username&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.master_username&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;password&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.master_password&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  node_config {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;machine_type&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.node_machine_type&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;disk_size_gb&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.node_disk_size&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;oauth_scopes&lt;/span&gt; = [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.googleapis.com/auth/compute&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.googleapis.com/auth/devstorage.read_only&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.googleapis.com/auth/logging.write&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.googleapis.com/auth/monitoring&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.googleapis.com/auth/bigquery&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-tf&#34; data-lang=&#34;tf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;system env&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;gcp_zone&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GCP zone, e.g. us-east1-b&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;default&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;us-east1-b&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cluster_name&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Name of the K8s cluster&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;initial_node_count&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Number of worker VMs to initially create&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;default&lt;/span&gt; = &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;master_username&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Username for accessing the Kubernetes master endpoint&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;master_password&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Password for accessing the Kubernetes master endpoint&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;node_machine_type&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GCE machine type&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;default&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;n1-standard-1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;node_disk_size&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Node disk size in GB&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;default&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bigquery&#34;&gt;BigQuery&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.terraform.io/docs/providers/google/r/bigquery_dataset.html&#34;&gt;google_bigquery_dataset&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.terraform.io/docs/providers/google/r/bigquery_table.html&#34;&gt;google_bigquery_table&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-tf&#34; data-lang=&#34;tf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;google_bigquery_dataset&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sample&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;dataset_id&lt;/span&gt;  = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;data&lt;/span&gt;set_id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sample dataset&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;location&lt;/span&gt;    = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;data&lt;/span&gt;set_location&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  labels {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;env&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.env&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;google_bigquery_table&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sample&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;dataset_id&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;google_bigquery_dataset.sample.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;data&lt;/span&gt;set_id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;table_id&lt;/span&gt;   = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sample&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;schema&lt;/span&gt;     = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;file&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bigquery/sample/schema.json&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  time_partitioning {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;  = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DAY&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  labels {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;env&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt;.env&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-tf&#34; data-lang=&#34;tf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;system env&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dataset_id&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dataset ID&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;variable&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dataset_location&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;description&lt;/span&gt; = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dataset location one of [US EU]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#50fa7b&#34;&gt;default&lt;/span&gt;     = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;US&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;schema.jsonはこんな感じ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>カナダのバンクーバーから南へ5都市周ってGoogleI/Oに行ってきた</title>
      <link>https://www.sambaiz.net/article/164/</link>
      <pubDate>Mon, 28 May 2018 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/164/</guid>
      <description>&lt;p&gt;去年と連続でチケットが当たって2回目の参加。&#xA;&lt;a href=&#34;https://www.sambaiz.net/article/103&#34;&gt;前回&lt;/a&gt;はニューヨークで大変な目にあったが、&#xA;今回はI/OがGWの次の週だったので日程に余裕があり、カナダのバンクーバーから、ビクトリア、アメリカに入ってポートエンジェルス、シアトル、ポートランドと南下していって会場のマウンテンビューを目指すことにした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macでの開発環境構築メモ</title>
      <link>https://www.sambaiz.net/article/163/</link>
      <pubDate>Sat, 14 Apr 2018 14:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/163/</guid>
      <description>&lt;p&gt;新しいMBPを買ったので開発環境の構築でやったことを残しておく&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;アクセシビリティから3本指スクロールを有効にする&lt;/li&gt;&#xA;&lt;li&gt;ホットコーナーの左上にLaunchPad、右上にデスクトップを割り当てている&lt;/li&gt;&#xA;&lt;li&gt;画面をなるべく広く使うためにDockは左に置いて自動的に隠す&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;bash_profile&#34;&gt;bash_profile&lt;/h2&gt;&#xA;&lt;p&gt;パッケージマネージャ以外で持ってきたバイナリは ${HOME}/bin に置くことにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythonのasyncioで非同期にリクエストを飛ばす</title>
      <link>https://www.sambaiz.net/article/162/</link>
      <pubDate>Sat, 14 Apr 2018 13:37:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/162/</guid>
      <description>&lt;p&gt;Pythonの&lt;a href=&#34;https://docs.python.org/3/library/asyncio.html&#34;&gt;asyncio&lt;/a&gt;はイベントループを回してシングルスレッドで並行に非同期処理を行う。&#xA;マルチスレッドで並列に実行するのが&lt;a href=&#34;https://docs.python.jp/3/library/threading.html&#34;&gt;threading&lt;/a&gt;で、&#xA;マルチプロセスで並列に実行するのが&lt;a href=&#34;https://docs.python.jp/3/library/multiprocessing.html&#34;&gt;multiprocessing&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; asyncio&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sleep&lt;/span&gt;(s):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;await&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sleep(s)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(s)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; s&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;get_event_loop()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run_until_complete(sleep(&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;coros &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [sleep(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;), sleep(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;futures &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; asyncio&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;gather(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;coros)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run_until_complete(futures)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(futures&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;result())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loop&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python main.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[3, 2]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3.6/library/asyncio-eventloops.html#asyncio.AbstractEventLoopPolicy.get_event_loop&#34;&gt;get_event_loop()&lt;/a&gt;&#xA;でイベントループを取得し、&#xA;&lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#asyncio.gather&#34;&gt;gather()&lt;/a&gt;で処理をまとめたりして、&#xA;&lt;a href=&#34;https://docs.python.org/3/library/asyncio-task.html#example-future-with-run-until-complete&#34;&gt;run_until_complete()&lt;/a&gt;で&#xA;&lt;a href=&#34;https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future&#34;&gt;Future&lt;/a&gt;の完了を待ち、&#xA;結果を取得してイベントループを close() している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesにHelmでLocustによる分散負荷試験環境を立てる</title>
      <link>https://www.sambaiz.net/article/161/</link>
      <pubDate>Sun, 18 Mar 2018 22:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/161/</guid>
      <description>&lt;p&gt;OSSの負荷試験ツール&lt;a href=&#34;https://locust.io/&#34;&gt;Locust&lt;/a&gt;をK8sクラスタに立てる。&#xA;K8sならworkerの増減も簡単だし、HelmのChartもあるので立てるのも楽。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/297/&#34;&gt;CDKでEKSクラスタの作成からHelm ChartでのLocustのインストールまでを一気に行う - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>RBACが有効なGKEでHelmを使う</title>
      <link>https://www.sambaiz.net/article/160/</link>
      <pubDate>Sun, 18 Mar 2018 01:04:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/160/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/122/&#34;&gt;k8sのパッケージマネージャーHelmを使う - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ helm version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Client: &amp;amp;version.Version{SemVer:&amp;#34;v2.8.2&amp;#34;, GitCommit:&amp;#34;a80231648a1473929271764b920a8e346f6de844&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Server: &amp;amp;version.Version{SemVer:&amp;#34;v2.8.2&amp;#34;, GitCommit:&amp;#34;a80231648a1473929271764b920a8e346f6de844&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GKEで helm init して helm install したところ以下のエラーが返ってきた。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Error: release my-locust failed: namespaces &amp;#34;default&amp;#34; is forbidden: User &amp;#34;system:serviceaccount:kube-system:default&amp;#34; cannot get namespaces in the namespace &amp;#34;default&amp;#34;: Unknown user &amp;#34;system:serviceaccount:kube-system:default&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;GKEではデフォルトでK8sのRBAC(Role-Based Access Control)が&lt;a href=&#34;https://cloud.google.com/kubernetes-engine/docs/role-based-access-control&#34;&gt;有効になっている&lt;/a&gt;ため、&lt;a href=&#34;https://github.com/kubernetes/helm/blob/master/docs/rbac.md&#34;&gt;Tillerインスタンスに権限を与える&lt;/a&gt;必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetesの1PodでAppとfluentdコンテナを動かしてBigQueryに送る</title>
      <link>https://www.sambaiz.net/article/159/</link>
      <pubDate>Tue, 13 Mar 2018 01:04:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/159/</guid>
      <description>&lt;p&gt;Logging AgentをNodeレベルの&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&#34;&gt;DaemonSet&lt;/a&gt;として動かすのではなく、Podの中に&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/logging/#using-a-sidecar-container-with-the-logging-agent&#34;&gt;Sidecar Container&lt;/a&gt;として動かす。その分リソースは食うが、独立した設定で動かせる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アプリケーション&#34;&gt;アプリケーション&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/go-logging-sample&#34;&gt;https://github.com/sambaiz/go-logging-sample&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Goで定期的にログを出すサンプルコードを書いたのでこれを使う。&#xA;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;viper&lt;/a&gt;で設定を持ち、&#xA;&lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;zap&lt;/a&gt;でログを出力する。&#xA;あとSIGINTを拾ってSync()してGraceful Shutdownするようにしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL InnoDBのロックの挙動</title>
      <link>https://www.sambaiz.net/article/158/</link>
      <pubDate>Sat, 03 Mar 2018 19:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/158/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html&#34;&gt;https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;トランザクション分離レベルはデフォルトのREPEATABLE-READ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@@&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;GLOBAL&lt;/span&gt;.tx_isolation, &lt;span style=&#34;color:#ff79c6&#34;&gt;@@&lt;/span&gt;tx_isolation;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-----------------------+-----------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@@&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;GLOBAL&lt;/span&gt;.tx_isolation &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@@&lt;/span&gt;tx_isolation  &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-----------------------+-----------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;REPEATABLE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;READ&lt;/span&gt;       &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;REPEATABLE&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;READ&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;-----------------------+-----------------+&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;準備&#34;&gt;準備&lt;/h2&gt;&#xA;&lt;p&gt;DBを立ち上げてテーブルとレコードを入れる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat schema_and_data.&lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; a (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;BIGINT&lt;/span&gt; UNSIGNED AUTO_INCREMENT &lt;span style=&#34;color:#ff79c6&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;128&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; b (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;BIGINT&lt;/span&gt; UNSIGNED AUTO_INCREMENT &lt;span style=&#34;color:#ff79c6&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a_id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;BIGINT&lt;/span&gt; UNSIGNED &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;FOREIGN&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; (a_id) &lt;span style=&#34;color:#ff79c6&#34;&gt;REFERENCES&lt;/span&gt; a (id)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; a (id, name) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; a (id, name) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; a (id, name) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; a (id, name) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; a (id, name) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; a (id, name) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;10&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat &lt;span style=&#34;color:#ff79c6&#34;&gt;start&lt;/span&gt;.sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rm &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;f try&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;mysql&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;lock&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run &lt;span style=&#34;color:#6272a4&#34;&gt;--name try-mysql-lock -p 4306:3306 -e &amp;#34;MYSQL_ALLOW_EMPTY_PASSWORD=yes&amp;#34; -e &amp;#34;MYSQL_DATABASE=try-mysql-lock&amp;#34; -e &amp;#34;TZ=Asia/Tokyo&amp;#34; --health-cmd=&amp;#39;mysqladmin ping --silent&amp;#39; -d mysql:5.6 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;while [[ $(docker inspect &lt;span style=&#34;color:#6272a4&#34;&gt;--format &amp;#34;{{.State.Health.Status}}&amp;#34; try-mysql-lock) != &amp;#34;healthy&amp;#34; ]]; do printf &amp;#34;.&amp;#34;; sleep 1; done&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;mysql &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;u root &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;h &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;P &lt;span style=&#34;color:#bd93f9&#34;&gt;4306&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;D try&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;mysql&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; schema_and_data.&lt;span style=&#34;color:#ff79c6&#34;&gt;sql&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;共有sharedロック&#34;&gt;共有(Shared)ロック&lt;/h2&gt;&#xA;&lt;p&gt;その行を他がSELECTしたり共有ロックを取ることは許す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cognito UserPoolとAPI Gatewayで認証付きAPIを立てる</title>
      <link>https://www.sambaiz.net/article/157/</link>
      <pubDate>Sun, 25 Feb 2018 23:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/157/</guid>
      <description>&lt;p&gt;UserPoolを作成。デフォルト設定はこんな感じ。&#xA;必須項目や、確認メールの文面などを自由にカスタマイズでき、&#xA;登録時などのタイミングでLambdaを発火させることもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ブラウザのwindow間の値渡し</title>
      <link>https://www.sambaiz.net/article/156/</link>
      <pubDate>Fri, 23 Feb 2018 02:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/156/</guid>
      <description>&lt;h2 id=&#34;直接windowを参照する&#34;&gt;直接Windowを参照する&lt;/h2&gt;&#xA;&lt;p&gt;オリジン(プロトコル+ポート+ホスト)が同じ場合は、親は&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/window.open&#34;&gt;open()&lt;/a&gt;した返り値で、子はwindow.openerで相手のwindowが取れて、直接参照したりDOMを操作したりすることもできる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/194/&#34;&gt;同じ/異なるオリジンのiframeの中からできること - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat index.html&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;&amp;gt;Open window&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn2&amp;#34;&lt;/span&gt;&amp;gt;Close window&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;view&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; win2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; button &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  button.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.foo &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bar from window1&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    win2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.open(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;index2.html&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; button2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn2&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  button2.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (win2) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      win2.close();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat index2.html&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;&amp;gt;Close window&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;view&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.aaa);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; parentWindow &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.opener;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; view &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;view&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  view.textContent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; parentWindow.foo; &lt;span style=&#34;color:#6272a4&#34;&gt;// window1 -&amp;gt; window2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; button &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  button.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;parentWindow) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.close();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; view &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; parentWindow.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;view&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (view) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      view.textContent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Window2 has been closed by myself&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// window2 -&amp;gt; window1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.close();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;確認する際は&lt;a href=&#34;https://github.com/cloudhead/node-static&#34;&gt;node-static&lt;/a&gt;などでサーバーを立てる必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless FrameworkでLambdaをデプロイする</title>
      <link>https://www.sambaiz.net/article/155/</link>
      <pubDate>Sun, 11 Feb 2018 23:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/155/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/serverless/serverless&#34;&gt;Serverless Framework&lt;/a&gt;でLambda Functionをデプロイする。&#xA;Apexが基本的にFunction自体のデプロイしかしないのに対して、こちらはeventの設定なども諸々やってくれて強い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlow/RNNで連続的な値の時系列データを予測する</title>
      <link>https://www.sambaiz.net/article/154/</link>
      <pubDate>Sun, 11 Feb 2018 19:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/154/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/146/&#34;&gt;TensorFlowのRNN(LSTM)のチュートリアルのコードを読む - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;チュートリアルで扱ったのは語彙数分の単語、つまり離散的な値だったが、今回は連続的な値を取る場合のモデルを作る。&#xA;全体のコードは&lt;a href=&#34;https://github.com/sambaiz/my_jupyter_notebook/blob/master/rnn-continuous.ipynb&#34;&gt;ここ&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;入力&#34;&gt;入力&lt;/h3&gt;&#xA;&lt;p&gt;以下の関数によって生成した1次元のデータ列。&#xA;これをstrideした最後のデータ、つまり時系列的に次に来るものを予測させる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>xorm reverseでDBスキーマからGoのstructを生成する</title>
      <link>https://www.sambaiz.net/article/153/</link>
      <pubDate>Sat, 10 Feb 2018 15:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/153/</guid>
      <description>&lt;p&gt;GoのORMの&lt;a href=&#34;https://github.com/go-xorm/xorm&#34;&gt;xorm&lt;/a&gt;にはxorm reverseというDBのスキーマから以下のようなテンプレートに沿ったGoのstructなどを生成する&lt;a href=&#34;https://github.com/go-xorm/cmd&#34;&gt;ツール&lt;/a&gt;がある。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go-text-template&#34; data-lang=&#34;go-text-template&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package &lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.Model&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.Imports&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&amp;#34;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&amp;#34;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.Tables&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type &lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;Mapper &lt;span style=&#34;color:#50fa7b&#34;&gt;.Name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt; struct {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;$table &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.Columns&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;Mapper &lt;span style=&#34;color:#50fa7b&#34;&gt;.Name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;Type &lt;span style=&#34;color:#50fa7b&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;end&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;リポジトリにある&lt;a href=&#34;https://github.com/go-xorm/cmd/tree/master/xorm/templates&#34;&gt;テンプレート&lt;/a&gt;にxorm用テンプレートとgo用のテンプレートが用意されているように、単体で使うこともできる。&#xA;また、テンプレートを書く言語としてもGo以外にC++もサポートしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DatadogのLambda Integrationで気象データを送ってアラートを飛ばす</title>
      <link>https://www.sambaiz.net/article/152/</link>
      <pubDate>Mon, 05 Feb 2018 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/152/</guid>
      <description>&lt;p&gt;最近朝が寒くて布団から出るのがつらい。雨や雪が降っていたら尚更のこと、それならそれで現状を把握する必要がある。&#xA;そこで、無料から使える気象API &lt;a href=&#34;http://openweathermap.org/&#34;&gt;OpenWeatherMap&lt;/a&gt;のデータをdatadogに送って、特に寒い日や雨雪が降るような朝にはアラートを飛ばすことにした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ローカルでビルドしたimageをminikubeで使う</title>
      <link>https://www.sambaiz.net/article/151/</link>
      <pubDate>Thu, 01 Feb 2018 22:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/151/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ minikube version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube version: v0.25.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;9&amp;#34;, GitVersion:&amp;#34;v1.9.2&amp;#34;, GitCommit:&amp;#34;5fa2db2bd46ac79e5e00a4e6ed24191080aa463b&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2018-01-18T21:11:08Z&amp;#34;, GoVersion:&amp;#34;go1.9.2&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;darwin/amd64&amp;#34;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config current-context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ minikube status&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;minikube: Running&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cluster: Running&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;dockerコマンドがminikube VM内で動いているdocker daemonを参照するようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chromeで任意のscriptを読み込まれる前に差し替える</title>
      <link>https://www.sambaiz.net/article/150/</link>
      <pubDate>Thu, 01 Feb 2018 21:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/150/</guid>
      <description>&lt;p&gt;ChromeのDevToolsではSourcesからscriptを書き換えられるようになっているが、&#xA;一行目にbreakpointを挟んで更新するとそこで止まるので読み込まれる前に差し替えることができる。&#xA;ページの読み込み時に呼ばれるSDKやライブラリの影響範囲を調べたりデバッグしたりするのに便利。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gooseリポジトリのmerge時にバージョンを上げmigrationボタンをSlackに出す</title>
      <link>https://www.sambaiz.net/article/149/</link>
      <pubDate>Fri, 19 Jan 2018 09:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/149/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/pressly/goose&#34;&gt;Goose&lt;/a&gt;はGo製のDB Migrationツール。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/149.gif&#34; alt=&#34;mergeされるとボタンが出る&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/mysql-migration-slack&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;こんなリポジトリを作成し、各自ブランチを切ってGoose形式のup/downのSQLを書き、終わったらPullRequestを出す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SlackのInteractive messagesでボタンの入力を受け付ける</title>
      <link>https://www.sambaiz.net/article/148/</link>
      <pubDate>Tue, 16 Jan 2018 21:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/148/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://api.slack.com/interactive-messages&#34;&gt;Interactive messages&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/148.gif&#34; alt=&#34;ボタンを押す&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;まずはサーバーを用意する。コードは&lt;a href=&#34;https://github.com/sambaiz/node-slack-interactive-messages-sample&#34;&gt;ここ&lt;/a&gt;にあって、&#xA;Interactive messagesのハンドリングはSlack公式の&lt;a href=&#34;https://github.com/slackapi/node-slack-interactive-messages&#34;&gt;node-slack-interactive-messages&lt;/a&gt;を使っている。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;app.use(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/slack&amp;#39;&lt;/span&gt;, slackMessages.expressMiddleware());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;slackMessages.action(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;question_button&amp;#39;&lt;/span&gt;, (payload) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; replacement &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; payload.original_message;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  replacement.text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;payload.user.name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; likes &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;payload.actions[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].value&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt; replacement.attachments[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].actions;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; replacement;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ボタンの表示はattachmentsを使う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorBoardでsummaryやグラフを見る</title>
      <link>https://www.sambaiz.net/article/147/</link>
      <pubDate>Sun, 07 Jan 2018 21:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/147/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/146/&#34;&gt;TensorflowのRNN(LSTM)のチュートリアルのコードを読む - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;で読んだコードをTensorboardでみてみる。&lt;/p&gt;&#xA;&lt;p&gt;8888がJupyter、6006がTensorboard。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run -it -p 8888:8888 -p 6006:6006 gcr.io/tensorflow/tensorflow&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コードをuploadするかJupyterからterminalを開いてcloneしてくる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlowのRNN(LSTM)のチュートリアルのコードを読む</title>
      <link>https://www.sambaiz.net/article/146/</link>
      <pubDate>Wed, 03 Jan 2018 21:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/146/</guid>
      <description>&lt;p&gt;TensorflowのRNN(Recurrent Neural Networks)の&lt;a href=&#34;https://www.tensorflow.org/tutorials/recurrent&#34;&gt;チュートリアル&lt;/a&gt;の&lt;a href=&#34;https://github.com/tensorflow/models/blob/12f279d6f4cb33574bc20109b41eb8a59f40cfd1/tutorials/rnn/ptb/ptb_word_lm.py&#34;&gt;コード&lt;/a&gt;を読む。これは文章のそれまでの単語の履歴から、その次に続く単語を予測することで言語モデルを作るもの。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rnnlstmとは&#34;&gt;RNN/LSTMとは&lt;/h2&gt;&#xA;&lt;p&gt;RNNは入力に対して出力のほかに情報を次のステップに渡すことで時系列データで学習できるようにするネットワーク。&#xA;展開すると同じネットワークに単語を一つずつ入れていくように表現できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Athenaのmigrationやpartitionするathena-adminを作った</title>
      <link>https://www.sambaiz.net/article/145/</link>
      <pubDate>Sun, 24 Dec 2017 23:31:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/145/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/athena-admin&#34;&gt;https://github.com/sambaiz/athena-admin&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;AthenaはS3をデータソースとするマネージドなデータ分析基盤。Prestoベースで標準SQLを実行できる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/athena/pricing/&#34;&gt;料金&lt;/a&gt;はスキャンしたデータ量にかかり、$5/TB。1MB切り上げで、10MB以下のクエリは10MBになる。&#xA;データ量に対してかなり安く使えるものの、フルスキャンしてしまうとBigQueryと同様にお金が溶けてしまうので、大抵はパーティションを切ることになるのだが都度locationを指定して ADD PARTITION を実行するのは大変。さらにスキーマを変更するのにも ALTER TABLE ADD COLUMNS などはないのでテーブルを作り直すことになるが、当然パーティションも全部作り直すことになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ApexでデプロイしたLambdaのトリガーをTerraformで管理する</title>
      <link>https://www.sambaiz.net/article/144/</link>
      <pubDate>Sun, 12 Nov 2017 22:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/144/</guid>
      <description>&lt;p&gt;Apexでfunctionをデプロイするとトリガーが登録されないのであとで追加することになる。&#xA;これを手作業で行うこともできるのだが、せっかくなのでアプリケーションと一緒に管理したい。&#xA;そんなときのためにterraformコマンドをラップした&lt;a href=&#34;http://apex.run/#managing-infrastructure&#34;&gt;apex infra&lt;/a&gt;が用意されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScriptのrequire/importの歴史</title>
      <link>https://www.sambaiz.net/article/143/</link>
      <pubDate>Sat, 11 Nov 2017 20:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/143/</guid>
      <description>&lt;h2 id=&#34;scriptタグを並べる&#34;&gt;scriptタグを並べる&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;先に書かれた a.js で定義された内容は b.js で読むことができる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat a.js &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;a is defined&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; divA &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;divA.textContent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;b is undefined&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.appendChild(divA);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat b.js &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;b is defined&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; divB &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;divB.textContent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;a is undefined&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.appendChild(divB);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;依存が増えてくると順番を考えるのが大変。さらにグローバルな名前空間を汚染してしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>圧縮アルゴリズムZopfliとBrotli</title>
      <link>https://www.sambaiz.net/article/142/</link>
      <pubDate>Fri, 03 Nov 2017 15:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/142/</guid>
      <description>&lt;p&gt;どちらもGoogleが開発した圧縮アルゴリズム。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/puppeteer-lambda-starter-kit&#34;&gt;puppetter-lambda-starter-kit&lt;/a&gt;&#xA;の&lt;a href=&#34;https://github.com/sambaiz/puppeteer-lambda-starter-kit/issues/2&#34;&gt;issue&lt;/a&gt;に&#xA;現在使っているgzipと、Zopfli、Brotliを比較したデータが上がっていたので調べてみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redashでデータを可視化する</title>
      <link>https://www.sambaiz.net/article/141/</link>
      <pubDate>Mon, 23 Oct 2017 23:59:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/141/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/getredash/redash&#34;&gt;Redash&lt;/a&gt;はOSSのデータ可視化ツール。&#xA;BIツールのようにパラメータを変えながら指標を探っていくというよりは、分かっている指標を見るのに使うイメージ。&#xA;比較的機能が少ない分処理がわかりやすく、&#xA;クエリが自動生成されないため時間がかかるものを実行する前にある程度気づけるのが良いと思う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ApexでLambdaをデプロイする</title>
      <link>https://www.sambaiz.net/article/140/</link>
      <pubDate>Sun, 22 Oct 2017 16:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/140/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/apex/apex&#34;&gt;Apex&lt;/a&gt;でLambdaをデプロイする。&#xA;とても簡単に使えるし、変なこともしないので良い感じ。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Serverless Frameworkだとeventの設定までカバーできてより便利。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/155/&#34;&gt;Serverless FrameworkでLambdaをデプロイする - sambaiz-net&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.jsのコードをPrettierでフォーマットしてESLintにかける</title>
      <link>https://www.sambaiz.net/article/139/</link>
      <pubDate>Thu, 19 Oct 2017 00:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/139/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;Prettier&lt;/a&gt;はJSやTSのコードフォーマッタで、&#xA;ReactやBabel、Yarnなどの開発にも使われている。&lt;/p&gt;&#xA;&lt;p&gt;今回はPrettierでフォーマットしたものを eslint &amp;ndash;fix する&lt;a href=&#34;https://github.com/prettier/prettier-eslint-cli&#34;&gt;prettier-eslint-cli&lt;/a&gt;を使う。役割が被っているがPrettierは eslint &amp;ndash;fix よりも強力にフォーマットしてくれるようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>確率分布(二項分布/ポアソン分布/正規分布/t分布/カイ二乗分布)</title>
      <link>https://www.sambaiz.net/article/138/</link>
      <pubDate>Sun, 15 Oct 2017 01:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/138/</guid>
      <description>&lt;h2 id=&#34;二項分布&#34;&gt;二項分布&lt;/h2&gt;&#xA;&lt;p&gt;確率\(p\)で起きる事象が\(n\)回の試行で\(x\)回起きる確率関数の離散的確率分布\(B[n,p]\)。&#xA;期待値は\(np\)で、分散は\(np(1-p)\)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lpノルムと正則化</title>
      <link>https://www.sambaiz.net/article/137/</link>
      <pubDate>Thu, 12 Oct 2017 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/137/</guid>
      <description>&lt;h2 id=&#34;ノルムとは&#34;&gt;ノルムとは&lt;/h2&gt;&#xA;&lt;p&gt;ノルムはベクトル空間の距離を表す、以下の条件を満たす関数p。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;p(av) = |a| p(v): スケーラブル&lt;/li&gt;&#xA;&lt;li&gt;p(u + v) ≦ p(u) + p(v): 三角不等式を満たす&lt;/li&gt;&#xA;&lt;li&gt;p(v) ≧ 0: 負の値を取らない&lt;/li&gt;&#xA;&lt;li&gt;p(v) = 0 &amp;lt;=&amp;gt; v=0: 距離が0 &amp;lt;=&amp;gt; 零ベクトル&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以下の式で表されるノルムをLpノルムと呼ぶ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenID ConnectのIDトークンの内容と検証</title>
      <link>https://www.sambaiz.net/article/136/</link>
      <pubDate>Mon, 09 Oct 2017 20:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/136/</guid>
      <description>&lt;p&gt;OpenID Connectは認可 (AuthoriZation) のプロトコルであるOAuth 2.0を正しく認証 (AutheNtication) に使うためのプロトコル。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html&#34;&gt;OpenID Connect Core 1.0(日本語訳)&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/48/&#34;&gt;OAuth2.0のメモ - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;OpenID Connect では OAuth のアクセストークンに加えて Issuer (IdP) によって署名されたJWT (JSON Web Token) 形式のIDトークンも返す。&#xA;このIDトークンの署名を検証し、含まれる Issuer とクライアントの情報を参照することで OAuth の Implicit flow でのトークン置き換え攻撃を防ぐことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RSA暗号とPEM/DERの構造</title>
      <link>https://www.sambaiz.net/article/135/</link>
      <pubDate>Sun, 01 Oct 2017 21:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/135/</guid>
      <description>&lt;h2 id=&#34;rsa暗号とは&#34;&gt;RSA暗号とは&lt;/h2&gt;&#xA;&lt;p&gt;c ≡ m^e (mod n) で暗号化し、m ≡ c^d (mod n) で複合する暗号。&#xA;e と n が公開鍵で d が秘密鍵。n はとても大きく近くない素数 p,q の積で、&#xA;これを公開しても p * q に素因数分解できないのがこの暗号の前提になっている。&#xA;768bit(10進数で232桁)では既に解読されているので、少なくとも1024bit以上にする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自己情報量、エントロピー、KL情報量、交差エントロピーと尤度関数</title>
      <link>https://www.sambaiz.net/article/134/</link>
      <pubDate>Mon, 25 Sep 2017 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/134/</guid>
      <description>&lt;h2 id=&#34;自己情報量&#34;&gt;自己情報量&lt;/h2&gt;&#xA;&lt;p&gt;P(ω)の確率で起きる事象ωの自己情報量は以下の式で定義される。logの底を2にしてbitsで表すのが一般的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/134-self-information.png&#34; alt=&#34;自己情報量の定義&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/134-self-information-graph.png&#34; alt=&#34;自己情報量のグラフ&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;log(P)+log(Q)=log(P*Q) より加法性がある。&#xA;例えば、サイコロで1の目が2回連続で出る(P=1/36)情報量(5.16bits)はサイコロで1の目が出る(P=1/6)情報量(2.58bits)の2倍と等しい。&#xA;確率が高ければ高いほど自己情報量は小さくなり、P(ω)=1 では0bitになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ニューラルネットワークと活性化関数</title>
      <link>https://www.sambaiz.net/article/133/</link>
      <pubDate>Mon, 18 Sep 2017 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/133/</guid>
      <description>&lt;p&gt;活性化関数というのは各層での重み掛けバイアス足しのあとに適用する非線形の関数。&#xA;これはカーネル法のように空間を変換して線形分離できないデータを線形分離できるようにするはたらきをする。&#xA;線形な関数を使うと層を重ねても結局線形のままで、空間もそのまま伸縮するだけなので目的を果たさない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lambda上でPuppeteer/Headless Chromeを動かすStarter Kitを作った</title>
      <link>https://www.sambaiz.net/article/132/</link>
      <pubDate>Sun, 10 Sep 2017 23:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/132/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChrome/puppeteer&#34;&gt;Puppeteer&lt;/a&gt;でHeadless Chromeを動かすコードを&#xA;Lambda上で動かすStarter Kitを作った。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/puppeteer-lambda-starter-kit&#34;&gt;puppeteer-lambda-starter-kit&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;chromeの準備&#34;&gt;Chromeの準備&lt;/h2&gt;&#xA;&lt;p&gt;Puppeteerのインストール時に落としてくるChromeをLambda上で動かそうとしても&#xA;Lambdaにないshared libraryに依存しているため失敗する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Headless Chromeでファイルをダウンロードする</title>
      <link>https://www.sambaiz.net/article/131/</link>
      <pubDate>Sun, 03 Sep 2017 18:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/131/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/&#34;&gt;Chrome DevTools Protocol&lt;/a&gt;に&#xA;Experimentalだが&lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol/tot/Page#method-setDownloadBehavior&#34;&gt;Page.setDownloadBehavior&lt;/a&gt;&#xA;というのがあったので、これを呼んでファイルをダウンロードしてみた。&lt;/p&gt;&#xA;&lt;p&gt;今回は公式のDevToolsのNode API、&lt;a href=&#34;https://github.com/GoogleChrome/puppeteer&#34;&gt;Puppeteer&lt;/a&gt;を使うが、&#xA;setDownloadBehaviorを送るAPIはまだ&lt;a href=&#34;https://github.com/GoogleChrome/puppeteer/blob/64124df62f4e81999fe1a0ab45c6fb9718a0e413/lib/Page.js#L29&#34;&gt;なく&lt;/a&gt;、直接clientを取ってsendするので他のライブラリでもやることは変わらないと思う。&#xA;Puppeteerのインストールの際にChromiumも入る。setDownloadBehaviorは現行Chromeの60では&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=696481&#34;&gt;対応していない&lt;/a&gt;ようだが、62が入ったのでなんとかなりそう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>floatやdoubleの表現と精度</title>
      <link>https://www.sambaiz.net/article/130/</link>
      <pubDate>Sat, 02 Sep 2017 12:47:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/130/</guid>
      <description>&lt;p&gt;IEEE754で標準化されている浮動小数点の仕様。&lt;/p&gt;&#xA;&lt;p&gt;符号と指数部(exponent)と仮数部(fraction)からなるデータ構造で ± (基数)^(指数部) * 1.(仮数部) の値を表現する。&#xA;以下では基数を2とする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pythonのインタラクティブな可視化ライブラリBokehでグラフを描く</title>
      <link>https://www.sambaiz.net/article/129/</link>
      <pubDate>Sat, 26 Aug 2017 18:02:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/129/</guid>
      <description>&lt;p&gt;Pythonの可視化というと&lt;a href=&#34;https://github.com/matplotlib/matplotlib&#34;&gt;matplotlib&lt;/a&gt;や、&#xA;そのラッパーの&lt;a href=&#34;https://github.com/mwaskom/seaborn&#34;&gt;seaborn&lt;/a&gt;、&#xA;データ解析ライブラリの&lt;a href=&#34;https://github.com/pandas-dev/pandas&#34;&gt;Pandas&lt;/a&gt;にもそのような機能があるが、&#xA;これらが静止画を描画するのに対して、&#xA;&lt;a href=&#34;https://github.com/bokeh/bokeh&#34;&gt;Bokeh&lt;/a&gt;はD3.jsによって拡大やスクロールができるグラフを描画する。Bokehはカメラのボケ。&#xA;似たようなものに&lt;a href=&#34;https://github.com/plotly/plotly.py&#34;&gt;Plotly&lt;/a&gt;というのもあって、&#xA;こちらはPandasと同じpydata.orgドメインでスターが多い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloudera Docker ImageでHiveの実行環境を立ち上げてJSONのログにクエリを実行する</title>
      <link>https://www.sambaiz.net/article/128/</link>
      <pubDate>Thu, 24 Aug 2017 09:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/128/</guid>
      <description>&lt;h2 id=&#34;hiveとはhttpscwikiapacheorgconfluencedisplayhivehomehome-apachehive&#34;&gt;&lt;a href=&#34;https://cwiki.apache.org/confluence/display/Hive/Home#Home-ApacheHive&#34;&gt;Hiveとは&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;SQLを拡張したHiveQLでHDFSなどのデータソースにアクセスできるHadoopのデータウェアハウスソフトウェア。&#xA;クエリを送るとMapReduceやSpark、Tezのジョブが実行される。&#xA;耐障害性があり主にバッチ処理で用いられる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CloudflareでカスタムドメインのGitHub PagesにHTTPSでアクセスできるようにする</title>
      <link>https://www.sambaiz.net/article/127/</link>
      <pubDate>Mon, 21 Aug 2017 23:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/127/</guid>
      <description>&lt;p&gt;このサイトはGitHub Pagesでカスタムドメインsambaiz.netを設定して、&#xA;Apex Domain(sambaiz.net)に&lt;a href=&#34;https://help.github.com/articles/setting-up-an-apex-domain/&#34;&gt;Aレコード&lt;/a&gt;を登録して運用していたのだけれど、これだとカスタムドメインの証明書を置けないのでHTTPSでアクセスすると警告が出てしまう。&#xA;いい加減HTTPだと許されない風潮になってきたのでCloudflareを前に挟んでHTTPSでアクセスできるようにした。&#xA;ついでにCNAMEを登録できないApex Domain(sambaiz.net)をやめてwww.sambaiz.netに向ける。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HDFS(Hadoop Distributed File System)とは</title>
      <link>https://www.sambaiz.net/article/126/</link>
      <pubDate>Mon, 14 Aug 2017 22:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/126/</guid>
      <description>&lt;h2 id=&#34;hdfsとは&#34;&gt;HDFSとは&lt;/h2&gt;&#xA;&lt;p&gt;Hadoopの分散ファイルシステム。&#xA;Hadoopのファイルシステム実装の一つで、他の実装にはLocal fileやS3などがある。&#xA;データのサイズが大きい場合に特に問題となるディスクI/Oを分散させ、読み書きする最小の単位であるブロックサイズを大きくしシークのコストを減らすことで&#xA;スループットを高めている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PythonのLintとFormatter</title>
      <link>https://www.sambaiz.net/article/125/</link>
      <pubDate>Fri, 11 Aug 2017 14:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/125/</guid>
      <description>&lt;h2 id=&#34;yapfhttpsgithubcomgoogleyapf&#34;&gt;&lt;a href=&#34;https://github.com/google/yapf&#34;&gt;YAPF&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;スタイルに沿って整形してくれる、Goでいう go fmt みたいなもの。&#xA;デフォルトはPython公式のスタイルガイド&lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;PEP8&lt;/a&gt;でフォーマットされる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install yapf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;VSCodeでPythonを書くときは、&#xA;&lt;a href=&#34;https://github.com/DonJayamanne/pythonVSCode/wiki&#34;&gt;Pythonプラグイン&lt;/a&gt;&#xA;を入れてこんな設定をWorkspaceのconfigに入れておいて、&#xA;保存した時にフォーマットがかかるようにすると快適。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeepMindのTensorFlowライブラリSonnetを使う</title>
      <link>https://www.sambaiz.net/article/124/</link>
      <pubDate>Sun, 06 Aug 2017 23:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/124/</guid>
      <description>&lt;p&gt;AlphaGoを開発したGoogle DeepMind社のTensorFlowライブラリ&lt;a href=&#34;https://github.com/deepmind/sonnet&#34;&gt;Sonnet&lt;/a&gt;を使う。&#xA;当初はPython2しか対応していないようだったが、今は3にも対応している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.jsをTypeScriptで書く</title>
      <link>https://www.sambaiz.net/article/123/</link>
      <pubDate>Sat, 29 Jul 2017 19:34:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/123/</guid>
      <description>&lt;p&gt;公式の&lt;a href=&#34;https://github.com/Microsoft/TypeScript-Node-Starter&#34;&gt;TypeScript-Node-Starter&lt;/a&gt;から始めてもいいが、依存が少し余分なので一から作ることにした。&lt;/p&gt;&#xA;&lt;p&gt;コードは&lt;a href=&#34;https://github.com/sambaiz/typescript-nodejs-sample&#34;&gt;ここ&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yarn add --dev typescript tslint tslint-microsoft-contrib jest ts-jest @types/jest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;packagejson&#34;&gt;package.json&lt;/h2&gt;&#xA;&lt;p&gt;scriptsとテストフレームワーク&lt;a href=&#34;https://facebook.github.io/jest/&#34;&gt;Jest&lt;/a&gt;の設定を追加。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;typescript&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;^2.4.2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;npm run build &amp;amp;&amp;amp; node dist/app.js&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;build&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;npm run lint &amp;amp;&amp;amp; tsc&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;jest --forceExit&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;lint&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tslint -c tslint.json -p tsconfig.json --type-check&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;jest&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;transform&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;^.+\\.ts$&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./node_modules/ts-jest/preprocessor.js&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;testRegex&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/test/.*\\.test\\.(ts|js)$&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;moduleFileExtensions&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;js&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;testEnvironment&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;node&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tsconfigjsonhttpswwwtypescriptlangorgdocshandbooktsconfig-jsonhtml&#34;&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&#34;&gt;tsconfig.json&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;公式のそのまま。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesのパッケージマネージャーHelmを使う</title>
      <link>https://www.sambaiz.net/article/122/</link>
      <pubDate>Wed, 26 Jul 2017 01:33:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/122/</guid>
      <description>&lt;p&gt;Kubernatesが操舵手なのに対して、Helmは舵。&#xA;パッケージは&lt;a href=&#34;https://github.com/kubernetes/charts&#34;&gt;Chart&lt;/a&gt;(海図)と呼ばれている。&lt;/p&gt;&#xA;&lt;p&gt;ChartにはデフォルトでGoのtemplateで書かれた&lt;a href=&#34;https://github.com/kubernetes/charts/blob/master/stable/mysql/templates/deployment.yaml&#34;&gt;Manifest&lt;/a&gt;が含まれ、&lt;a href=&#34;https://github.com/helm/charts/blob/master/stable/mysql/values.yaml&#34;&gt;values.yaml&lt;/a&gt;の値を -f values.yaml や &amp;ndash;set key=value フラグで上書きして適用しインストールすることができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TerraformでVPCを管理するmoduleを作る</title>
      <link>https://www.sambaiz.net/article/121/</link>
      <pubDate>Sun, 23 Jul 2017 02:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/121/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install terraform&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ terraform -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Terraform v0.9.11&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;terraformの設定要素&#34;&gt;Terraformの設定要素&lt;/h2&gt;&#xA;&lt;h3 id=&#34;providerhttpswwwterraformiodocsprovidersindexhtml&#34;&gt;&lt;a href=&#34;https://www.terraform.io/docs/providers/index.html&#34;&gt;provider&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;IaaS(e.g. AWS)、PaaS(e.g. Heroku)、SaaS(e.g. CloudFlare)など。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/docs/providers/aws/&#34;&gt;AWS Provider&lt;/a&gt;はこんな感じ。&#xA;ここに直接access_keyやsecret_keyを書くこともできるが、誤って公開されてしまわないように環境変数か&#xA;variableで渡す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HoloLensでのUnityアプリケーションのフレームレート</title>
      <link>https://www.sambaiz.net/article/120/</link>
      <pubDate>Sun, 16 Jul 2017 23:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/120/</guid>
      <description>&lt;h2 id=&#34;hololensディスプレイのフレームレートhttpsdevelopermicrosoftcomen-uswindowsmixed-realityhologram_stabilityframe_rate&#34;&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/mixed-reality/hologram_stability#frame_rate&#34;&gt;HoloLensディスプレイのフレームレート&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;HoloLensのディスプレイは60fpsでリフレッシュされるので、アプリケーションもこれに合わせて60fps、&#xA;つまり16msごとにOSにイメージを渡せるのがベスト。&#xA;ただし、安定して60fpsが実現できないような重いアプリケーションの場合、&#xA;変動してしまうよりは下げて安定させる方が良い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HoloLensで剣振ってみた</title>
      <link>https://www.sambaiz.net/article/119/</link>
      <pubDate>Sun, 09 Jul 2017 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/119/</guid>
      <description>&lt;p&gt;かつてCardboardでやったようにHoloLensでも剣を振ってみた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/29/&#34;&gt;剣を振るVRゲームを作った - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/119-ss.png&#34; alt=&#34;スクリーンショット&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;剣を振ってロボットに当てると爆発する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_gt6ePsqrRc&#34;&gt;動画&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;剣の方は前回と同じくiOSアプリから傾きをBLEで送信している。今回は傘がなかったのでペットボトルにくくりつけた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HoloLensのSpartial MappingでNavMeshを生成してランダムにAgentを出現・移動させる</title>
      <link>https://www.sambaiz.net/article/118/</link>
      <pubDate>Sun, 02 Jul 2017 23:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/118/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unity 5.6.2f1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HoloToolkit v1.5.7.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unity 5.6から動的にNavMeshを生成できるようになったので&#xA;HoloLensのSpartial MappingしたものをNavMeshにしてAgentを動かしてみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unityで動的にNavMeshを生成する</title>
      <link>https://www.sambaiz.net/article/117/</link>
      <pubDate>Sat, 01 Jul 2017 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/117/</guid>
      <description>&lt;p&gt;Unity5.6から動的にNavMeshを生成できるようになった。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Unity-Technologies/NavMeshComponents&#34;&gt;Unity-Technologies/NavMeshComponents&lt;/a&gt;の&#xA;Exampleの2_drop_blankのsceneを開く。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/117-sample.png&#34; alt=&#34;Exampleの2_drop_blank&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;分断されたCubeの床と、その上に黄色いCylindarと赤いCubeがあって、&#xA;クリックしたところに黄色いCylindarが動くんだが、床がつながっていないのでそのままでは赤いCubeまではたどり着けない。&#xA;スペースを押すと目の前に板が出てくるのでこの上を渡って移動することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fluentdのout_copyのstoreのエラーは他のstoreに影響する</title>
      <link>https://www.sambaiz.net/article/116/</link>
      <pubDate>Sat, 01 Jul 2017 18:53:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/116/</guid>
      <description>&lt;p&gt;Fluentdの&lt;a href=&#34;http://docs.fluentd.org/v0.12/articles/out_copy&#34;&gt;out_copy&lt;/a&gt;プラグインは&#xA;一つのeventを複数のoutputに渡すために使われる。&#xA;ただ、複数設定した中のstoreでエラーが起きると他のstoreにも影響してしまう。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unityの経路探索: NavMeshとAgentとObstacle</title>
      <link>https://www.sambaiz.net/article/115/</link>
      <pubDate>Thu, 29 Jun 2017 00:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/115/</guid>
      <description>&lt;h2 id=&#34;navmeshと経路探索httpsdocsunity3dcomjp540manualnav-innerworkingshtml&#34;&gt;&lt;a href=&#34;https://docs.unity3d.com/jp/540/Manual/nav-InnerWorkings.html&#34;&gt;NavMeshと経路探索&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;NavMeshというのはエージェントが移動できる面についてのデータ構造で、凸ポリゴンの面と位置関係を含んでいる。&#xA;経路探索は2点間を一番近いポリゴンにマッピングし、&lt;a href=&#34;https://ja.wikipedia.org/wiki/A*&#34;&gt;A*アルゴリズム&lt;/a&gt;を用いて行われる。あとからオブジェクトが追加されるなどして道を塞いでしまってもCarvingしてNavMeshに穴をあければ別の経路で移動することができるが、このようなグローバルの経路探索に影響を及ぼす操作は計算にコストがかかるので、各エージェントローカルの衝突回避で済むならそのほうがよい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unityの物理エンジン・衝突: RigidbodyとCollidarとJoint</title>
      <link>https://www.sambaiz.net/article/114/</link>
      <pubDate>Sun, 25 Jun 2017 23:26:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/114/</guid>
      <description>&lt;h2 id=&#34;rigidbodyhttpsdocsunity3dcomjacurrentmanualrigidbodiesoverviewhtml&#34;&gt;&lt;a href=&#34;https://docs.unity3d.com/ja/current/Manual/RigidbodiesOverview.html&#34;&gt;Rigidbody&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;GameObjectを物理特性によって制御し、力の影響を受けるようにする。&#xA;Mass(質量)やDrag(空気抵抗)、Use Gravityなどのプロパティがある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdのAggregatorをELBで負荷分散し、Blue/Green Deploymentする</title>
      <link>https://www.sambaiz.net/article/113/</link>
      <pubDate>Sun, 25 Jun 2017 00:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/113/</guid>
      <description>&lt;p&gt;デプロイやスループットの調整を簡単にするため、BeanstalkでAggregatorを立ち上げた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;負荷分散&#34;&gt;負荷分散&lt;/h2&gt;&#xA;&lt;p&gt;TCPの24224(設定による)が通るようにEC2,ELBのSGとリスナーの設定をする必要があって、&#xA;ELBのSGのアウトバウンドの設定が見落とされがち。ELBのクロスゾーン分散は有効になっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UnityのMecanimでヒューマノイドアニメーションさせる</title>
      <link>https://www.sambaiz.net/article/112/</link>
      <pubDate>Tue, 20 Jun 2017 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/112/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.assetstore.unity3d.com/jp/#!/content/4696&#34;&gt;Space Robot Kyle&lt;/a&gt;を動かす。&lt;/p&gt;&#xA;&lt;h2 id=&#34;アバターの作成&#34;&gt;アバターの作成&lt;/h2&gt;&#xA;&lt;p&gt;Assetsの Model/Robot Kyle を選択し、RigのAnimation TypeをHumanoidにすると、&#xA;自動的にボーン構造を解析して人型にマッピングしたアバターが設定される。&#xA;Configure Avatarで確認すると正しく設定されているようだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NorikraでログをJOINする</title>
      <link>https://www.sambaiz.net/article/111/</link>
      <pubDate>Thu, 15 Jun 2017 00:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/111/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/109/&#34;&gt;NorikraとFluentdで流れてきたログをリアルタイムに集計する - sambaiz-net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;適当なログを出すコードを書いた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/lottery-log&#34;&gt;sambaiz/lottery-log&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;これは以下のようなlottery.logを出力し続け、数秒後に一定確率で同じuidのreceived.logを出力するもの。&#xA;広告的に言えば、lotteryがimpで、receivedがclickといった感じかな。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VSでのネイティブプラグインのビルドからUnityでのWSAのビルドまでをバッチでする</title>
      <link>https://www.sambaiz.net/article/110/</link>
      <pubDate>Tue, 13 Jun 2017 00:32:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/110/</guid>
      <description>&lt;h2 id=&#34;vsでのネイティブプラグインのビルド&#34;&gt;VSでのネイティブプラグインのビルド&lt;/h2&gt;&#xA;&lt;p&gt;VSが使っているビルドツール&#xA;&lt;a href=&#34;https://docs.microsoft.com/ja-jp/visualstudio/msbuild/msbuild&#34;&gt;MSBuild&lt;/a&gt;を使う。&#xA;VSのプロジェクトファイルにはMSBuildのXMLが含まれている。&#xA;これ自体はVSに依存していないため、単体で動かすこともできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NorikraとFluentdで流れてきたログをリアルタイムに集計する</title>
      <link>https://www.sambaiz.net/article/109/</link>
      <pubDate>Sat, 10 Jun 2017 12:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/109/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://norikra.github.io/&#34;&gt;Norikra&lt;/a&gt;はTD社の&lt;a href=&#34;https://github.com/tagomoris&#34;&gt;tagomoris&lt;/a&gt;氏が作った、&#xA;スキーマレスのストリーミングデータを処理するOSS。&lt;/p&gt;&#xA;&lt;p&gt;モチベーションとしてはfluentdでElasticsearchにログを送って可視化していたのだが、&#xA;流量が増えてきてピーク帯に耐えられなくなってしまったため、前もって集計してから送ることで流量を減らそうというもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdでKinesis streamsに送るときの性能確認</title>
      <link>https://www.sambaiz.net/article/108/</link>
      <pubDate>Mon, 05 Jun 2017 23:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/108/</guid>
      <description>&lt;h2 id=&#34;localでのstreamsとproducerのbenchmark&#34;&gt;localでのstreamsとproducerのbenchmark&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis&#34;&gt;aws-fluent-plugin-kinesis&lt;/a&gt;の&#xA;make benchmark はlocalにDummyServerを&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis/blob/v1.1.3/benchmark/task.rake#L18&#34;&gt;立ち上げて&lt;/a&gt;送っている。&lt;/p&gt;&#xA;&lt;p&gt;空でもいいのでroleをつけておく必要がある。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/awslabs/aws-fluent-plugin-kinesis.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd aws-fluent-plugin-kinesis&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum install -y ruby-devel gcc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &amp;#39;gem &amp;#34;io-console&amp;#34;&amp;#39; &amp;gt;&amp;gt; Gemfile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make benchmark&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;RATEを指定しなければデフォルトで&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis/blob/v1.1.3/benchmark/task.rake#L19&#34;&gt;秒間1000レコード&lt;/a&gt;が送られる設定。&#xA;fluentdを起動してから10秒後にプロセスをkillし、そのレコード数などを出力している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>td-agent2.3.5のfluentdが0.14系になってしまっているのでソースからビルドする</title>
      <link>https://www.sambaiz.net/article/107/</link>
      <pubDate>Sun, 04 Jun 2017 23:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/107/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;追記(2016-06-25): 現在は普通に入れても0.12系の2.3.5-1が入るようになっている。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; curl &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;L https:&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt;toolbelt&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;treasuredata&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;sh&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;install&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;redhat&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;td&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;agent2&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sh &lt;span style=&#34;color:#ff79c6&#34;&gt;|&lt;/span&gt; sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; td&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;agent &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;td&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;agent &lt;span style=&#34;color:#bd93f9&#34;&gt;0.14&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;0.12系じゃない！？&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum list installed | grep td-agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;td-agent.x86_64                       2.3.5-0.el2017               @treasuredata&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;どうやら2.3.5では0.14系になってしまっているよう。&#xA;そのあとにリリースされた2.3.5-1では直ってるみたいだが、現時点ではrpmリポジトリに上がっていない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BeanstalkでのパッケージのバージョンがAMIでのバージョンと異なる原因</title>
      <link>https://www.sambaiz.net/article/106/</link>
      <pubDate>Sun, 04 Jun 2017 23:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/106/</guid>
      <description>&lt;h2 id=&#34;user-dataとはhttpdocsawsamazoncomja_jpawsec2latestuserguideuser-datahtml&#34;&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/user-data.html&#34;&gt;User-Dataとは&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;EC2インスタンス起動時に、シェルスクリプトを走らせたりcloud-initディレクティブを適用できる機能。&#xA;コンソールではインスタンスの詳細の設定の、高度な詳細のところから設定できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unity/UWPでBLEを扱うプラグインを作る</title>
      <link>https://www.sambaiz.net/article/105/</link>
      <pubDate>Sun, 04 Jun 2017 11:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/105/</guid>
      <description>&lt;p&gt;コードは&lt;a href=&#34;https://github.com/sambaiz/UnityBLE_UWP&#34;&gt;ここ&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/aonishi/2013/12/04/unity-on-windows-8-1/&#34;&gt;この動画&lt;/a&gt;の&#xA;50:00あたりから説明があるように、&#xA;ビルドされたWSAが読むUWPのdllのほかに、&#xA;Unityエディタ上から読むための.NET Framework3.5のdllを用意する。&#xA;こうすることで実行環境ごとの違いをUnityコード上で気にしなくてもよくなる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golangの高速なロガーzapとlumberjackでログを出力してrotateさせる</title>
      <link>https://www.sambaiz.net/article/104/</link>
      <pubDate>Sat, 27 May 2017 16:35:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/104/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;https://github.com/uber-go/zap&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go get -u go.uber.org/zap&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go get -u gopkg.in/natefinch/lumberjack.v2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;速さの秘訣&#34;&gt;速さの秘訣&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://techblog.ca-reward.co.jp/2016/06/post-33.html&#34;&gt;Go言語のLogger「zap」は何故高速に構造化されたログを出力する事が出来るのか｜株式会社CAリワード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;reflectionとallocationの回避。&lt;/p&gt;&#xA;&lt;p&gt;一度allocateしたBufferやEncoderは&#xA;&lt;a href=&#34;https://golang.org/pkg/sync/#Pool&#34;&gt;sync.Pool&lt;/a&gt;で使い回している。&#xA;このPoolはまさにallocateされたアイテムを再利用するためのもので、GCの負担を緩和させることができる。&#xA;Poolのアイテムは勝手に削除されることがあり、もし参照しか持っていなかったらそのままdeallocateされる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>夜のNY郊外を無一文で彷徨い、Google I/OとMaker Faire Bay Areaに行ってきた</title>
      <link>https://www.sambaiz.net/article/103/</link>
      <pubDate>Mon, 22 May 2017 23:44:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/103/</guid>
      <description>&lt;p&gt;Googleが毎年やっているイベント、Google I/Oのチケットが当たったのでアメリカに行ってきた。&#xA;海外に行くのはこれが3回目でアメリカははじめて。一人での海外もはじめて。&lt;/p&gt;</description>
    </item>
    <item>
      <title>io17で発表されたFirebaseのphone number authをwebで試してみた</title>
      <link>https://www.sambaiz.net/article/102/</link>
      <pubDate>Wed, 17 May 2017 23:34:00 -0700</pubDate>
      <guid>https://www.sambaiz.net/article/102/</guid>
      <description>&lt;p&gt;今日のdeveloper keynoteで発表されたphone number authを試してみた。&#xA;Firebaseだと他にはPerformance MonitoringやSDKのOSS化が発表されている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UWPでBLEデバイスとペアリングして値を取得する</title>
      <link>https://www.sambaiz.net/article/101/</link>
      <pubDate>Sat, 13 May 2017 10:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/101/</guid>
      <description>&lt;p&gt;ManifestからBluetoothを許可しておく。&lt;/p&gt;&#xA;&lt;h2 id=&#34;bleデバイスを見つけるhttpsgithubcommicrosoftwindows-universal-samplesblobdevsamplesbluetoothleclientcsscenario1_discoverserverxamlcs&#34;&gt;&lt;a href=&#34;https://github.com/Microsoft/Windows-universal-samples/blob/dev/Samples/BluetoothLEClient/cs/Scenario1_DiscoverServer.xaml.cs&#34;&gt;BLEデバイスを見つける&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;CreateWatcher()&lt;/strong&gt; にBluetooth LEプロトコルの&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows/uwp/devices-sensors/aep-service-class-ids&#34;&gt;AEP(Association EndPoint)サービスクラスID&lt;/a&gt;と&#xA;requestPropaertiesで必要なデバイス情報を渡している。&#xA;最後の &lt;strong&gt;AssociationEndpoint&lt;/strong&gt; は System.Devices.Aep.ProtocolId のAepと&lt;a href=&#34;https://docs.microsoft.com/ja-jp/windows/uwp/devices-sensors/enumerate-devices-over-a-network&#34;&gt;対応している&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RxJSでObservableを結合する(merge, forkJoin, concat, combineLatest)</title>
      <link>https://www.sambaiz.net/article/100/</link>
      <pubDate>Tue, 09 May 2017 20:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/100/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/85/&#34;&gt;RxJSでRxをはじめる - sambaiz.net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mergehttpreactivexiorxjsclasses6observablejsobservablehtmlstatic-method-merge&#34;&gt;&lt;a href=&#34;http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#static-method-merge&#34;&gt;merge&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;2つのstreamの両方の値がemitされる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Rx.Observable.merge(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  stream1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  stream2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;).subscribe(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  data =&amp;gt; console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`merge &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;data&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  err =&amp;gt; console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`merge &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;err&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;forkjoinhttpreactivexiorxjsclasses6observablejsobservablehtmlstatic-method-forkjoin&#34;&gt;&lt;a href=&#34;http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#static-method-forkJoin&#34;&gt;forkJoin&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;completeしたときの最後の値を配列としてemitする。&#xA;非同期で一つ値をemitするようなstreamで、Promise.allのようなことをしたいときはこれ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>angular/material2でフォームを作る</title>
      <link>https://www.sambaiz.net/article/99/</link>
      <pubDate>Sat, 06 May 2017 22:16:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/99/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/99.gif&#34; alt=&#34;フォーム&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/angular4-form&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;angularmaterial2httpsgithubcomangularmaterial2の準備&#34;&gt;&lt;a href=&#34;https://github.com/angular/material2&#34;&gt;angular/material2&lt;/a&gt;の準備&lt;/h2&gt;&#xA;&lt;p&gt;現時点で&#xA;&lt;a href=&#34;https://github.com/angular/material2/issues/675&#34;&gt;DatePicker&lt;/a&gt;や&#xA;&lt;a href=&#34;https://github.com/angular/material2/issues/581&#34;&gt;Table&lt;/a&gt;など&#xA;開発中のコンポーネントが多いため足りないものを他のライブラリで補うなどする必要がある。&#xA;DatePickerはもう少しで出そう。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install --save @angular/material&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install --save hammerjs # gesture用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install --save @angular/animations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Moduleで&lt;code&gt;import &#39;hammerjs&#39;;&lt;/code&gt;して、以下のModuleをimportに加える。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSSのdisplayとposition</title>
      <link>https://www.sambaiz.net/article/98/</link>
      <pubDate>Sat, 06 May 2017 14:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/98/</guid>
      <description>&lt;h2 id=&#34;displayhttpsdevelopermozillaorgjadocswebcssdisplay&#34;&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/CSS/display&#34;&gt;display&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;レンダリングに使うボックスを指定する。&lt;/p&gt;&#xA;&lt;h3 id=&#34;outer-display-type&#34;&gt;outer display type&lt;/h3&gt;&#xA;&lt;p&gt;pのようなブロックレベル要素やspanのようなインラインレベル要素に関わらず、指定したボックスにレンダリングする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AngularのRouter</title>
      <link>https://www.sambaiz.net/article/97/</link>
      <pubDate>Sun, 30 Apr 2017 22:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/97/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@angular/core&amp;#34;: 4.1.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/40/&#34;&gt;Angular2とangular-cliでTODOを作る - sambaiz.net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;angular-cli&lt;/code&gt;は&lt;code&gt;@angular/cli&lt;/code&gt;に&lt;a href=&#34;https://github.com/angular/angular-cli/commit/601f9b38f8ce53052d623a4b8a2dc5bb30f9eee1&#34;&gt;変更された&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;routingを行うのでnewで&lt;code&gt;--routing&lt;/code&gt;オプションを付けている。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install -g @angular/cli&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@angular/cli: 1.0.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng new angular4-routing --routing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd angular4-routing/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat package.json | grep @angular/core&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;@angular/core&amp;#34;: &amp;#34;^4.0.0&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng serve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;** NG Live Development Server is running on http://localhost:4200 **     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--routing&lt;/code&gt;を付けたので&lt;code&gt;app-routing.module.ts&lt;/code&gt;が作成され、&lt;code&gt;app.module.ts&lt;/code&gt;にAppRoutingModuleが追加される。&#xA;&lt;code&gt;index.html&lt;/code&gt;のheadにはpushStateのroutingが働くように&#xA;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&#34;&gt;base&lt;/a&gt;要素が&#xA;&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/router.html#!%23base-href&#34;&gt;追加されている&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.jsのStream API</title>
      <link>https://www.sambaiz.net/article/96/</link>
      <pubDate>Sat, 22 Apr 2017 19:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/96/</guid>
      <description>&lt;h2 id=&#34;stream-apiとはhttpsnodejsorgdocsv790apistreamhtml&#34;&gt;&lt;a href=&#34;https://nodejs.org/docs/v7.9.0/api/stream.html&#34;&gt;Stream APIとは&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;NodeでStreamデータを扱うためのもの。&#xA;例えばサイズが大きいファイルの入出力をStreamとして扱うことでバッファを最小限にできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>tmuxのメモ</title>
      <link>https://www.sambaiz.net/article/95/</link>
      <pubDate>Fri, 21 Apr 2017 00:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/95/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tmux.github.io/&#34;&gt;https://tmux.github.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;セッションを立ち上げてその中で複数のウィンドウやペインからコマンドを実行できるやつ。&#xA;サーバーでの作業中にネットワークが切断されてしまってもセッションをattachすることで再開することができる。&#xA;ローカル環境でもコマンドキーでのウィンドウ作成やペインの分割、&#xA;複数のサーバーにsshで入って調査するようなときにペインの同時入力は便利。&#xA;もちろんターミナルを閉じてしまっても再開できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Firebaseをwebで使う(Hosting, Authentication, Realtime Database, Storage)</title>
      <link>https://www.sambaiz.net/article/94/</link>
      <pubDate>Sun, 16 Apr 2017 20:03:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/94/</guid>
      <description>&lt;h2 id=&#34;firebasehttpsfirebasegooglecomhljaとは&#34;&gt;&lt;a href=&#34;https://firebase.google.com/?hl=ja&#34;&gt;Firebase&lt;/a&gt;とは&lt;/h2&gt;&#xA;&lt;p&gt;GoogleのmBaaS。Android/iOSアプリの開発に使う認証、データストア、クラッシュレポート、分析、通知、広告などなど全部入りサービス。&#xA;今年のGoogleI/Oでも&lt;a href=&#34;https://events.google.com/io/schedule/?section=may-19&#34;&gt;毎時間のように&lt;/a&gt;&#xA;Firebaseのセッションがあって大分推している印象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQLのALTER TABLEのメモ</title>
      <link>https://www.sambaiz.net/article/93/</link>
      <pubDate>Sat, 15 Apr 2017 19:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/93/</guid>
      <description>&lt;p&gt;しばらく書かないとどういう構文だったか忘れてしまう。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/ja/alter-table.html&#34;&gt;MySQL :: MySQL 5.6 リファレンスマニュアル :: 13.1.7 ALTER TABLE 構文&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; t0 (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;BIGINT&lt;/span&gt; UNSIGNED AUTO_INCREMENT &lt;span style=&#34;color:#ff79c6&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c1 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c2 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; t2 (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;BIGINT&lt;/span&gt; UNSIGNED AUTO_INCREMENT &lt;span style=&#34;color:#ff79c6&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; t0 &lt;span style=&#34;color:#ff79c6&#34;&gt;RENAME&lt;/span&gt; t1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; t1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;COLUMN&lt;/span&gt; t2_id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;BIGINT&lt;/span&gt; UNSIGNED &lt;span style=&#34;color:#ff79c6&#34;&gt;AFTER&lt;/span&gt; id,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;COLUMN&lt;/span&gt; c3 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;INTEGER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;AFTER&lt;/span&gt; t2_id,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;MODIFY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;COLUMN&lt;/span&gt; c1 &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;COLUMN&lt;/span&gt; c2,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INDEX&lt;/span&gt; (c3),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;ADD&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FOREIGN&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; (t2_id) &lt;span style=&#34;color:#ff79c6&#34;&gt;REFERENCES&lt;/span&gt; t2(id) &lt;span style=&#34;color:#ff79c6&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;RESTRICT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;RESTRICT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysql&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SHOW&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; t1 \&lt;span style=&#34;color:#ff79c6&#34;&gt;G&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;***************************&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;. &lt;span style=&#34;color:#ff79c6&#34;&gt;row&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;***************************&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#ff79c6&#34;&gt;Table&lt;/span&gt;: t1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;Table&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t1&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;) unsigned &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t2_id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;) unsigned &lt;span style=&#34;color:#ff79c6&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;c3&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;c1&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;c3&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;c3&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t2_id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t2_id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;CONSTRAINT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t1_ibfk_1&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FOREIGN&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t2_id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;REFERENCES&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t2&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;DELETE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;RESTRICT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;UPDATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;RESTRICT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) ENGINE&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;InnoDB &lt;span style=&#34;color:#ff79c6&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;utf8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;row&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;00&lt;/span&gt; sec)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; t1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INDEX&lt;/span&gt; c3,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;FOREIGN&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; t1_ibfk_1,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INDEX&lt;/span&gt; t2_id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mysql&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SHOW&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; t1 \&lt;span style=&#34;color:#ff79c6&#34;&gt;G&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;***************************&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;. &lt;span style=&#34;color:#ff79c6&#34;&gt;row&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;***************************&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#ff79c6&#34;&gt;Table&lt;/span&gt;: t1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;Create&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;Table&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t1&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;) unsigned &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;t2_id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;bigint&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;) unsigned &lt;span style=&#34;color:#ff79c6&#34;&gt;DEFAULT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;c3&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;c1&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;KEY&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;id&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) ENGINE&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;InnoDB &lt;span style=&#34;color:#ff79c6&#34;&gt;DEFAULT&lt;/span&gt; CHARSET&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;utf8&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;row&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;00&lt;/span&gt; sec)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Unityのパーティクル設定(Shuriken)</title>
      <link>https://www.sambaiz.net/article/92/</link>
      <pubDate>Thu, 13 Apr 2017 17:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/92/</guid>
      <description>&lt;p&gt;Unityには&lt;a href=&#34;https://docs.unity3d.com/ja/540/Manual/class-ParticleSystem.html&#34;&gt;Shuriken&lt;/a&gt;というパーティクルシステムがある。&lt;/p&gt;&#xA;&lt;p&gt;Sphereを置いてParticle Systemを追加すると、Particleが出始める。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/92-particle-1.png&#34; alt=&#34;Particleの初期状態&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;モジュール&#34;&gt;モジュール&lt;/h2&gt;&#xA;&lt;p&gt;設定項目が多いためモジュールに分かれている。ひとまずデフォルトで有効になっている&lt;/p&gt;</description>
    </item>
    <item>
      <title>godocのメモ</title>
      <link>https://www.sambaiz.net/article/91/</link>
      <pubDate>Wed, 05 Apr 2017 22:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/91/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/godoc&#34;&gt;https://godoc.org/golang.org/x/tools/cmd/godoc&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;コメントからドキュメントを生成する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ godoc cmd&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;fmt Printf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Printf&lt;/span&gt;(format &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, a &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) (n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Printf formats according to a format specifier and writes to standard&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    output. It returns the number of bytes written and &lt;span style=&#34;color:#8be9fd&#34;&gt;any&lt;/span&gt; write &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    encountered.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ godoc &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;src cmd&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;fmt Printf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Printf formats according to a format specifier and writes to standard output.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// It returns the number of bytes written and any write error encountered.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Printf&lt;/span&gt;(format &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;, a &lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{}) (n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;, err &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Fprintf&lt;/span&gt;(os.Stdout, format, a&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;記述対象の要素の名前から始まる、完全な文として&lt;a href=&#34;https://blog.golang.org/godoc-documenting-go-code&#34;&gt;コメントを書く&lt;/a&gt;。&#xA;インデントすれば整形した文になり、&lt;code&gt;Bug(ユーザー名):&lt;/code&gt;から始めればバグセクションにまとめられる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nightmareでブラウザでの操作を自動化する</title>
      <link>https://www.sambaiz.net/article/90/</link>
      <pubDate>Wed, 29 Mar 2017 23:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/90/</guid>
      <description>&lt;p&gt;最近、&lt;a href=&#34;http://postwash.net/&#34;&gt;POSTWASH&lt;/a&gt;という洗濯代行サービスを使っている。&#xA;専用のカバンに詰めて集荷にきた人に渡すと、きれいに畳まれた洗濯ものが届く便利なサービスだ。&#xA;注文時にはWebのフォームから集荷、配達時間や支払い方法などを選ぶ必要があるんだが、毎週のことなのでこれを自動化してみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.jsでの文字コードの変換</title>
      <link>https://www.sambaiz.net/article/89/</link>
      <pubDate>Tue, 28 Mar 2017 21:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/89/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/bnoordhuis/node-iconv&#34;&gt;node-iconv&lt;/a&gt;を使う。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install iconv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SHIFT_JISからUTF-8への変換はこんな感じ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; Iconv  &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;iconv&amp;#39;&lt;/span&gt;).Iconv;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; before &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Buffer([&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x8b&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0x8d&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x8e&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0x4d&lt;/span&gt;, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x26&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x82&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0xb2&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#bd93f9&#34;&gt;0x94&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0xd1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; iconv &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Iconv(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SHIFT_JIS&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;UTF-8&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`before: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;before.toString(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;before.toString()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; after &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; iconv.convert(before);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`after:  &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;after.toString(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;after.toString()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;before: 8b8d8e4d2682b294d1 ���M&amp;amp;����&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;after:  e7899be79abf26e38194e9a3af 牛皿&amp;amp;ご飯&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文字コードによっては変換後に表せないことがある。&#xA;例えば、UTF-8からSHIFT_JISへの変換でサロゲートペア🍚を渡すと変換できず、エラーになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HoloLensのSharing</title>
      <link>https://www.sambaiz.net/article/88/</link>
      <pubDate>Sat, 25 Mar 2017 22:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/88/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;HoloToolkit-Unity v1.5.5.0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;サーバー&#34;&gt;サーバー&lt;/h2&gt;&#xA;&lt;p&gt;SharingService.exeを&#xA;&lt;a href=&#34;https://github.com/Microsoft/HoloToolkit-Unity/tree/v1.5.5.0/External/HoloToolkit/Sharing/Server&#34;&gt;ここ&lt;/a&gt;&#xA;からとってきて実行する。開発に使っているHoloToolkitと同じリリースバージョンのものを使う。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unixのパイプをmkfifo()で作ってdup2()で標準出力にコピーして書き込む</title>
      <link>https://www.sambaiz.net/article/87/</link>
      <pubDate>Fri, 24 Mar 2017 22:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/87/</guid>
      <description>&lt;h2 id=&#34;パイプとは&#34;&gt;パイプとは&lt;/h2&gt;&#xA;&lt;p&gt;Unixでプロセス間通信するためのもの。シェルで使う&lt;code&gt;|&lt;/code&gt;は無名パイプ。&#xA;&lt;code&gt;mkfifo()&lt;/code&gt;システムコールで名前付きパイプを作成でき、これを読み書きすることで任意のプロセス間でやりとりできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CuratorでElasticsearchの古いindexを削除する</title>
      <link>https://www.sambaiz.net/article/86/</link>
      <pubDate>Wed, 22 Mar 2017 00:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/86/</guid>
      <description>&lt;h2 id=&#34;curatorとはhttpswwwelasticcoguideenelasticsearchclientcuratorcurrentindexhtml&#34;&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html&#34;&gt;Curatorとは&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;indexやsnapshotを管理するのに使えるツール。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストールhttpswwwelasticcoguideenelasticsearchclientcuratorcurrentinstallationhtml&#34;&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/installation.html&#34;&gt;インストール&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;インストールする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/yum.repos.d/curator.repo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[curator-4]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;name=CentOS/RHEL 7 repository for Elasticsearch Curator 4.x packages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;baseurl=http://packages.elastic.co/curator/4/centos/7&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gpgcheck=1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enabled=1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum install -y elasticsearch-curator&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curator --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curator, version 4.2.6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;confighttpswwwelasticcoguideenelasticsearchclientcuratorcurrentconfigfilehtml&#34;&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/configfile.html&#34;&gt;config&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;configファイルを書く。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RxJSでRxをはじめる</title>
      <link>https://www.sambaiz.net/article/85/</link>
      <pubDate>Sat, 18 Mar 2017 21:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/85/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ReactiveX/rxjs&#34;&gt;https://github.com/ReactiveX/rxjs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;rxreactivexとはhttpreactivexiointrohtml&#34;&gt;&lt;a href=&#34;http://reactivex.io/intro.html&#34;&gt;Rx(ReactiveX)とは&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;非同期処理をうまく扱えるようにするライブラリ。いろんな言語で実装されている。&#xA;非同期処理の結果はObservableなStreamに流される。&#xA;ObservableはIteratableのように扱うことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FluentdとKPL(Kinesis Producer Library)でログをまとめてスループットを稼ぐ</title>
      <link>https://www.sambaiz.net/article/84/</link>
      <pubDate>Wed, 15 Mar 2017 23:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/84/</guid>
      <description>&lt;h2 id=&#34;kplkinesis-producer-libraryとは&#34;&gt;KPL(Kinesis Producer Library)とは&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/streams/latest/dev/developing-producers-with-kpl.html&#34;&gt;Developing Amazon Kinesis Streams Producers Using the Amazon Kinesis Producer Library - Amazon Kinesis Streams&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kinesisに送るとき、自動リトライしてくれたり、レコードをまとめてスループットを向上してくれたりするアプリケーション。Protobufを使っている。&#xA;普通に送るとどんなに小さくてもシャード*1000レコード/秒しか最大でPUTできないのを、KPLを使ってまとめることで増やすことができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C#のdelegateとevent</title>
      <link>https://www.sambaiz.net/article/83/</link>
      <pubDate>Sun, 12 Mar 2017 21:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/83/</guid>
      <description>&lt;h2 id=&#34;delegatehttpsmsdnmicrosoftcomja-jplibrary900fyy8easpx&#34;&gt;&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/900fyy8e.aspx&#34;&gt;delegate&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;カプセル化するためのdelegate(移譲)メソッドに使う型。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Converter&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; defaultConvert(&lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; num){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; num;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; Convert(&lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; Convert convert = defaultConvert;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; run(&lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; num){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; convert (num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;匿名メソッドやラムダ式を渡すこともできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UnityのMaterial</title>
      <link>https://www.sambaiz.net/article/82/</link>
      <pubDate>Sat, 11 Mar 2017 20:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/82/</guid>
      <description>&lt;h2 id=&#34;materialとshaderとtexturehttpsdocsunity3dcom550documentationmanualshadershtml&#34;&gt;&lt;a href=&#34;https://docs.unity3d.com/550/Documentation/Manual/Shaders.html&#34;&gt;MaterialとShaderとTexture&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Materialは表面がどのようにレダリングされるかを定義するもの。&#xA;Shaderを指定し、Textureなどのパラメーターを設定する。&lt;/p&gt;&#xA;&lt;p&gt;Shaderは光と、Materialの設定から、ピクセルの色を計算するスクリプト。&#xA;大体&lt;a href=&#34;https://docs.unity3d.com/550/Documentation/Manual/shader-StandardShader.html&#34;&gt;Standard Shader&lt;/a&gt;&#xA;で事足りるらしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UnityのUI</title>
      <link>https://www.sambaiz.net/article/81/</link>
      <pubDate>Wed, 08 Mar 2017 16:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/81/</guid>
      <description>&lt;h2 id=&#34;canvashttpsdocsunity3dcomja540scriptreferencecanvashtml&#34;&gt;&lt;a href=&#34;https://docs.unity3d.com/ja/540/ScriptReference/Canvas.html&#34;&gt;Canvas&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;UI要素を配置するための領域。&lt;/p&gt;&#xA;&lt;h3 id=&#34;rendermodehttpsdocsunity3dcomjp540manualuicanvashtml&#34;&gt;&lt;a href=&#34;https://docs.unity3d.com/jp/540/Manual/UICanvas.html&#34;&gt;renderMode&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Overlay: スクリーンに対してオーバーレイするように表示&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Camera: Cameraから指定した距離(planeDistance)離れた前方に表示&lt;/p&gt;</description>
    </item>
    <item>
      <title>UnityのTransform</title>
      <link>https://www.sambaiz.net/article/80/</link>
      <pubDate>Tue, 07 Mar 2017 02:11:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/80/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/jp/current/ScriptReference/Transform.html&#34;&gt;https://docs.unity3d.com/jp/current/ScriptReference/Transform.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;オブジェクトの位置、スケール、回転を保持する。親子関係を持つ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;position&#34;&gt;Position&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.unity3d.com/jp/540/ScriptReference/Transform-position.html&#34;&gt;position&lt;/a&gt;がワールド空間の、&#xA;&lt;a href=&#34;https://docs.unity3d.com/jp/540/ScriptReference/Transform-localPosition.html&#34;&gt;localPosition&lt;/a&gt;&#xA;が親から見た相対的なローカル空間の位置。localPositionの1unitはscaleに依存する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moment.jsでNode.jsのDateを任意のフォーマットの文字列にする</title>
      <link>https://www.sambaiz.net/article/79/</link>
      <pubDate>Mon, 06 Mar 2017 20:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/79/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://momentjs.com/&#34;&gt;Moment.js&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;相対時間(&lt;code&gt;5 years ago&lt;/code&gt;)を出したり、日付の計算(&lt;code&gt;add(3, &#39;days&#39;)&lt;/code&gt;)もできる便利なライブラリ。&#xA;ブラウザでも使える。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install moment&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; moment &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;moment&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; jst &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; now &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; moment().utcOffset(jst).format(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;YYYY-MM-DD HH:mm:ss.SSSZ&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console.log(now);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ TZ=Africa/Ouagadougou node main.js&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;mutableなのでadd()などの操作で元の値が変わってしまうのに注意。&#xA;変わると困る場合clone()する必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unityと.NETとMono</title>
      <link>https://www.sambaiz.net/article/78/</link>
      <pubDate>Sun, 05 Mar 2017 18:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/78/</guid>
      <description>&lt;p&gt;.NETとかよくわからなかったのでまとめてみた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;net-framework&#34;&gt;.NET Framework&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/.NET_Framework&#34;&gt;.NET Framework - Wikipedia&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Microsoftが開発したアプリケーション開発、実行環境。&lt;/p&gt;&#xA;&lt;p&gt;各言語のコンパイラによって言語、環境によらない共通の中間言語(CIL, Common Intermediate Language)バイナリ(exeやdll)に変換し、&#xA;実行時に共通言語基盤(CLI, Common Language Infrastructure)の仮想実行システム(VES)が環境依存の機械語を動的に生成(JIT, Just in time)する。&#xA;CLIの仕様はECMAで標準化されていて、Microsoftが実装したCLIが共通言語ランタイム(CLR)。Windowsでしか動かない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Elasticsearchで期間ごとの集計値を出す</title>
      <link>https://www.sambaiz.net/article/77/</link>
      <pubDate>Sun, 05 Mar 2017 01:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/77/</guid>
      <description>&lt;p&gt;Bucket(SQLでいうGROUP BY)にまとめて(Bucket Aggreagtion)、集計(Metric Aggregation)する。&lt;/p&gt;&#xA;&lt;p&gt;使うデータは&lt;a href=&#34;https://www.sambaiz.net/article/76/&#34;&gt;作ったツール&lt;/a&gt;で生成したこんなの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一定間隔でjsonデータを作って送り続けるCLIツールを作った</title>
      <link>https://www.sambaiz.net/article/76/</link>
      <pubDate>Sat, 04 Mar 2017 23:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/76/</guid>
      <description>&lt;p&gt;Elasticsearchにリアルタイムなテストデータを投入するために、一定間隔でjsonを作って送り続けるCLIツールを作った。Go製。&#xA;&lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;urfave/cli&lt;/a&gt;を使った。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sambaiz/sendjson&#34;&gt;sambaiz/sendjson&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>H2OでHTTPS-&gt;HTTPのリバースプロキシを立てる</title>
      <link>https://www.sambaiz.net/article/75/</link>
      <pubDate>Thu, 02 Mar 2017 20:50:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/75/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/cubicdaiya/items/235777dc401ec419b14e&#34;&gt;良くチューニングされたNginxと同じくらい速い&lt;/a&gt;と&#xA;評判のHTTP/2サーバー&lt;a href=&#34;https://h2o.examp1e.net/&#34;&gt;H2O&lt;/a&gt;でリバースプロキシを立ててみる。&#xA;HTTP/2だけではなく1.xにも対応しているので古い環境などでも大丈夫。&lt;/p&gt;&#xA;&lt;p&gt;設定は&#xA;&lt;a href=&#34;https://github.com/h2o/h2o/wiki/Reverse-Proxy&#34;&gt;Reverse Proxy&lt;/a&gt;と&#xA;&lt;a href=&#34;https://github.com/h2o/h2o/wiki/redirect-HTTP-to-HTTPS&#34;&gt;HTTP to HTTPS&lt;/a&gt;の&#xA;サンプルをもとにして書いた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goroutineの数をworkerで抑制する</title>
      <link>https://www.sambaiz.net/article/74/</link>
      <pubDate>Mon, 27 Feb 2017 23:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/74/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/61/&#34;&gt;Goのnet/httpとKeep-Alive - sambaiz.net&lt;/a&gt;でやったように、&#xA;あるエンドポイントに連続してGoroutineでリクエストを投げると、リクエスト数を増やしたときにタイムアウトが頻発するようになった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdでKinesis Streamsに送ってLambdaで読んでS3に保存する</title>
      <link>https://www.sambaiz.net/article/73/</link>
      <pubDate>Sun, 26 Feb 2017 18:56:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/73/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/aws-fluent-plugin-kinesis&#34;&gt;aws-fluent-plugin-kinesis&lt;/a&gt;でKinesis Streamsに送り、Lambdaで読んでS3に保存する。&#xA;要するにFirehoseのようなことをやりたいのだけれどTokyoリージョンにまだ来ないので自分でやる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWSのAssumeRole</title>
      <link>https://www.sambaiz.net/article/72/</link>
      <pubDate>Sat, 25 Feb 2017 20:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/72/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/IAM/latest/UserGuide/id_credentials_temp.html&#34;&gt;AWS Security Token Service&lt;/a&gt;による、&#xA;RoleArn(&lt;code&gt;arn:aws:iam::&amp;lt;account id&amp;gt;:role/&amp;lt;role name&amp;gt;&lt;/code&gt;)から一時的なCredentialを取得する仕組み。&#xA;前もって発行したAPIキーとは違い、有効期限が存在するため続けて呼ぶ場合は失効する前に再発行する必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElasticsearchのCircuit Breaker</title>
      <link>https://www.sambaiz.net/article/71/</link>
      <pubDate>Fri, 24 Feb 2017 21:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/71/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/52/&#34;&gt;ElasticsearchをDockerで動かしてGrafanaで可視化する - sambaiz.net&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ESに送られるデータの量が増えてくるとGrafanaのDashboardにグラフが表示されなくなってしまった。&#xA;表示されたエラーはこういうの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>crontabのメモ</title>
      <link>https://www.sambaiz.net/article/70/</link>
      <pubDate>Fri, 24 Feb 2017 21:40:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/70/</guid>
      <description>&lt;p&gt;各ユーザーごとのcron設定。&lt;code&gt;crontab -e&lt;/code&gt;でも編集できるが、間違えて&lt;code&gt;-r&lt;/code&gt;にすると全部消えてしまうのでこういう風に一旦取り出してから編集すると安全。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookieのメモ</title>
      <link>https://www.sambaiz.net/article/69/</link>
      <pubDate>Wed, 22 Feb 2017 20:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/69/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;レスポンスに&lt;code&gt;Set-Cookie&lt;/code&gt;ヘッダーが含まれていればブラウザはcookieに保存する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP/1.0 200 OK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Content-type: text/html&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set-Cookie: yummy_cookie=choco&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Set-Cookie: tasty_cookie=strawberry&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;リクエスト時には&lt;code&gt;Cookie&lt;/code&gt;ヘッダーにcookieを入れて送る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ELBのスケーリングとsurge queue</title>
      <link>https://www.sambaiz.net/article/68/</link>
      <pubDate>Tue, 21 Feb 2017 19:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/68/</guid>
      <description>&lt;p&gt;バックエンドだけではなくELB自体もスケーリングし、内部node数はdigで調べることができる。&#xA;このnode数は自分ではコントロールできず、基本的に意識することはない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kinesis Streams/Firehose/Analyticsを試す</title>
      <link>https://www.sambaiz.net/article/67/</link>
      <pubDate>Mon, 20 Feb 2017 21:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/67/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/jp/kinesis/&#34;&gt;https://aws.amazon.com/jp/kinesis/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;リアルタイムのストリーミングデータを扱うサービス群。&#xA;いまのところTokyoリージョンではKinesis Streamsしか使えない。&lt;/p&gt;&#xA;&lt;h3 id=&#34;kinesis-firehosehttpsawsamazoncomjpkinesisfirehose&#34;&gt;&lt;a href=&#34;https://aws.amazon.com/jp/kinesis/firehose/&#34;&gt;Kinesis Firehose&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;AWSのデータストアに送るストリーム。自分でデータを読む処理を書かなくてよく、スケーリングも勝手にやってくれるので簡単に使える。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdのmonitor_agentのデータをGoでGoogle Stackdriverに送って監視する</title>
      <link>https://www.sambaiz.net/article/66/</link>
      <pubDate>Sun, 19 Feb 2017 23:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/66/</guid>
      <description>&lt;h2 id=&#34;fluentdのmonitor_agenthttpdocsfluentdorgv012articlesmonitoring&#34;&gt;&lt;a href=&#34;http://docs.fluentd.org/v0.12/articles/monitoring&#34;&gt;fluentdのmonitor_agent&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;メトリクスをjsonで返すAPIを提供する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type monitor_agent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bind 0.0.0.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  port 24220&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curl localhost:&lt;span style=&#34;color:#bd93f9&#34;&gt;24220&lt;/span&gt;/api/plugins.json | jq&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;plugins&amp;#34;&lt;/span&gt;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;plugin_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object:3f8590d8c250&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;plugin_category&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;forward&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;forward&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;24222&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;bind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;output_plugin&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;retry_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;plugin_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object:3f8590d894c4&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;plugin_category&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;monitor_agent&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;monitor_agent&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;bind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0.0.0.0&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;port&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;24220&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;output_plugin&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;retry_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;plugin_id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object:3f8590dc1f2c&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;plugin_category&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;output&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;@type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/var/log/td-agent/hoge.log&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;buffer_path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/var/log/td-agent/hoge.log.*&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;output_plugin&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;buffer_queue_length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;buffer_total_queued_size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;retry_count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これをもとにStackdriverで異常を検知できるようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのselectの中断処理(close, context)</title>
      <link>https://www.sambaiz.net/article/65/</link>
      <pubDate>Thu, 16 Feb 2017 20:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/65/</guid>
      <description>&lt;h2 id=&#34;closechan&#34;&gt;close(chan)&lt;/h2&gt;&#xA;&lt;p&gt;closeしたチャネルを読むとゼロ値になるので、selectで待っているやつにまとめて送れる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;done &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;wg &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(sync.WaitGroup)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;waitTillDone&lt;/span&gt;(wg, done)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;waitTillDone&lt;/span&gt;(wg, done)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// こんなことしなくていい&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;// done &amp;lt;- true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;// done &amp;lt;- true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;close&lt;/span&gt;(done)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Wait&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;waitTillDone&lt;/span&gt;(wg &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;sync.WaitGroup, done &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;-&lt;/span&gt;done:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v) &lt;span style=&#34;color:#6272a4&#34;&gt;// false (ゼロ値)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;wg.&lt;span style=&#34;color:#50fa7b&#34;&gt;Done&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;contexthttpsgodocorggolangorgxnetcontext&#34;&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;context&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;key-valueの値を渡せるほかにキャンセルやタイムアウトの仕組みをもつ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentd自身のログを拾う</title>
      <link>https://www.sambaiz.net/article/64/</link>
      <pubDate>Tue, 14 Feb 2017 21:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/64/</guid>
      <description>&lt;p&gt;fluentdは自身のログも&lt;code&gt;fluent.error&lt;/code&gt;のようなタグでイベントとして流す。&lt;/p&gt;&#xA;&lt;p&gt;バッファを0にして意図的にエラーを発生させてみる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;source&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type forward&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  port &lt;span style=&#34;color:#bd93f9&#34;&gt;24224&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bind &lt;span style=&#34;color:#bd93f9&#34;&gt;0.0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;source&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# throw away&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;match fluent&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;info&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type null&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;match&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;match fluent&lt;span style=&#34;color:#ff79c6&#34;&gt;.**&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type stdout&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;match&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# error!&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;match &lt;span style=&#34;color:#ff79c6&#34;&gt;**&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type file&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  path &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;var&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;td&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;agent&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;hoge&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;log&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buffer_chunk_limit &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  buffer_queue_limit &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;match&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;すると、こんなのがtd-agent.logに出力される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでDynamoDBを使う</title>
      <link>https://www.sambaiz.net/article/63/</link>
      <pubDate>Sun, 12 Feb 2017 23:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/63/</guid>
      <description>&lt;h2 id=&#34;テーブルを作成する&#34;&gt;テーブルを作成する&lt;/h2&gt;&#xA;&lt;h3 id=&#34;プライマリキー&#34;&gt;プライマリキー&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/GuidelinesForTables.html&#34;&gt;テーブルの操作のガイドライン - Amazon DynamoDB&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;プライマリキーとしてパーティションキー(ハッシュキー)とオプションのソートキー(レンジキー)を設定する。&#xA;DynamoDBはこのパーティションキーに基づいて、複数のパーティションに分散して保存する。&#xA;テーブルにプロビジョニングされたスループット性能はパーティション間で均等に使われるので、&#xA;ソートキーを設定する場合にこれを最大限に活用するためには、&#xA;あるパーティションにリクエストが集中しないよう、パーティションキーに特定の値ばかり集中しないようなフィールドを&#xA;選ぶ必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Elasticsearchのmapping</title>
      <link>https://www.sambaiz.net/article/62/</link>
      <pubDate>Thu, 09 Feb 2017 21:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/62/</guid>
      <description>&lt;p&gt;Dynamic mappingがあるので、自分で設定しなくてもデータは入るが、&#xA;自分でやるとindexやanalyzerなどの設定が詳細にできるし、意図しないmappingを避けることもできる。&#xA;バージョンは5.2。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのnet/httpとKeep-Alive</title>
      <link>https://www.sambaiz.net/article/61/</link>
      <pubDate>Tue, 07 Feb 2017 22:42:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/61/</guid>
      <description>&lt;p&gt;Keep-AliveするとTCPコネクションを使い回し、名前解決やコネクション(3 way handshake)を毎回行わなくてよくなる。&#xA;Goの&lt;code&gt;net/http&lt;/code&gt;ではデフォルトでKeep-Aliveが&#xA;&lt;a href=&#34;https://github.com/golang/go/blob/d986daec1375527ef78cd59d81d42be7406a9803/src/net/http/transport.go#L129&#34;&gt;有効になっている&lt;/a&gt;が、&#xA;全体と同一ホストでそれぞれKeep-Aliveするコネクション数が制限される。&#xA;これらの値は&lt;a href=&#34;https://github.com/golang/go/blob/964639cc338db650ccadeafb7424bc8ebb2c0f6c/src/net/http/client.go#L36&#34;&gt;Client&lt;/a&gt;のTransportが持っていて、&#xA;これがnullだと&lt;a href=&#34;https://github.com/golang/go/blob/964639cc338db650ccadeafb7424bc8ebb2c0f6c/src/net/http/transport.go#L39&#34;&gt;DefaultTransport&lt;/a&gt;が参照されるので、意識しなければこの値が使われる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iftopでネットワークの帯域を見る</title>
      <link>https://www.sambaiz.net/article/60/</link>
      <pubDate>Tue, 07 Feb 2017 20:30:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/60/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum install --enablerepo=epel iftop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ iftop -f &amp;#34;not dst net 10.0.0.0/8&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-i eth0&lt;/code&gt;のようにしてインタフェースを指定し、&lt;code&gt;-f&lt;/code&gt;でフィルタをかけられる。フィルタの詳細は&lt;code&gt;man pcap-filter&lt;/code&gt;で。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vmstatのメモ</title>
      <link>https://www.sambaiz.net/article/59/</link>
      <pubDate>Mon, 06 Feb 2017 22:45:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/59/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ vmstat 間隔(秒)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu-----&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 0  0      0 118588  80388 2516284    0    0     2    77  141   85  1  0 98  0  0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;procs&#34;&gt;procs&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;r: 実行待ちプロセス数。CPUの処理が追いついていない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EC2のインスタンスストア</title>
      <link>https://www.sambaiz.net/article/58/</link>
      <pubDate>Mon, 06 Feb 2017 21:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/58/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/InstanceStorage.html&#34;&gt;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/InstanceStorage.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;EC2ではインスタンスタイプによってはEBSに加えてインスタンスストアが使える。しかも追加料金なし。&#xA;対象はストレージが&amp;quot;EBSのみ&amp;quot;でないもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HoloLensでGaze, Click, Hold, Voiceイベントを拾う</title>
      <link>https://www.sambaiz.net/article/57/</link>
      <pubDate>Sun, 05 Feb 2017 20:01:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/57/</guid>
      <description>&lt;p&gt;こんなの。SparitalMappingを有効にしているので球が床で止まっている。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.sambaiz.net/images/57.png&#34; alt=&#34;こんなの&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/wQLn_SO9Ics&#34;&gt;動画&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/HoloToolkit-Unity&#34;&gt;HoloToolKit&lt;/a&gt;&#xA;のインタフェースを実装することでイベントを拾えるようになっている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HoloLensの開発を始める</title>
      <link>https://www.sambaiz.net/article/56/</link>
      <pubDate>Sat, 04 Feb 2017 21:28:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/56/</guid>
      <description>&lt;h2 id=&#34;hololensでのアプリケーション&#34;&gt;HoloLensでのアプリケーション&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/holographic/app_model&#34;&gt;https://developer.microsoft.com/en-us/windows/holographic/app_model&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ある点を見るGazeと指で選択するGesture、声で入力するVoiceで操作する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.microsoft.com/en-us/windows/holographic/hololens_shell_overview&#34;&gt;HoloLens shell&lt;/a&gt;&#xA;では壁などにタイルを配置することでアプリケーションが起動する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdのrecord_transformerでログを加工する</title>
      <link>https://www.sambaiz.net/article/55/</link>
      <pubDate>Fri, 03 Feb 2017 21:14:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/55/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://docs.fluentd.org/v0.12/articles/filter_record_transformer&#34;&gt;http://docs.fluentd.org/v0.12/articles/filter_record_transformer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;追加したり、編集したり、削除したりできるフィルタ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type forward&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  port 24224&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bind 0.0.0.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;filter hoge.log&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type record_transformer&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  enable_ruby&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  auto_typecast true&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  remove_keys b,d&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;record&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    what_is_tag ${tag}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    what_is_a ${record[&amp;#34;a&amp;#34;]}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    what_is_c_of_b_add_1 ${record[&amp;#34;b&amp;#34;][&amp;#34;c&amp;#34;] + 1}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/record&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/filter&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;match hoge.log&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type stdout&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/match&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この例だとタグを値に持つ&amp;quot;what_is_tag&amp;quot;、aを値に持つ&amp;quot;what_is_a&amp;quot;、b.cの値に1を足す&amp;quot;what_is_c_of_b_add_1&amp;quot;が追加され、&#xA;bとdが削除される。一旦まっさらにして入れるものだけを指定することもできる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdでElasticsearchに送る</title>
      <link>https://www.sambaiz.net/article/54/</link>
      <pubDate>Wed, 01 Feb 2017 21:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/54/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/uken/fluent-plugin-elasticsearch&#34;&gt;uken/fluent-plugin-elasticsearch&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;必要なものをいれていく。Amazon LinuxのAMIから。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Failed to build gem native extension.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum install -y ruby-devel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;serverengine requires Ruby version &amp;gt;= 2.1.0.&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rbenv/rbenv&#34;&gt;rbenv&lt;/a&gt;でバージョンを上げる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; git clone https:&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt;github&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;rbenv&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;rbenv&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;git &lt;span style=&#34;color:#ff79c6&#34;&gt;~/.&lt;/span&gt;rbenv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; cd &lt;span style=&#34;color:#ff79c6&#34;&gt;~/.&lt;/span&gt;rbenv &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; src&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;configure &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;C src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; echo &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;export PATH=&amp;#34;$HOME/.rbenv/bin:$PATH&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;~/.&lt;/span&gt;bash_profile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;~/.&lt;/span&gt;rbenv&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;bin&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;rbenv init&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; echo &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;eval &amp;#34;$(rbenv init -)&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;~/.&lt;/span&gt;bash_profile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; source &lt;span style=&#34;color:#ff79c6&#34;&gt;~/.&lt;/span&gt;bash_profile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; git clone https:&lt;span style=&#34;color:#ff79c6&#34;&gt;//&lt;/span&gt;github&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;rbenv&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;ruby&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;build&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;git &lt;span style=&#34;color:#ff79c6&#34;&gt;~/.&lt;/span&gt;rbenv&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;plugins&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;ruby&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;build&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rbenv -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rbenv 1.1.0-2-g4f8925a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Ruby install aborted due to missing extensions&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ yum install -y openssl-devel readline-devel zlib-devel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rbenv install -l&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.8.5-p113&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.8.5-p114&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.8.5-p115&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rbenv install 2.4.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rbenv global 2.4.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ruby -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-linux]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ td-agent-gem install fluent-plugin-elasticsearch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;td-agent.confはこんな感じ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのnet/http.Client.Doの内部実装をたどったメモ</title>
      <link>https://www.sambaiz.net/article/53/</link>
      <pubDate>Mon, 30 Jan 2017 20:55:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/53/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;io/ioutil&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; client = http.Client{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        req, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; http.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://example.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        resp, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; client.&lt;span style=&#34;color:#50fa7b&#34;&gt;Do&lt;/span&gt;(req)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;defer&lt;/span&gt; resp.Body.&lt;span style=&#34;color:#50fa7b&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        body, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; ioutil.&lt;span style=&#34;color:#50fa7b&#34;&gt;ReadAll&lt;/span&gt;(resp.Body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;string&lt;/span&gt;(body))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;&#xA;&lt;p&gt;TransportがTCPコネクションをキャッシュするのでClientは使い回すべき。複数のgoroutineでコンカレントに使っても大丈夫。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ElasticsearchをDockerで動かしてGrafanaで可視化する</title>
      <link>https://www.sambaiz.net/article/52/</link>
      <pubDate>Sun, 29 Jan 2017 17:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/52/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&#34;&gt;https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;vm.max_map_count&#xA;(&lt;a href=&#34;http://www.atmarkit.co.jp/flinux/special/proctune/proctune02b.html&#34;&gt;バーチャルメモリにマッピングできる最大ページ数&lt;/a&gt;)&#xA;を262144以上にする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sysctl vm.max_map_count&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ grep vm.max_map_count /etc/sysctl.conf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vm.max_map_count=262144&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# sysctl -w vm.max_map_count=262144&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;30日トライアル後、有償ライセンスが必要になるxpackのsecurity(旧sheild)がデフォルトで有効になっているのでfalseにしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fluentdのforward</title>
      <link>https://www.sambaiz.net/article/51/</link>
      <pubDate>Wed, 25 Jan 2017 22:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/51/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://docs.fluentd.org/articles/high-availability#network-topology&#34;&gt;td-agent間でログをやりとりするとき&lt;/a&gt;&#xA;に使われるforwardについて。内部では&lt;a href=&#34;http://docs.fluentd.org/articles/in_forward#protocol&#34;&gt;MessagePackを使っている&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;forward-input&#34;&gt;forward input&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://docs.fluentd.org/articles/in_forward&#34;&gt;http://docs.fluentd.org/articles/in_forward&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;受け取る側。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type forward&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  port 24224&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bind 0.0.0.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/source&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;match **&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  @type stdout&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/match&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;/etc/init.d/td-agent restart&lt;/code&gt;してfluent-catで送ってみる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのinterface/structのembedding</title>
      <link>https://www.sambaiz.net/article/50/</link>
      <pubDate>Wed, 18 Jan 2017 01:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/50/</guid>
      <description>&lt;p&gt;Goには継承が存在しないが、structを埋めることで透過的に処理を委譲することができる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/effective_go.html#embedding&#34;&gt;https://golang.org/doc/effective_go.html#embedding&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;挙動&#34;&gt;挙動&lt;/h2&gt;&#xA;&lt;h3 id=&#34;interfaceにinterfaceをembed&#34;&gt;interfaceにinterfaceをembed&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; I &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Hoge&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; J &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#50fa7b&#34;&gt;Fuga&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; K &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;I&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;J&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;interface KはIとJを合わせたものになる。IとJに重複する関数がある場合はエラーになる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのpanicとrecover</title>
      <link>https://www.sambaiz.net/article/49/</link>
      <pubDate>Tue, 17 Jan 2017 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/49/</guid>
      <description>&lt;h2 id=&#34;panic&#34;&gt;panic&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/builtin/#panic&#34;&gt;https://golang.org/pkg/builtin/#panic&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;panicは現在のgoroutineの通常の実行を停止する組み込み関数。&#xA;&lt;a href=&#34;https://github.com/golang/go/blob/b2a3b54b9520ce869d79ac8bce836a540ba45d09/src/runtime/panic.go#L26&#34;&gt;index out of range&lt;/a&gt;や&#xA;&lt;a href=&#34;https://github.com/golang/go/blob/b2a3b54b9520ce869d79ac8bce836a540ba45d09/src/runtime/panic.go#L61&#34;&gt;invalid memory address or nil pointer dereference&lt;/a&gt;&#xA;のときなどでも呼ばれる。&lt;/p&gt;&#xA;&lt;p&gt;deferを実行して呼び出し元に戻り、panicの実行-&amp;gt;deferの実行-&amp;gt;呼び出し元に戻る、を繰り返して&#xA;最後まで戻ったらプログラムを終了し、panicに渡した引数と共にエラーをレポートする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OAuth2.0のメモ</title>
      <link>https://www.sambaiz.net/article/48/</link>
      <pubDate>Sun, 08 Jan 2017 02:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/48/</guid>
      <description>&lt;h2 id=&#34;認可authorizationと認証authentication&#34;&gt;認可(Authorization)と認証(Authentication)&lt;/h2&gt;&#xA;&lt;p&gt;それぞれAuthZ、AuthNとも書かれる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;認可: リソースへのアクセスを許可する&lt;/li&gt;&#xA;&lt;li&gt;認証: ユーザーが何者かを検証する&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;oauth-20&#34;&gt;OAuth 2.0&lt;/h2&gt;&#xA;&lt;p&gt;認可のプロトコル。&#xA;それによってアクセスできるようになったリソースの情報をもとに認証を行ったりすることもあるが、&#xA;以下に示すImplicit Flowでそれをやると他のサービスのトークンで他人に成りすませてしまう問題があるため、&#xA;認証する場合はOAuth 2.0ベースの認証プロトコルのOpenID Connectを使うべき。&#xA;その場合もトークンを取得するまでの流れはほとんどOAuth 2.0通りなのでフローを理解しておいて無駄はない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go testでベンチマークを取ってpprofで時間がかかっている箇所を調べる</title>
      <link>https://www.sambaiz.net/article/47/</link>
      <pubDate>Wed, 04 Jan 2017 23:58:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/47/</guid>
      <description>&lt;p&gt;この関数のベンチマークを取る。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; cal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;math/big&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; cache = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;big.Int{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;resetCache&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cache = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;big.Int{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Fibonacci&lt;/span&gt;(n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;big.Int {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; cache[n]; c &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;ret &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(big.Int)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;before &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; big.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewInt&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i &amp;lt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;tmp &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(big.Int).&lt;span style=&#34;color:#50fa7b&#34;&gt;Add&lt;/span&gt;(ret, before)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;before = ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ret = tmp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;cache[i] = ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;cache[n] = ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; ret&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;引数にtesting.Bを取る、Benchmarkから始まる関数を書いて、b.N回ループさせる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>汎用シリアライズ方法(MessagePack/Protocol Buffers/FlatBuffers)</title>
      <link>https://www.sambaiz.net/article/46/</link>
      <pubDate>Fri, 30 Dec 2016 18:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/46/</guid>
      <description>&lt;h2 id=&#34;messagepackhttpmsgpackorgとは&#34;&gt;&lt;a href=&#34;http://msgpack.org/&#34;&gt;MessagePack&lt;/a&gt;とは&lt;/h2&gt;&#xA;&lt;p&gt;JSONのように使うことができ、速くてサイズが小さい。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;compact&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;スキーマ&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;999&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;aaa&amp;#34;&lt;/span&gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のjson(61bytes)をMessagePack(45bytes)に変換したのがこれ。見やすいように改行している。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoogleのkvsライブラリLevelDBを使う</title>
      <link>https://www.sambaiz.net/article/45/</link>
      <pubDate>Sat, 24 Dec 2016 21:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/45/</guid>
      <description>&lt;h2 id=&#34;leveldbとは&#34;&gt;LevelDBとは&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/leveldb&#34;&gt;https://github.com/google/leveldb&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Googleが作った高速なkey-valueストレージライブラリ。&lt;/p&gt;&#xA;&lt;p&gt;ChromeのIndexedDBや&lt;a href=&#34;https://prometheus.io/docs/operating/storage/&#34;&gt;prometheus&lt;/a&gt;などで使われている。&lt;/p&gt;&#xA;&lt;h3 id=&#34;特徴httpsgithubcomgoogleleveldbfeatures&#34;&gt;&lt;a href=&#34;https://github.com/google/leveldb#features&#34;&gt;特徴&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Keyと任意のバイト配列のValue&lt;/li&gt;&#xA;&lt;li&gt;データはKeyでソートされる。ソートのための比較関数はオーバーライドできる。&lt;/li&gt;&#xA;&lt;li&gt;基本的な操作はPut, Get, Delete。&lt;/li&gt;&#xA;&lt;li&gt;複数の変更を一つのatomicなバッチで行える&lt;/li&gt;&#xA;&lt;li&gt;一環したデータのビューを取得するために、一時的なスナップショットを作成できる&lt;/li&gt;&#xA;&lt;li&gt;データを前にも後ろにもイテレーションできる&lt;/li&gt;&#xA;&lt;li&gt;データは&lt;a href=&#34;http://google.github.io/snappy/&#34;&gt;Snappy compression library&lt;/a&gt;で自動で圧縮される。&lt;/li&gt;&#xA;&lt;li&gt;ファイルシステムの操作など外部のアクティビティを仮想的なインタフェースを通して行うので、OSとのやりとりをカスタマイズできる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;制限httpsgithubcomgoogleleveldblimitations&#34;&gt;&lt;a href=&#34;https://github.com/google/leveldb#limitations&#34;&gt;制限&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SQLデータベースではない。リレーショナルなデータモデルは持てないし、SQLやインデックスにも対応していない。&lt;/li&gt;&#xA;&lt;li&gt;一度に一つのプロセスしかDBにアクセスできない。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;キャッシュhttpsrawgitcomgoogleleveldbmasterdocindexhtml&#34;&gt;&lt;a href=&#34;https://rawgit.com/google/leveldb/master/doc/index.html&#34;&gt;キャッシュ&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DBはファイルシステムのディレクトリに対応する名前を持ち、内容はそのディレクトリに保存される。&lt;/li&gt;&#xA;&lt;li&gt;各ファイルには圧縮したブロックが保存され、良く使うものについては非圧縮のブロックがキャッシュされる。&lt;/li&gt;&#xA;&lt;li&gt;ソートして隣接するキーは通常、同じブロックに配置される。ディスク転送とキャッシュはブロック単位。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;フィルタ&#34;&gt;フィルタ&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Getの際、不要なデータを読まなくていいようにフィルタ(Bloom Filter)を用いることができる。&lt;/li&gt;&#xA;&lt;li&gt;独自の比較関数(末尾のスペースを無視するなど)を使う場合、Bloom Filterを使うことができないことがあるので、その場合は独自のフィルタが必要。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;レベルhttpsrawgitcomgoogleleveldbmasterdocimplhtml&#34;&gt;&lt;a href=&#34;https://rawgit.com/google/leveldb/master/doc/impl.html&#34;&gt;レベル&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最近の更新はログファイルに保存される。これが決められたサイズ(デフォルトでは約4MB)に達すると、sorted table(sst)に変換され、新しいログファイルが生成される。&lt;/li&gt;&#xA;&lt;li&gt;現在のログファイルのコピーがメモリ(memtable)にも乗って読み取りで参照される。&lt;/li&gt;&#xA;&lt;li&gt;sstはキーによってソートされたエントリーを保存する。エントリーはキーの値か、削除マーカー。&lt;/li&gt;&#xA;&lt;li&gt;sstはレベルによってまとめられる。ログファイルから変換されると、特別なyoungレベル(level-0とも呼ばれる)に配置される。&lt;/li&gt;&#xA;&lt;li&gt;youngファイルの数があるしきい値(現在4つ)を超えると全てのyoungファイルを全てのlevel-1ファイルとマージし、新しいlevel-1ファイルを生成する(2MBごとに1ファイル)。&lt;/li&gt;&#xA;&lt;li&gt;youngレベルのファイルにはキーが重複していることがある。しかし、他のレベルでは重複しないキーの範囲がある。&lt;/li&gt;&#xA;&lt;li&gt;level-L(L&amp;gt;=1)のファイルの合計サイズが&lt;code&gt;10^L MB&lt;/code&gt;を超えたとき、level-Lのファイルと、level-(L+1)の全てのファイルをマージし、新しいlevel-(L+1)ファイルを生成する。&lt;/li&gt;&#xA;&lt;li&gt;これによって、バルク読み込み/書き込みのみを使い、コストが高いシークを最小限にして、youngレベルから大きいレベルに更新を徐々にマイグレーションすることができる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;動かしてみる&#34;&gt;動かしてみる&lt;/h2&gt;&#xA;&lt;p&gt;LevelDBのgo実装。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gvmでGoのバージョン管理</title>
      <link>https://www.sambaiz.net/article/44/</link>
      <pubDate>Tue, 20 Dec 2016 20:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/44/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/moovweb/gvm&#34;&gt;moovweb/gvm&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;必要なものはREADMEを見て入れる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ bash &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ source ${HOME}/.gvm/scripts/gvm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gvm install go1.7 -B&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gvm use go1.7&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go version go1.7 linux/amd64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;$GOPATH&lt;/code&gt;と&lt;code&gt;$GOROOT&lt;/code&gt;が書き変わる(&lt;code&gt;${HOME}/.gvm/pkgsets/go1.7/global/&lt;/code&gt;)ので注意。&lt;/p&gt;</description>
    </item>
    <item>
      <title>複数EC2インスタンスを立ち上げてvegetaで負荷試験する</title>
      <link>https://www.sambaiz.net/article/43/</link>
      <pubDate>Sun, 18 Dec 2016 20:52:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/43/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/tsenart/vegeta&#34;&gt;vegeta&lt;/a&gt;で負荷をかける。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インスタンスを立ち上げるスクリプト&#34;&gt;インスタンスを立ち上げるスクリプト&lt;/h2&gt;&#xA;&lt;p&gt;コードはここ。 &lt;a href=&#34;https://github.com/sambaiz/loadtest&#34;&gt;sambaiz/loadtest&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まずキーペアを作成し、EC2インスタンスを立ち上げて、全てのインスタンスが使えるようになるまで待つ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 create-key-pair --key-name LoadTestKeyPare --query &amp;#39;KeyMaterial&amp;#39; --output text &amp;gt; LoadTestKeyPare.pem&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod 400 LoadTestKeyPare.pem&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 run-instances --image-id $AMI_ID --count $INSTANCE_NUM --instance-type t2.micro --key-name LoadTestKeyPare --security-group-ids $SECURITY_GROUP_IDS --subnet-id $SUBNET_ID&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aws ec2 wait instance-status-ok --instance-ids $INSTANCE_IDS&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このAMIは事前にPackerでつくったもの。vegetaをインストールしてファイルディスクリプタの上限を増やしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSHポートフォワーディングする際のオプション</title>
      <link>https://www.sambaiz.net/article/42/</link>
      <pubDate>Sat, 17 Dec 2016 12:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/42/</guid>
      <description>&lt;p&gt;ローカルの8080番ポートへの通信をexample.com経由でexample2.comの80番ポートに向ける。&#xA;ローカルから対象サーバーに直接アクセスできない場合やポートが公開されてない場合に用いられる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ファイルディスクリプタの上限を増やす</title>
      <link>https://www.sambaiz.net/article/41/</link>
      <pubDate>Thu, 08 Dec 2016 21:36:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/41/</guid>
      <description>&lt;h2 id=&#34;ファイルディスクリプタとは&#34;&gt;ファイルディスクリプタとは&lt;/h2&gt;&#xA;&lt;p&gt;プロセスの外部とやりとりするための識別子。POSIXではint型で、0がstdin、1がstdout、2がstderrとなっている。&#xA;ファイルやデバイスに対する&lt;code&gt;open()&lt;/code&gt;や、&#xA;ネットワーク(INETドメインソケット)やホスト内(UNIXドメインソケット)で&#xA;通信するためのソケットを生成する&lt;code&gt;socket()&lt;/code&gt;などのシステムコールで割り当てられる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Angular2とangular-cliでTODOを作る</title>
      <link>https://www.sambaiz.net/article/40/</link>
      <pubDate>Mon, 05 Dec 2016 00:48:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/40/</guid>
      <description>&lt;p&gt;コード: &lt;a href=&#34;https://github.com/sambaiz/angular2-todo&#34;&gt;https://github.com/sambaiz/angular2-todo&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/40/images/run.gif&#34; width=&#34;598&#34; height=&#34;389&#34; alt=&#34;動いているところ&#34;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;h2 id=&#34;アプリケーションの作成と立ち上げ&#34;&gt;アプリケーションの作成と立ち上げ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular-cli&#34;&gt;angular-cli&lt;/a&gt;をインストールしてサーバーを立ち上げるまで。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ npm install angular-cli -g&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;angular-cli: 1.0.0-beta.21&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;node: 5.12.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;os: darwin x64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng new mytodo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd mytodo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng server&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http://localhost:4200/&lt;/p&gt;&#xA;&lt;h2 id=&#34;新しいコンポーネントを作る&#34;&gt;新しいコンポーネントを作る&lt;/h2&gt;&#xA;&lt;p&gt;新しいコンポーネントを作る。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ng g component todo-list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これでtodo-listディレクトリにコンポーネントクラスとテンプレートとCSS、テストとindexが出力される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenVPNサーバーPritunlをDockerで動かす</title>
      <link>https://www.sambaiz.net/article/39/</link>
      <pubDate>Fri, 02 Dec 2016 21:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/39/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://pritunl.com/&#34;&gt;Pritunl&lt;/a&gt;でVPNサーバーを立てる。&lt;/p&gt;&#xA;&lt;p&gt;Dockerfileはこんな感じ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/sambaiz/pritunl/&#34;&gt;https://hub.docker.com/r/sambaiz/pritunl/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-docker&#34; data-lang=&#34;docker&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; mongo:3.4&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;# https://docs.pritunl.com/docs/installation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;deb http://repo.pritunl.com/stable/apt jessie main&amp;#39;&lt;/span&gt; &amp;gt; /etc/apt/sources.list.d/pritunl.list &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    apt-key adv --keyserver hkp://keyserver.ubuntu.com --recv 7568D9BB55FF9E5287D586017AE645C0CF8E292A &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    apt-get --assume-yes update &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    apt-get --assume-yes upgrade &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&lt;/span&gt;    apt-get --assume-yes install pritunl iptables&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;EXPOSE&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; 80 443 12345/udp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CMD&lt;/span&gt; mongod --fork --logpath /data/db/mongod.log &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Setup Key:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;pritunl setup-key&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pritunl start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run -itd -p 80:80 -p 443:443 -p 12345:12345/udp --privileged sambaiz/pritunl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker logs &amp;lt;id&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Setup Key: ***********&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--privileged&lt;/code&gt;を付けているのはStart Server時にこれで失敗しないように。&lt;/p&gt;</description>
    </item>
    <item>
      <title>aws-sdk-goでs3にput/get</title>
      <link>https://www.sambaiz.net/article/38/</link>
      <pubDate>Wed, 30 Nov 2016 20:29:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/38/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/aws/aws-sdk-go&#34;&gt;aws-sdk-go&lt;/a&gt;でS3にputしてgetする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;package&lt;/span&gt; main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/aws/session&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;github.com/aws/aws-sdk-go/service/s3&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; REGION = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ap-northeast-1&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;const&lt;/span&gt; BUCKET_NAME = &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;faweijojio4f3e4&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;sess, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; session.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewSession&lt;/span&gt;(aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewConfig&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;WithRegion&lt;/span&gt;(REGION))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;svc &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; s3.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(sess)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;// put&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;data &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;BBBBBB&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;key &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;AAA.txt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;params &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;s3.PutObjectInput{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Bucket:        aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(BUCKET_NAME),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Key:           aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(key),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Body:          bytes.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewReader&lt;/span&gt;(data),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ContentLength: aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;Int64&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;int64&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;len&lt;/span&gt;(data))),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;ContentType:   aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text/plain&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; _, err = svc.&lt;span style=&#34;color:#50fa7b&#34;&gt;PutObject&lt;/span&gt;(params); err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;// bucket list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;keys &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;err = svc.&lt;span style=&#34;color:#50fa7b&#34;&gt;ListObjectsPages&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;s3.ListObjectsInput{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Bucket: aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(BUCKET_NAME),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(p &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;s3.ListObjectsOutput, last &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;) (shouldContinue &lt;span style=&#34;color:#8be9fd&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; _, obj &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;range&lt;/span&gt; p.Contents {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;keys = &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;append&lt;/span&gt;(keys, &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;obj.Key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;obj.Key)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(err.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#6272a4&#34;&gt;// get&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;resp, err2 &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; svc.&lt;span style=&#34;color:#50fa7b&#34;&gt;GetObject&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;s3.GetObjectInput{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Bucket: aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(BUCKET_NAME),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;Key:    aws.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(keys[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err2 &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(err2.&lt;span style=&#34;color:#50fa7b&#34;&gt;Error&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;buf &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;new&lt;/span&gt;(bytes.Buffer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;buf.&lt;span style=&#34;color:#50fa7b&#34;&gt;ReadFrom&lt;/span&gt;(resp.Body)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(keys[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; -&amp;gt; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; buf.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ AWS_ACCESS_KEY_ID=**** AWS_SECRET_ACCESS_KEY=**** go run main.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AAA.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbbb.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AAA.txt -&amp;gt; BBBBBB&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Goでstructをリフレクションしてcsvを出力する</title>
      <link>https://www.sambaiz.net/article/37/</link>
      <pubDate>Mon, 28 Nov 2016 21:29:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/37/</guid>
      <description>&lt;p&gt;こんなstructとデータがあったら、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Result &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;struct&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Name &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`col:&amp;#34;who&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Point &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; Result{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sam&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;フィールド名と、値、タグはrefrectで取れる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; Result{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sam&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;v &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; reflect.&lt;span style=&#34;color:#50fa7b&#34;&gt;ValueOf&lt;/span&gt;(x)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v.&lt;span style=&#34;color:#50fa7b&#34;&gt;Type&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;Field&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;).Name) &lt;span style=&#34;color:#6272a4&#34;&gt;// -&amp;gt; Name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v.&lt;span style=&#34;color:#50fa7b&#34;&gt;Type&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;Field&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;).Name) &lt;span style=&#34;color:#6272a4&#34;&gt;// -&amp;gt; Point&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v.&lt;span style=&#34;color:#50fa7b&#34;&gt;Field&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;).&lt;span style=&#34;color:#50fa7b&#34;&gt;Interface&lt;/span&gt;()) &lt;span style=&#34;color:#6272a4&#34;&gt;// -&amp;gt; sam&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v.&lt;span style=&#34;color:#50fa7b&#34;&gt;Field&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;).&lt;span style=&#34;color:#50fa7b&#34;&gt;Interface&lt;/span&gt;()) &lt;span style=&#34;color:#6272a4&#34;&gt;// -&amp;gt; 100&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v.&lt;span style=&#34;color:#50fa7b&#34;&gt;Type&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;Field&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;).Tag.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// -&amp;gt; who&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fmt.&lt;span style=&#34;color:#50fa7b&#34;&gt;Println&lt;/span&gt;(v.&lt;span style=&#34;color:#50fa7b&#34;&gt;Type&lt;/span&gt;().&lt;span style=&#34;color:#50fa7b&#34;&gt;Field&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;).Tag.&lt;span style=&#34;color:#50fa7b&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;col&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#6272a4&#34;&gt;// -&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;これらをencoding/csvで書く。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebVRを動かす</title>
      <link>https://www.sambaiz.net/article/36/</link>
      <pubDate>Wed, 16 Nov 2016 00:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/36/</guid>
      <description>&lt;h3 id=&#34;webvrとは&#34;&gt;WebVRとは&lt;/h3&gt;&#xA;&lt;p&gt;Webブラウザ上でVRアプリケーションを動かすためのAPI。&#xA;ヘッドマウントディスプレイの動きを3D空間上の動きに変換してくれる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/WebVR_API&#34;&gt;WebVR API - Web API インターフェイス | MDN&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>JVMのヒープ領域とFull GC</title>
      <link>https://www.sambaiz.net/article/35/</link>
      <pubDate>Mon, 14 Nov 2016 23:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/35/</guid>
      <description>&lt;h2 id=&#34;ヒープ領域&#34;&gt;ヒープ領域&lt;/h2&gt;&#xA;&lt;p&gt;動的に確保されるメモリの領域でJVMではNew領域とOld領域に分けられる。&#xA;ちなみに、ロードしたクラスやメソッドが入るヒープ領域はPermanent領域と呼ばれていたが&#xA;Java8からMetaspace領域に置き換えられネイティブメモリに乗るようになった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>API BlueprintでAPI仕様を書く</title>
      <link>https://www.sambaiz.net/article/34/</link>
      <pubDate>Thu, 10 Nov 2016 00:25:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/34/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://apiblueprint.org/&#34;&gt;API Blueprint&lt;/a&gt;というのはAPIの仕様を書くための言語で、&#xA;これを元にHTMLのドキュメントにしたり、モックサーバーを立てたりする&lt;a href=&#34;https://apiblueprint.org/tools.html&#34;&gt;ツール&lt;/a&gt;がある。&lt;/p&gt;&#xA;&lt;p&gt;最初にMetadataとして、API Blueprintのバージョンを書く。&lt;/p&gt;</description>
    </item>
    <item>
      <title>logrotateでログをローテーションする</title>
      <link>https://www.sambaiz.net/article/33/</link>
      <pubDate>Wed, 09 Nov 2016 22:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/33/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/Sirupsen/logrus&#34;&gt;logrus&lt;/a&gt;がローテーションする仕組みを持っていなかったので、&#xA;READMEに書いてあったlogrotateを使う。/etc/logrotate.dの中に設定ファイルを入れて、cronで回して使う。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FROM ubuntu:14.04&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ADD logrotate /etc/logrotate.d/app&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUN echo &amp;#34;/usr/sbin/logrotate /etc/logrotate.conf&amp;#34; &amp;gt; /etc/cron.daily/logrotate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;設定ファイルはこんな感じ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>td-agentをビルドしてfluentdのバージョンを上げる</title>
      <link>https://www.sambaiz.net/article/32/</link>
      <pubDate>Sun, 06 Nov 2016 11:17:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/32/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$td-agent --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;td-agent 0.12.26&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;td-agentって書いてあるが、これがfluentdのバージョンらしい。&lt;/p&gt;&#xA;&lt;p&gt;fluentdはv0.14から&lt;a href=&#34;http://www.fluentd.org/blog/fluentd-v0.14.0-has-been-released&#34;&gt;ナノ秒で時間を持つようになった。&lt;/a&gt;&#xA;ただ、現行のtd-agent(v2.3.2)は上の通り古いバージョンを使っている。&#xA;0.14になる&lt;a href=&#34;https://github.com/treasure-data/omnibus-td-agent/tree/td-agent-3&#34;&gt;td-agent-3&lt;/a&gt;はまだリリースされていないので、&#xA;自分でfluentdを&lt;a href=&#34;https://github.com/fluent/fluentd/releases/tag/v0.14.8&#34;&gt;v0.14.8&lt;/a&gt;に上げてビルドすることにした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>d3.jsで折れ線グラフを書くコードを読む</title>
      <link>https://www.sambaiz.net/article/31/</link>
      <pubDate>Thu, 03 Nov 2016 00:15:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/31/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://bl.ocks.org/mbostock/3883245&#34;&gt;http://bl.ocks.org/mbostock/3883245&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;CSSと&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;axis--x&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;path&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;none&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;line&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fill: &lt;span style=&#34;color:#ff79c6&#34;&gt;none&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  stroke: &lt;span style=&#34;color:#ff79c6&#34;&gt;steelblue&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  stroke-width: &lt;span style=&#34;color:#bd93f9&#34;&gt;1.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;グラフを書くsvgとd3.js。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;svg&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;960&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;500&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;svg&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://d3js.org/d3.v4.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; svg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; d3.select(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;svg&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    margin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {top&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;, right&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;, bottom&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;, left&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    width &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;svg.attr(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; margin.left &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; margin.right,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    height &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;svg.attr(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; margin.top &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; margin.bottom,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    g &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; svg.append(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;g&amp;#34;&lt;/span&gt;).attr(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;transform&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;translate(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; margin.left &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; margin.top &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;d3.select&lt;/code&gt;でsvg要素を選択。widthとheightを取得したり、中にg(グループ)を入れてtransformでmarginを作っている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mp4をエンコードしてMPEG-DASHにして再生する</title>
      <link>https://www.sambaiz.net/article/30/</link>
      <pubDate>Sun, 30 Oct 2016 23:51:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/30/</guid>
      <description>&lt;h2 id=&#34;mpeg-dashとは&#34;&gt;MPEG-DASHとは&lt;/h2&gt;&#xA;&lt;p&gt;HTTPで動画をストリーミングするための規格。似たようなのにAppleの独自規格であるHLSなどがある。&lt;/p&gt;&#xA;&lt;p&gt;サーバーはMPD(Media Presentation Description)ファイルと、セグメントに分けられた動画や音声ファイルを持っていて、&#xA;クライアントはMPDファイルをリクエストし、この内容をもとにセグメントをリクエストしていく。&lt;/p&gt;</description>
    </item>
    <item>
      <title>剣を振るVRゲームを作った</title>
      <link>https://www.sambaiz.net/article/29/</link>
      <pubDate>Sun, 30 Oct 2016 19:05:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/29/</guid>
      <description>&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/29/images/game.png&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/29/images/game_hu_aa0cac65496dacad.png&#34; width=&#34;480&#34; height=&#34;270&#34; alt=&#34;ゲーム画像&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Tlonh7D5UzY&#34;&gt;プレイ動画&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://vr.google.com/intl/ja_jp/cardboard/&#34;&gt;Cardboard&lt;/a&gt;にAndroidを入れて、&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/29/images/cardboard.jpg&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/29/images/cardboard_hu_cfd421e4e074619e.jpg&#34; width=&#34;480&#34; height=&#34;360&#34; alt=&#34;Cardboard&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;iPhoneをくくりつけた傘を動かすと、画面の剣も動くのでこれで敵を倒すゲーム。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/29/images/sword.jpg&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/29/images/sword_hu_846974dff9f7352e.jpg&#34; width=&#34;480&#34; height=&#34;360&#34; alt=&#34;iPhoneをくくりつけた傘&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;&#xA;&lt;h3 id=&#34;剣ios&#34;&gt;剣(iOS)&lt;/h3&gt;&#xA;&lt;p&gt;剣にくくりつけたiPhoneの傾きの値をUnity(Android)に送信している。&#xA;iOSはClassic Bluetoothを自由に使えないので、Androidと通信する場合はBLEを使う。&#xA;BLEは通常だと20byteしか一度に送れないので、これを超えないよう注意する必要がある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gcloudのアカウント切り替えとkubectlのcontext変更</title>
      <link>https://www.sambaiz.net/article/28/</link>
      <pubDate>Tue, 25 Oct 2016 20:29:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/28/</guid>
      <description>&lt;p&gt;いつも迷うのでまとめた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;gcloudのアカウント一覧と切り替え&#34;&gt;gcloudのアカウント一覧と切り替え&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud auth list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud config &lt;span style=&#34;color:#8be9fd&#34;&gt;set&lt;/span&gt; account &lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#ff79c6&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;configにprojectなども設定している場合はconfig自体を作成して切り替えた方が楽。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud config configurations create &amp;lt;name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud config configurations activate &amp;lt;name&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud config list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Your active configuration is: [&amp;lt;name&amp;gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud config set account &amp;lt;accout&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud config set project &amp;lt;project&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kubectlのcontext変更&#34;&gt;kubectlのcontext変更&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config current-context&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config view # contexts&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ kubectl config use-context minikube&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>UnityでAndroidのBLEを使うネイティブプラグインを作る</title>
      <link>https://www.sambaiz.net/article/27/</link>
      <pubDate>Sun, 23 Oct 2016 20:39:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/27/</guid>
      <description>&lt;p&gt;UnityからBLEを使うためのネイティブプラグインを作る。&lt;/p&gt;&#xA;&lt;h2 id=&#34;android側&#34;&gt;Android側&lt;/h2&gt;&#xA;&lt;p&gt;まず、Activityなしのプロジェクトを作って、New ModuleからAndroid Libraryを選択。&#xA;これらのパッケージ名がUnityで使うものと被らないようにする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iOS端末をBLEのPeripheralにする</title>
      <link>https://www.sambaiz.net/article/26/</link>
      <pubDate>Sun, 23 Oct 2016 01:29:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/26/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/jp/documentation/CoreBluetoothPG.pdf&#34;&gt;CoreBluetoothプログラミングガイド&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;流れ&#34;&gt;流れ&lt;/h2&gt;&#xA;&lt;p&gt;まず、CoreBluetooth.frameworkを追加する。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;CoreBluetooth&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CBPeripheralManagerを生成。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;peripheralManager = CBPeripheralManager(delegate: &lt;span style=&#34;color:#ff79c6&#34;&gt;self&lt;/span&gt;, queue: &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;stateが変化したらdelegateメソッドが呼ばれるので&lt;code&gt;.poweredOn&lt;/code&gt;であることを確認できれば&#xA;Managerの準備は完了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>android-BluetoothLeGattを読む</title>
      <link>https://www.sambaiz.net/article/25/</link>
      <pubDate>Fri, 21 Oct 2016 14:10:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/25/</guid>
      <description>&lt;p&gt;BLEのサンプルコード。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/googlesamples/android-BluetoothLeGatt&#34;&gt;https://github.com/googlesamples/android-BluetoothLeGatt&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;devicescanactivity&#34;&gt;DeviceScanActivity&lt;/h2&gt;&#xA;&lt;p&gt;BLEをサポートしているかチェックする。&#xA;&lt;a href=&#34;https://www.sambaiz.net/article/23&#34;&gt;BluetoothChat&lt;/a&gt;ではBluetoothAdapterを取得するのに&#xA;&lt;code&gt;BluetoothAdapter.getDefaultAdapter()&lt;/code&gt;のようにしていたが、&#xA;BLEをサポートしているような新しいバージョンでは、BluetoothManagerの&lt;code&gt;getAdapter()&lt;/code&gt;を使うらしい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PackerでAMIを作る</title>
      <link>https://www.sambaiz.net/article/24/</link>
      <pubDate>Tue, 18 Oct 2016 22:37:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/24/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.packer.io/&#34;&gt;https://www.packer.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;いろんなプラットフォームのイメージを作ることができるツール。&#xA;これでfluentdのログサーバーのAMIを作る。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ brew install packer # mac&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ packer -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0.10.1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;設定ファイルはこんな感じ。&lt;code&gt;variables&lt;/code&gt;の値は&lt;code&gt;{{user ... }}&lt;/code&gt;のところで使われる。&#xA;&lt;code&gt;builders&lt;/code&gt;に作るイメージの情報を書いて、&lt;code&gt;provisioners&lt;/code&gt;で環境を作る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>android-bluetoothChatを読む</title>
      <link>https://www.sambaiz.net/article/23/</link>
      <pubDate>Sat, 15 Oct 2016 14:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/23/</guid>
      <description>&lt;p&gt;Classic Bluetoothのサンプルコード。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/googlesamples/android-BluetoothChat&#34;&gt;https://github.com/googlesamples/android-BluetoothChat&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;mainactivity&#34;&gt;MainActivity&lt;/h2&gt;&#xA;&lt;p&gt;まず、MainActivity。&lt;/p&gt;&#xA;&lt;p&gt;Fragmentのcommitや、&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@Override&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onCreate&lt;/span&gt;(Bundle savedInstanceState) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;onCreate&lt;/span&gt;(savedInstanceState);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setContentView(R.&lt;span style=&#34;color:#50fa7b&#34;&gt;layout&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;activity_main&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (savedInstanceState &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        FragmentTransaction transaction &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getSupportFragmentManager().&lt;span style=&#34;color:#50fa7b&#34;&gt;beginTransaction&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        BluetoothChatFragment fragment &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; BluetoothChatFragment();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        transaction.&lt;span style=&#34;color:#50fa7b&#34;&gt;replace&lt;/span&gt;(R.&lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;sample_content_fragment&lt;/span&gt;, fragment);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        transaction.&lt;span style=&#34;color:#50fa7b&#34;&gt;commit&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;オプションメニューの設定をしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>静的ウェブサイトエンジンHugoに乗り換えた</title>
      <link>https://www.sambaiz.net/article/22/</link>
      <pubDate>Tue, 04 Oct 2016 22:21:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/22/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今までこのサイトはフロントのReactからLambda &amp;amp; API Gatewayで作った記事APIを呼ぶ構成になっていた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/1&#34;&gt;ホームページ作った&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;当初はページの描画をフロントに任せることで、&#xA;サーバーレス&#xA;(記事の情報をjsonで渡すAPI Gatewayと、S3の組み合わせ)&#xA;で作れると思っていたが、結果そんなに甘くはなく、サーバーサイドレンダリングするはめになる。&#xA;最初からレンダリングしたものを置いておけばいいと思った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeepDreaming with TensorFlowをやる(2)</title>
      <link>https://www.sambaiz.net/article/21/</link>
      <pubDate>Sat, 10 Sep 2016 14:46:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/21/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/20&#34;&gt;前回&lt;/a&gt;の続き。&lt;/p&gt;&#xA;&lt;h2 id=&#34;multiscale-image-generation&#34;&gt;Multiscale image generation&lt;/h2&gt;&#xA;&lt;p&gt;様々なスケールで勾配上昇させる。小さなスケールで上昇させたものをより大きなスケールでさらに上昇させていく。&#xA;ただ、壁紙のようなサイズを生成するような場合にそれを行うと、GPUのメモリを食いつぶしてしまう。&#xA;これを避けるために、画像を小さなタイルに分割し、それぞれ独立に勾配を計算する。&#xA;また、毎回画像をランダムにシフトしていくことで、タイルに見えることを避け、画像全体の品質を向上させる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DeepDreaming with Tensorflowをやる(1)</title>
      <link>https://www.sambaiz.net/article/20/</link>
      <pubDate>Wed, 07 Sep 2016 01:06:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/20/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/r0.10/tensorflow/examples/tutorials/deepdream/deepdream.ipynb&#34;&gt;https://github.com/tensorflow/tensorflow/blob/r0.10/tensorflow/examples/tutorials/deepdream/deepdream.ipynb&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;例の通りまとめながら進めていく。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;このノートブックは、畳み込みニューラルネットワークによる画像生成の手法を説明するものだ。&#xA;ネットワークは入力画像へ変換させる配列のレイヤーの集合から成り立っている。&#xA;変換のパラメータは勾配降下法で変形しながら学習していく。&#xA;内部的な画像の表現は意味不明なように見えるが、可視化し、解釈することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Grafana/InfluxDB/Fluentdでログを可視化する</title>
      <link>https://www.sambaiz.net/article/19/</link>
      <pubDate>Wed, 31 Aug 2016 20:54:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/19/</guid>
      <description>&lt;p&gt;コードは&lt;a href=&#34;https://github.com/sambaiz/grafana-influxdb-fluentd&#34;&gt;ここ&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;influxdbhttpsgithubcominfluxdatainfluxdb&#34;&gt;&lt;a href=&#34;https://github.com/influxdata/influxdb&#34;&gt;InfluxDB&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Golangで書かれた時系列データベース。今回使うのは&lt;code&gt;v0.13&lt;/code&gt;。前のバージョンと結構違うので注意。&lt;/p&gt;&#xA;&lt;p&gt;デフォルトでは無効になっている認証を&lt;a href=&#34;https://docs.influxdata.com/influxdb/v0.13/administration/authentication_and_authorization/#set-up-authentication&#34;&gt;有効にする&lt;/a&gt;ために設定ファイルを編集して設置する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GKEで複数コンテナのアプリケーションを動かす</title>
      <link>https://www.sambaiz.net/article/18/</link>
      <pubDate>Fri, 26 Aug 2016 21:57:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/18/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/17&#34;&gt;前回&lt;/a&gt;は単一コンテナのアプリケーションを動かしたが、今回はコンテナ間でやり取りが発生するものを動かす。&#xA;流れとしては、クライアントからのリクエストを&lt;code&gt;GATEWAY&lt;/code&gt;サーバーで受け取り、&lt;code&gt;SERVICE&lt;/code&gt;サーバーにリクエストし、その結果を返すまで。&lt;/p&gt;&#xA;&lt;p&gt;プログラムは以下の通り、環境変数&lt;code&gt;TYPE&lt;/code&gt;の値によって挙動を変えていて、同じイメージを使い回す。コードは&lt;a href=&#34;https://github.com/sambaiz/gke-multi-container-app&#34;&gt;ここ&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Container Engine(GKE)で単一コンテナのアプリケーションを動かす</title>
      <link>https://www.sambaiz.net/article/17/</link>
      <pubDate>Sun, 21 Aug 2016 23:37:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/17/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/hellonode/&#34;&gt;Kubernetes - Hello World Walkthrough&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;cloudsdkとkubectlのインストール&#34;&gt;CloudSDKとkubectlのインストール&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/sdk/#Quick_Start&#34;&gt;Cloud SDKをインストール&lt;/a&gt;して&lt;code&gt;gloud&lt;/code&gt;コマンドを使えるようにする。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Google Cloud SDK 122.0.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ gcloud components install kubectl&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;google-container-registryにpush&#34;&gt;Google Container RegistryにPush&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;export&lt;/span&gt; PROJECT_ID&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;******&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; docker build &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;t gcr&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#ff79c6&#34;&gt;/$&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;test:v1 &lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;$&lt;/span&gt; gcloud docker push gcr&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;io&lt;span style=&#34;color:#ff79c6&#34;&gt;/$&lt;/span&gt;PROJECT_ID&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;test:v1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;プロジェクトの課金を有効にしていないとこんなエラーメッセージが出る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JenkinsのMultiple SCMs PluginからPipeline Pluginへの移行</title>
      <link>https://www.sambaiz.net/article/16/</link>
      <pubDate>Sat, 20 Aug 2016 16:18:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/16/</guid>
      <description>&lt;p&gt;Jenkins環境を作り直すことになり、&#xA;長らく使ってきた&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Multiple&amp;#43;SCMs&amp;#43;Plugin&#34;&gt;Multiple SCMs Plugin&lt;/a&gt;がDeprecatedなので、&#xA;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline&amp;#43;Plugin&#34;&gt;Pipeline Plugin&lt;/a&gt;に移行することにした。&lt;/p&gt;&#xA;&lt;p&gt;プラグインをインストールすると、ジョブ作成時にPipelineを選択できるようになる。&#xA;Pipeline scriptの複数リポジトリを指定するところはこんな感じ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GolangでAPIとテストを書く(echo/dbr/glide/goose/mock)</title>
      <link>https://www.sambaiz.net/article/15/</link>
      <pubDate>Mon, 15 Aug 2016 04:07:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/15/</guid>
      <description>&lt;p&gt;以下の記事を参考にして簡単なAPIとそのテストを書いてみた。コードは&lt;a href=&#34;https://github.com/sambaiz/go-api-with-test&#34;&gt;ここ&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://ameblo.jp/principia-ca/entry-12130127314.html&#34;&gt;Go言語でTestableなWebアプリケーションを目指して｜サイバーエージェント 公式エンジニアブログ&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;使った主なライブラリツール&#34;&gt;使った主なライブラリ・ツール&lt;/h2&gt;&#xA;&lt;h3 id=&#34;echohttpsgithubcomlabstackecho&#34;&gt;&lt;a href=&#34;https://github.com/labstack/echo&#34;&gt;echo&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;webフレームワーク。速いらしい。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go get -u github.com/labstack/echo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn, err &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; dbr.&lt;span style=&#34;color:#50fa7b&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;root:@tcp(localhost:3306)/mboard&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;panic&lt;/span&gt;(err)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn.&lt;span style=&#34;color:#50fa7b&#34;&gt;SetMaxIdleConns&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn.&lt;span style=&#34;color:#50fa7b&#34;&gt;SetMaxOpenConns&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; echo.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// middlewares&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.&lt;span style=&#34;color:#50fa7b&#34;&gt;Use&lt;/span&gt;(middleware.&lt;span style=&#34;color:#50fa7b&#34;&gt;Logger&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.&lt;span style=&#34;color:#50fa7b&#34;&gt;Use&lt;/span&gt;(middleware.&lt;span style=&#34;color:#50fa7b&#34;&gt;Recover&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.&lt;span style=&#34;color:#50fa7b&#34;&gt;Use&lt;/span&gt;(middleware.&lt;span style=&#34;color:#50fa7b&#34;&gt;CORSWithConfig&lt;/span&gt;(middleware.CORSConfig{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AllowOrigins: []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AllowMethods: []&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;{echo.GET, echo.PUT, echo.POST, echo.DELETE},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// endpoints&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.&lt;span style=&#34;color:#50fa7b&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(c echo.Context) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; c.&lt;span style=&#34;color:#50fa7b&#34;&gt;String&lt;/span&gt;(http.StatusOK, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;e.&lt;span style=&#34;color:#50fa7b&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/messages&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(c echo.Context) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&#x9;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; handler.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewMessageWithSession&lt;/span&gt;(conn.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewSession&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;)).&lt;span style=&#34;color:#50fa7b&#34;&gt;GetMessages&lt;/span&gt;(c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;e.&lt;span style=&#34;color:#50fa7b&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/messages&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;func&lt;/span&gt;(c echo.Context) &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;&#x9;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; handler.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewMessageWithSession&lt;/span&gt;(conn.&lt;span style=&#34;color:#50fa7b&#34;&gt;NewSession&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;nil&lt;/span&gt;)).&lt;span style=&#34;color:#50fa7b&#34;&gt;CreateMessage&lt;/span&gt;(c)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std &lt;span style=&#34;color:#ff79c6&#34;&gt;:=&lt;/span&gt; standard.&lt;span style=&#34;color:#50fa7b&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;:1323&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std.&lt;span style=&#34;color:#50fa7b&#34;&gt;SetHandler&lt;/span&gt;(e)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gracehttp.&lt;span style=&#34;color:#50fa7b&#34;&gt;Serve&lt;/span&gt;(std.Server)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dbrhttpsgithubcomgocraftdbr&#34;&gt;&lt;a href=&#34;https://github.com/gocraft/dbr&#34;&gt;dbr&lt;/a&gt;&lt;/h3&gt;&#xA;&lt;p&gt;database/sql を強化したもの。&lt;/p&gt;</description>
    </item>
    <item>
      <title>O&#39;Reillyの「マイクロサービスアーキテクチャ」を読んだ</title>
      <link>https://www.sambaiz.net/article/14/</link>
      <pubDate>Sat, 06 Aug 2016 18:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/14/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.oreilly.co.jp/books/9784873117607/&#34;&gt;O&amp;rsquo;Reilly Japan - マイクロサービスアーキテクチャ&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;設計、開発、テストや監視など一通りまとまっているマイクロサービスアーキテクチャの本。&lt;/p&gt;&#xA;&lt;p&gt;マイクロサービスアーキテクチャというのは、協調して動作する小規模で自律的なサービスでシステムを構成するもので、&#xA;一般的なモノリシック(一枚岩)システムのモジュールのように独立したサービスを作っていく。&#xA;自律的というのは、他には何も変更せずに、単独でサービスの変更やデプロイを行えるということ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tensorflowの学習データを使ったAPIを作る</title>
      <link>https://www.sambaiz.net/article/13/</link>
      <pubDate>Fri, 05 Aug 2016 22:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/13/</guid>
      <description>&lt;p&gt;チュートリアルのMNISTの学習データを使って、手書き数字画像のデータを受け取り、数字を返すAPIを作る。&#xA;コードは&lt;a href=&#34;https://github.com/sambaiz/tensorflow-use-api-sample&#34;&gt;ここ&lt;/a&gt;にある。&lt;/p&gt;&#xA;&lt;h2 id=&#34;学習して結果を保存する&#34;&gt;学習して結果を保存する&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/6&#34;&gt;前回&lt;/a&gt;の学習結果のcheckpointファイルを出力する。&#xA;&lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/train/Saver#save&#34;&gt;tf.train.Saver().save&lt;/a&gt;でnameで対応するVariableの値が保存できる。&#xA;また、その際&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/r1.9/tensorflow/python/training/saver.py#L1560&#34;&gt;デフォルト&lt;/a&gt;で&lt;a href=&#34;https://www.tensorflow.org/api_guides/python/meta_graph&#34;&gt;MetaGraph&lt;/a&gt;もexportされ、これをimportすればGraphも復元することができる。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; tensorflow &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; tf&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;from&lt;/span&gt; tensorflow.examples.tutorials.mnist &lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; input_data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Mnist&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; __init__(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        g &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Graph()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; g&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;as_default():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            W_conv1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_weight_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;W_conv1&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            b_conv1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_bias_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b_conv1&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;placeholder(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;float32, [&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;784&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            x_image &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_x, [&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;,&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h_conv1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;relu(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_conv2d(x_image, W_conv1) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b_conv1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h_pool1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_max_pool_2x2(h_conv1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            W_conv2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_weight_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;W_conv2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            b_conv2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_bias_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b_conv2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h_conv2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;relu(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_conv2d(h_pool1, W_conv2) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b_conv2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h_pool2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_max_pool_2x2(h_conv2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            W_fc1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_weight_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;W_fc1&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            b_fc1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_bias_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b_fc1&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h_pool2_flat &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reshape(h_pool2, [&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h_fc1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;relu(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;matmul(h_pool2_flat, W_fc1) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b_fc1)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keep_prob &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;placeholder(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;float32)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            h_fc1_drop &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;dropout(h_fc1, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keep_prob)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            W_fc2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_weight_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;1024&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;W_fc2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            b_fc2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_bias_variable([&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;],  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;b_fc2&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            y_conv &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;softmax(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;matmul(h_fc1_drop, W_fc2) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b_fc2)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_what_number &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;argmax(y_conv, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_y_ &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;placeholder(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;float32, [&lt;span style=&#34;color:#ff79c6&#34;&gt;None&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cross_entropy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reduce_mean(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reduce_sum(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_y_ &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;log(y_conv), reduction_indices&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_train_step &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;AdamOptimizer(&lt;span style=&#34;color:#bd93f9&#34;&gt;1e-4&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;minimize(cross_entropy)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            correct_prediction &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;equal(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;argmax(y_conv,&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;), tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;argmax(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_y_,&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_accuracy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reduce_mean(tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;cast(correct_prediction, tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;float32))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Session()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            init &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;initialize_all_variables()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(init)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_saver &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Saver()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;save&lt;/span&gt;(self, ckpt_file_name):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_saver&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;save(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess, ckpt_file_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;restore&lt;/span&gt;(self, ckpt_file_name):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_saver&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;restore(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess, ckpt_file_name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;what_number&lt;/span&gt;(self, image_array):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_what_number, feed_dict&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_x: image_array, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keep_prob: &lt;span style=&#34;color:#bd93f9&#34;&gt;1.0&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;train&lt;/span&gt;(self, num):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;hasattr&lt;/span&gt;(self, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;_mnist&amp;#34;&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_mnist &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; input_data&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;read_data_sets(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;MNIST_data/&amp;#34;&lt;/span&gt;, one_hot&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;range&lt;/span&gt;(num):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            batch &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_mnist&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;train&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;next_batch(&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              train_accuracy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_accuracy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;eval(session&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess, feed_dict&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_x:batch[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_y_: batch[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keep_prob: &lt;span style=&#34;color:#bd93f9&#34;&gt;1.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;step &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;, training accuracy &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%g&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;(i, train_accuracy))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;run(self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_train_step, feed_dict&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_x: batch[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_y_: batch[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keep_prob: &lt;span style=&#34;color:#bd93f9&#34;&gt;0.5&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test accuracy &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;%g&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt;self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_accuracy&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;eval(session&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess, feed_dict&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_x: self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_mnist&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;images, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_y_: self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_mnist&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;test&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;labels, self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;_keep_prob: &lt;span style=&#34;color:#bd93f9&#34;&gt;1.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;close&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;sess&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;close()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_weight_variable&lt;/span&gt;(self, shape, name):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      initial &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;truncated_normal(shape, stddev&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0.1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Variable(initial, name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_bias_variable&lt;/span&gt;(self, shape, name):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      initial &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;constant(&lt;span style=&#34;color:#bd93f9&#34;&gt;0.1&lt;/span&gt;, shape&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;shape)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;Variable(initial, name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;name)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_conv2d&lt;/span&gt;(self, x, W):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;conv2d(x, W, strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], padding&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SAME&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;_max_pool_2x2&lt;/span&gt;(self, x):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; tf&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;max_pool(x, ksize&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            strides&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;], padding&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;SAME&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;train() で学習し、save() でチェックポイントファイルを保存できる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Googleが作ったRPCフレームワークgRPCを使ってみた</title>
      <link>https://www.sambaiz.net/article/12/</link>
      <pubDate>Fri, 29 Jul 2016 22:00:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/12/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;A high performance, open source, general RPC framework that puts mobile and HTTP/2 first.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;what-is-grpchttpwwwgrpciodocswhat-is-grpc&#34;&gt;&lt;a href=&#34;http://www.grpc.io/docs/#what-is-grpc&#34;&gt;What is gRPC?&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;gRPCを使うと、クライアントアプリケーションは直接ローカルのオブジェクトのように、他のマシンのサーバーアプリケーションのメソッドを呼ぶことができ、&#xA;分散したアプリケーションやサービスを簡単に作ることができる。&#xA;多くのRPCシステムと同様にgRPCはサービスを定義し、リモートから呼べるメソッドとそのパラメーターおよび返り値の型を記述するようになっている。&#xA;サーバーサイドではインタフェースを実装し、クライアントからの呼び出しをハンドリングするgRPCサーバーを実行する。&#xA;クライアントサイドではサーバーと同じメソッドを提供するスタブを持っている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQLで大文字小文字を区別しないのを直す</title>
      <link>https://www.sambaiz.net/article/11/</link>
      <pubDate>Sun, 24 Jul 2016 22:12:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/11/</guid>
      <description>&lt;p&gt;Collationの話。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MySQL 5.6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;TABLE&lt;/span&gt; sample (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  id &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;SERIAL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) ENGINE&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;InnoDB &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;CHARACTER&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;SET&lt;/span&gt; utf8mb4;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;INTO&lt;/span&gt; sample (name) &lt;span style=&#34;color:#ff79c6&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;tom&amp;#39;&lt;/span&gt;),(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;),(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;TOM&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;このテーブルを&amp;quot;tom&amp;quot;で絞り込むとこうなる。大文字小文字を区別していない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>グラフデータベースNeo4jを触ってみた</title>
      <link>https://www.sambaiz.net/article/10/</link>
      <pubDate>Thu, 21 Jul 2016 09:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/10/</guid>
      <description>&lt;p&gt;社内勉強会で&lt;a href=&#34;https://github.com/neo4j/neo4j&#34;&gt;オープンソース&lt;/a&gt;の&#xA;グラフデータベース&lt;a href=&#34;https://neo4j.com/&#34;&gt;Neo4j&lt;/a&gt;が紹介されていたので触ってみた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-graph-databasehttpsneo4jcomdevelopergraph-database&#34;&gt;&lt;a href=&#34;https://neo4j.com/developer/graph-database/&#34;&gt;What is a Graph Database?&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;つながりも含めたグラフとしてデータを扱うデータベース。&#xA;データセットのサイズによらず、複雑なつながりや、クエリをうまく扱える。&#xA;無数のデータの中から、関係ないデータを見ることなく多数のノードとつながりからなる必要なデータだけを取れる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetesのチュートリアルをたどる</title>
      <link>https://www.sambaiz.net/article/9/</link>
      <pubDate>Mon, 18 Jul 2016 22:22:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/9/</guid>
      <description>&lt;h2 id=&#34;kubernetesとはhttpkubernetesiodocswhatisk8s&#34;&gt;&lt;a href=&#34;http://kubernetes.io/docs/whatisk8s/&#34;&gt;Kubernetesとは&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Kubernetes(発音は&lt;a href=&#34;https://cloudplatform.googleblog.com/2014/06/an-update-on-container-support-on-google-cloud-platform.html&#34;&gt;koo-ber-nay&amp;rsquo;-tace&lt;/a&gt;。&#xA;ギリシャ語で操舵手。)はGoogleによって開発が始められた、アプリケーションコンテナにおける自動デプロイ、スケーリング、操作を&#xA;自動化するOSS。K8sと略される。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.jsのバージョン管理</title>
      <link>https://www.sambaiz.net/article/8/</link>
      <pubDate>Fri, 15 Jul 2016 19:20:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/8/</guid>
      <description>&lt;h2 id=&#34;nhttpsgithubcomtjn&#34;&gt;&lt;a href=&#34;https://github.com/tj/n&#34;&gt;n&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;nodeが必要だが手軽。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;n latest&lt;/code&gt;, &lt;code&gt;n stable&lt;/code&gt;, &lt;code&gt;n lts&lt;/code&gt;でバージョンが切り替わる。&#xA;バージョンを指定する場合、&lt;code&gt;n &amp;lt;version&amp;gt;&lt;/code&gt;でインストールし、&lt;code&gt;n&lt;/code&gt;でインストールされているバージョンの一覧から選択できる。&#xA;バージョンの削除は&lt;code&gt;n - &amp;lt;version&amp;gt;&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker公式ドキュメント&#34;network コマンドを使う&#34;を読む</title>
      <link>https://www.sambaiz.net/article/7/</link>
      <pubDate>Fri, 15 Jul 2016 00:38:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/7/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Docker version 1.12.0-rc2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;公式ドキュメント&lt;a href=&#34;http://docs.docker.jp/engine/userguide/networking/work-with-networks.html&#34;&gt;network コマンドを使う&lt;/a&gt;&#xA;の内容をまとめてみた。&lt;/p&gt;&#xA;&lt;p&gt;dockerには3つのデフォルトネットワークが存在する。&lt;code&gt;docker run&lt;/code&gt;時に&lt;code&gt;--net&lt;/code&gt;オプションでネットワークを指定しない限り、&#xA;docker0として表示されるbridgeネットワークにコンテナを接続する。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlow チュートリアル2(Deep MNIST for Experts)</title>
      <link>https://www.sambaiz.net/article/6/</link>
      <pubDate>Tue, 12 Jul 2016 21:16:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/6/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.sambaiz.net/article/3&#34;&gt;前回&lt;/a&gt;に引き続き、まとめながら進めていく。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.tensorflow.org/versions/r0.9/tutorials/mnist/pros/index.html&#34;&gt;Deep MNIST for Experts&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;start-tensorflow-interactivesession&#34;&gt;Start TensorFlow InteractiveSession&lt;/h3&gt;&#xA;&lt;p&gt;今回は、前回のようにグラフを作成してからSessionを開始する代わりに&#xA;&lt;code&gt;InteractiveSession&lt;/code&gt;を使う。&#xA;グラフを作成し実行するのをインタラクティブに行うことができ、IPythonのような環境で便利だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>webpack環境でredux&amp;react-routerのページをサーバーサイドレンダリングする</title>
      <link>https://www.sambaiz.net/article/5/</link>
      <pubDate>Sun, 10 Jul 2016 03:08:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/5/</guid>
      <description>&lt;p&gt;このページをGoogleのSearch Consoleからクローラーがちゃんと見ているか確認してみたところ真っ白のページになってしまったので、&#xA;サーバーサイドレンダリングすることにした。&#xA;コードは&lt;a href=&#34;https://github.com/sambaiz/sambaiz.net/tree/v0.23&#34;&gt;github&lt;/a&gt;に上げてある。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQLのUNIX_TIMESTAMPにある程度未来の日付を渡すと0になる</title>
      <link>https://www.sambaiz.net/article/4/</link>
      <pubDate>Mon, 04 Jul 2016 19:49:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/4/</guid>
      <description>&lt;p&gt;以下、MySQL5.6で遭遇した。&lt;/p&gt;&#xA;&lt;p&gt;MySQLの&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.6/ja/date-and-time-functions.html#function_unix-timestamp&#34;&gt;UNIX_TIMESTAMP&lt;/a&gt;は&#xA;DATETIME文字列などを引数にとり、UNIXタイムスタンプ(1970-01-01 00:00:00 UTCを起点とした経過秒数)を返す関数だ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>TensorFlow チュートリアルまで</title>
      <link>https://www.sambaiz.net/article/3/</link>
      <pubDate>Sun, 03 Jul 2016 23:37:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/3/</guid>
      <description>&lt;p&gt;Googleが公開した人工知能ライブラリTensorFlowを使ってみる。&#xA;&lt;a href=&#34;https://www.tensorflow.org/versions/r0.9/get_started/os_setup.html&#34;&gt;セットアップ&lt;/a&gt;方法はいくつか提供されているが、Dockerで動かすことにした。&#xA;Jupyter Notebookが立ち上がるのですぐに試せて良い。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run -it -p 8888:8888 gcr.io/tensorflow/tensorflow&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;http://localhost:8888/tree&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reactで作ったページにTwitterCardsとOGPのメタデータを埋める</title>
      <link>https://www.sambaiz.net/article/2/</link>
      <pubDate>Sat, 02 Jul 2016 13:23:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/2/</guid>
      <description>&lt;p&gt;せっかくページを作ったので、SNSにシェアするときに見栄えをよくしたい。&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;img_container&#34;&gt;&lt;a href=&#34;https://www.sambaiz.net/article/2/images/ogp.jpg&#34;&gt;&#xA;    &lt;img style=&#34;max-width: 100%; width: auto; height: auto;&#34; src=&#34;https://www.sambaiz.net/article/2/images/ogp_hu_21e92c13bd3b641e.jpg&#34; width=&#34;491&#34; height=&#34;201&#34; alt=&#34;Facebookに表示される例&#34;&gt;&#xA;&lt;/a&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;p&gt;Twitter CardsやOGPのmetaタグを埋めるとTwitterやFacebookにURLを貼ったときに上のように表示されるようになる(上はFacebookの例)。そこで、&lt;a href=&#34;https://github.com/nfl/react-helmet&#34;&gt;react-helmet&lt;/a&gt;でこんな感じで動的に埋め込んだんだが読んでくれない。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ブログを作った</title>
      <link>https://www.sambaiz.net/article/1/</link>
      <pubDate>Wed, 29 Jun 2016 23:43:00 +0900</pubDate>
      <guid>https://www.sambaiz.net/article/1/</guid>
      <description>&lt;p&gt;最近表に出るものを作っていなかったので、このサイトを作ってみた。&lt;/p&gt;&#xA;&lt;p&gt;表はReact/Reduxで、裏側はAWSのLambdaでサーバーレスに作ってある。&#xA;コードは&lt;a href=&#34;https://github.com/sambaiz/sambaiz.net&#34;&gt;github&lt;/a&gt;に公開してみた。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
